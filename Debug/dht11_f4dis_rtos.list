
dht11_f4dis_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000643c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          00002440  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200024d4  200024d4  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002fee3  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000062a8  00000000  00000000  0004ffa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00014b53  00000000  00000000  0005624f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001948  00000000  00000000  0006ada8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  0006c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000e6ef  00000000  00000000  0006e818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000985d  00000000  00000000  0007cf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00086764  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004f34  00000000  00000000  000867e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065b4 	.word	0x080065b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080065b4 	.word	0x080065b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x30>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800059a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f82f 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f005 f98e 	bl	80058d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f005 f860 	bl	800567c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd08      	pop	{r3, pc}
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x10>)
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_IncTick+0x14>)
 80005c8:	6811      	ldr	r1, [r2, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	440b      	add	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20001c64 	.word	0x20001c64
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <HAL_GetTick+0x8>)
 80005de:	6818      	ldr	r0, [r3, #0]
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20001c64 	.word	0x20001c64

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
 80005ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff fff6 	bl	80005dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	bf1c      	itt	ne
 80005f4:	4b05      	ldrne	r3, [pc, #20]	; (800060c <HAL_Delay+0x24>)
 80005f6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005fa:	bf18      	it	ne
 80005fc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fe:	f7ff ffed 	bl	80005dc <HAL_GetTick>
 8000602:	1b40      	subs	r0, r0, r5
 8000604:	4284      	cmp	r4, r0
 8000606:	d8fa      	bhi.n	80005fe <HAL_Delay+0x16>
  {
  }
}
 8000608:	bd38      	pop	{r3, r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000612:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	0200      	lsls	r0, r0, #8
 8000622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800062a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800062c:	60d3      	str	r3, [r2, #12]
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	68dc      	ldr	r4, [r3, #12]
 800063a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	2b04      	cmp	r3, #4
 8000646:	bf28      	it	cs
 8000648:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 0501 	mov.w	r5, #1
 8000650:	fa05 f303 	lsl.w	r3, r5, r3
 8000654:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	bf8c      	ite	hi
 800065a:	3c03      	subhi	r4, #3
 800065c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065e:	4019      	ands	r1, r3
 8000660:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000662:	fa05 f404 	lsl.w	r4, r5, r4
 8000666:	3c01      	subs	r4, #1
 8000668:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	ea42 0201 	orr.w	r2, r2, r1
 8000670:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfad      	iteet	ge
 8000676:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f000 000f 	andlt.w	r0, r0, #15
 800067e:	4b06      	ldrlt	r3, [pc, #24]	; (8000698 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	bfb5      	itete	lt
 8000686:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00
 8000698:	e000ed14 	.word	0xe000ed14

0800069c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800069c:	2800      	cmp	r0, #0
 800069e:	db08      	blt.n	80006b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a0:	0942      	lsrs	r2, r0, #5
 80006a2:	2301      	movs	r3, #1
 80006a4:	f000 001f 	and.w	r0, r0, #31
 80006a8:	fa03 f000 	lsl.w	r0, r3, r0
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006be:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000870 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c4:	4a68      	ldr	r2, [pc, #416]	; (8000868 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006c6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000874 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006cc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ce:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006d2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006d6:	42ac      	cmp	r4, r5
 80006d8:	f040 80b0 	bne.w	800083c <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006dc:	684c      	ldr	r4, [r1, #4]
 80006de:	f024 0c10 	bic.w	ip, r4, #16
 80006e2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006e6:	2e01      	cmp	r6, #1
 80006e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006ec:	d812      	bhi.n	8000714 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f0:	2603      	movs	r6, #3
 80006f2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006f6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006fa:	68ce      	ldr	r6, [r1, #12]
 80006fc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000700:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000702:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000704:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000706:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800070a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800070e:	409e      	lsls	r6, r3
 8000710:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000712:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000714:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000716:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000718:	fa06 f60e 	lsl.w	r6, r6, lr
 800071c:	43f6      	mvns	r6, r6
 800071e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000722:	688f      	ldr	r7, [r1, #8]
 8000724:	fa07 f70e 	lsl.w	r7, r7, lr
 8000728:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800072c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000730:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000732:	d116      	bne.n	8000762 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000734:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000738:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800073c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000740:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000744:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000748:	f04f 0c0f 	mov.w	ip, #15
 800074c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000750:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000754:	690f      	ldr	r7, [r1, #16]
 8000756:	fa07 f70b 	lsl.w	r7, r7, fp
 800075a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800075e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000762:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000764:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000766:	f004 0703 	and.w	r7, r4, #3
 800076a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800076e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000772:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000774:	00e6      	lsls	r6, r4, #3
 8000776:	d561      	bpl.n	800083c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000778:	f04f 0b00 	mov.w	fp, #0
 800077c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000780:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000784:	4e39      	ldr	r6, [pc, #228]	; (800086c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800078a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800078e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000792:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000796:	9703      	str	r7, [sp, #12]
 8000798:	9f03      	ldr	r7, [sp, #12]
 800079a:	f023 0703 	bic.w	r7, r3, #3
 800079e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007a2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b2:	f04f 0e0f 	mov.w	lr, #15
 80007b6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ba:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007bc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c0:	d043      	beq.n	800084a <HAL_GPIO_Init+0x192>
 80007c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c6:	42b0      	cmp	r0, r6
 80007c8:	d041      	beq.n	800084e <HAL_GPIO_Init+0x196>
 80007ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ce:	42b0      	cmp	r0, r6
 80007d0:	d03f      	beq.n	8000852 <HAL_GPIO_Init+0x19a>
 80007d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d6:	42b0      	cmp	r0, r6
 80007d8:	d03d      	beq.n	8000856 <HAL_GPIO_Init+0x19e>
 80007da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007de:	42b0      	cmp	r0, r6
 80007e0:	d03b      	beq.n	800085a <HAL_GPIO_Init+0x1a2>
 80007e2:	4548      	cmp	r0, r9
 80007e4:	d03b      	beq.n	800085e <HAL_GPIO_Init+0x1a6>
 80007e6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007ea:	42b0      	cmp	r0, r6
 80007ec:	d039      	beq.n	8000862 <HAL_GPIO_Init+0x1aa>
 80007ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007f2:	42b0      	cmp	r0, r6
 80007f4:	bf14      	ite	ne
 80007f6:	2608      	movne	r6, #8
 80007f8:	2607      	moveq	r6, #7
 80007fa:	fa06 f60c 	lsl.w	r6, r6, ip
 80007fe:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000802:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000804:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000806:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000808:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800080c:	bf0c      	ite	eq
 800080e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000810:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000812:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000814:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000816:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800081a:	bf0c      	ite	eq
 800081c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800081e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000820:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000822:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000824:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000828:	bf0c      	ite	eq
 800082a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800082c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800082e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000830:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000834:	bf54      	ite	pl
 8000836:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000838:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800083a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083c:	3301      	adds	r3, #1
 800083e:	2b10      	cmp	r3, #16
 8000840:	f47f af45 	bne.w	80006ce <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000844:	b005      	add	sp, #20
 8000846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	465e      	mov	r6, fp
 800084c:	e7d5      	b.n	80007fa <HAL_GPIO_Init+0x142>
 800084e:	2601      	movs	r6, #1
 8000850:	e7d3      	b.n	80007fa <HAL_GPIO_Init+0x142>
 8000852:	2602      	movs	r6, #2
 8000854:	e7d1      	b.n	80007fa <HAL_GPIO_Init+0x142>
 8000856:	2603      	movs	r6, #3
 8000858:	e7cf      	b.n	80007fa <HAL_GPIO_Init+0x142>
 800085a:	2604      	movs	r6, #4
 800085c:	e7cd      	b.n	80007fa <HAL_GPIO_Init+0x142>
 800085e:	2605      	movs	r6, #5
 8000860:	e7cb      	b.n	80007fa <HAL_GPIO_Init+0x142>
 8000862:	2606      	movs	r6, #6
 8000864:	e7c9      	b.n	80007fa <HAL_GPIO_Init+0x142>
 8000866:	bf00      	nop
 8000868:	40013c00 	.word	0x40013c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40023800 	.word	0x40023800
 8000874:	40021400 	.word	0x40021400

08000878 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000878:	6903      	ldr	r3, [r0, #16]
 800087a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800087c:	bf14      	ite	ne
 800087e:	2001      	movne	r0, #1
 8000880:	2000      	moveq	r0, #0
 8000882:	4770      	bx	lr

08000884 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000884:	b10a      	cbz	r2, 800088a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000886:	6181      	str	r1, [r0, #24]
 8000888:	4770      	bx	lr
 800088a:	0409      	lsls	r1, r1, #16
 800088c:	e7fb      	b.n	8000886 <HAL_GPIO_WritePin+0x2>

0800088e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800088e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000892:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000894:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8000898:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800089c:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80008a0:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80008a4:	2801      	cmp	r0, #1
 80008a6:	d028      	beq.n	80008fa <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 80008a8:	2028      	movs	r0, #40	; 0x28
 80008aa:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 80008ae:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 80008b0:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80008b2:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 80008b6:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80008ba:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 80008be:	bf08      	it	eq
 80008c0:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 80008c2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80008c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 80008ca:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80008ce:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80008d2:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 80008d6:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 80008da:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80008de:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 80008e2:	f8cd c008 	str.w	ip, [sp, #8]
 80008e6:	e88d 4080 	stmia.w	sp, {r7, lr}
 80008ea:	6820      	ldr	r0, [r4, #0]
 80008ec:	f001 ffa4 	bl	8002838 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80008f0:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 80008f4:	b004      	add	sp, #16
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 80008fa:	2002      	movs	r0, #2
 80008fc:	e7fa      	b.n	80008f4 <HAL_HCD_HC_Init+0x66>

080008fe <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80008fe:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000902:	2b01      	cmp	r3, #1
{
 8000904:	b510      	push	{r4, lr}
 8000906:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000908:	d009      	beq.n	800091e <HAL_HCD_HC_Halt+0x20>
 800090a:	2301      	movs	r3, #1
 800090c:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000910:	6800      	ldr	r0, [r0, #0]
 8000912:	f002 f81b 	bl	800294c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000916:	2000      	movs	r0, #0
 8000918:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 800091c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800091e:	2002      	movs	r0, #2
}
 8000920:	bd10      	pop	{r4, pc}

08000922 <HAL_HCD_Init>:
{
 8000922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000926:	4607      	mov	r7, r0
{
 8000928:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 800092a:	2800      	cmp	r0, #0
 800092c:	d041      	beq.n	80009b2 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800092e:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8000932:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000934:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000938:	b91b      	cbnz	r3, 8000942 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 800093a:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 800093e:	f005 f879 	bl	8005a34 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000942:	2303      	movs	r3, #3
 8000944:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 800094a:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800094c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000950:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000954:	bf08      	it	eq
 8000956:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000958:	f001 fe2a 	bl	80025b0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800095c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800095e:	466d      	mov	r5, sp
 8000960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800096a:	e885 0003 	stmia.w	r5, {r0, r1}
 800096e:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000972:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000974:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f001 fdd3 	bl	8002524 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800097e:	f856 0b10 	ldr.w	r0, [r6], #16
 8000982:	2101      	movs	r1, #1
 8000984:	f001 fe1a 	bl	80025bc <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000988:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800098a:	466d      	mov	r5, sp
 800098c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800098e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000992:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000996:	e885 0003 	stmia.w	r5, {r0, r1}
 800099a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f001 feca 	bl	8002738 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 80009aa:	2000      	movs	r0, #0
}
 80009ac:	b00a      	add	sp, #40	; 0x28
 80009ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80009b2:	2001      	movs	r0, #1
 80009b4:	e7fa      	b.n	80009ac <HAL_HCD_Init+0x8a>
	...

080009b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80009ba:	2428      	movs	r4, #40	; 0x28
 80009bc:	fb04 0401 	mla	r4, r4, r1, r0
{
 80009c0:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80009c4:	9e06      	ldr	r6, [sp, #24]
 80009c6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 80009ca:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80009ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 80009d2:	b96f      	cbnz	r7, 80009f0 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80009d4:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80009d6:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80009d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 80009dc:	d02b      	beq.n	8000a36 <HAL_HCD_HC_SubmitRequest+0x7e>
 80009de:	42bb      	cmp	r3, r7
 80009e0:	d029      	beq.n	8000a36 <HAL_HCD_HC_SubmitRequest+0x7e>
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d131      	bne.n	8000a4a <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80009e6:	2328      	movs	r3, #40	; 0x28
 80009e8:	fb03 0301 	mla	r3, r3, r1, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	e02a      	b.n	8000a46 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009f0:	f04f 0e02 	mov.w	lr, #2
 80009f4:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d826      	bhi.n	8000a4a <HAL_HCD_HC_SubmitRequest+0x92>
 80009fc:	a401      	add	r4, pc, #4	; (adr r4, 8000a04 <HAL_HCD_HC_SubmitRequest+0x4c>)
 80009fe:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	080009e7 	.word	0x080009e7
 8000a0c:	08000a37 	.word	0x08000a37
 8000a10:	08000a37 	.word	0x08000a37
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000a14:	2f01      	cmp	r7, #1
 8000a16:	d118      	bne.n	8000a4a <HAL_HCD_HC_SubmitRequest+0x92>
 8000a18:	b9ba      	cbnz	r2, 8000a4a <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8000a1a:	b925      	cbnz	r5, 8000a26 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000a1c:	2328      	movs	r3, #40	; 0x28
 8000a1e:	fb03 0301 	mla	r3, r3, r1, r0
 8000a22:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000a26:	2328      	movs	r3, #40	; 0x28
 8000a28:	fb03 0301 	mla	r3, r3, r1, r0
 8000a2c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000a30:	b14a      	cbz	r2, 8000a46 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a32:	2202      	movs	r2, #2
 8000a34:	e007      	b.n	8000a46 <HAL_HCD_HC_SubmitRequest+0x8e>
 8000a36:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000a38:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8000a3c:	b9d2      	cbnz	r2, 8000a74 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000a3e:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8000a42:	2c00      	cmp	r4, #0
 8000a44:	d1f5      	bne.n	8000a32 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a4a:	2428      	movs	r4, #40	; 0x28
 8000a4c:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000a50:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000a52:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a56:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a58:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000a5a:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8000a60:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a66:	3138      	adds	r1, #56	; 0x38
 8000a68:	7c02      	ldrb	r2, [r0, #16]
 8000a6a:	6800      	ldr	r0, [r0, #0]
}
 8000a6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a70:	f001 bfd0 	b.w	8002a14 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000a74:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000a78:	e7da      	b.n	8000a30 <HAL_HCD_HC_SubmitRequest+0x78>
 8000a7a:	bf00      	nop

08000a7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a80:	6806      	ldr	r6, [r0, #0]
{
 8000a82:	b087      	sub	sp, #28
 8000a84:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a86:	4630      	mov	r0, r6
 8000a88:	f001 fdf8 	bl	800267c <USB_GetMode>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	f040 80b4 	bne.w	8000bfa <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	f001 fdee 	bl	8002674 <USB_ReadInterrupts>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	f000 80ae 	beq.w	8000bfa <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	f001 fde8 	bl	8002674 <USB_ReadInterrupts>
 8000aa4:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000aa6:	bf48      	it	mi
 8000aa8:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000aaa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000aac:	bf44      	itt	mi
 8000aae:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000ab2:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ab4:	f001 fdde 	bl	8002674 <USB_ReadInterrupts>
 8000ab8:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000aba:	bf48      	it	mi
 8000abc:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000abe:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ac0:	bf44      	itt	mi
 8000ac2:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000ac6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000ac8:	f001 fdd4 	bl	8002674 <USB_ReadInterrupts>
 8000acc:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ace:	bf48      	it	mi
 8000ad0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ad2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ad4:	bf44      	itt	mi
 8000ad6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000ada:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000adc:	f001 fdca 	bl	8002674 <USB_ReadInterrupts>
 8000ae0:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ae2:	bf48      	it	mi
 8000ae4:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ae6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ae8:	bf44      	itt	mi
 8000aea:	2202      	movmi	r2, #2
 8000aec:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000aee:	f001 fdc1 	bl	8002674 <USB_ReadInterrupts>
 8000af2:	0082      	lsls	r2, r0, #2
 8000af4:	d510      	bpl.n	8000b18 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000af6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000afa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000afe:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000b02:	4620      	mov	r0, r4
 8000b04:	f004 ffe6 	bl	8005ad4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	6820      	ldr	r0, [r4, #0]
 8000b0c:	f001 fdba 	bl	8002684 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	f001 fdab 	bl	8002674 <USB_ReadInterrupts>
 8000b1e:	01c3      	lsls	r3, r0, #7
 8000b20:	d542      	bpl.n	8000ba8 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000b22:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000b24:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b28:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000b2a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b2e:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000b30:	9b05      	ldr	r3, [sp, #20]
 8000b32:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b36:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000b38:	9b04      	ldr	r3, [sp, #16]
 8000b3a:	079f      	lsls	r7, r3, #30
 8000b3c:	d50d      	bpl.n	8000b5a <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000b3e:	9b04      	ldr	r3, [sp, #16]
 8000b40:	07d8      	lsls	r0, r3, #31
 8000b42:	d506      	bpl.n	8000b52 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000b44:	69ab      	ldr	r3, [r5, #24]
 8000b46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b4a:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f004 ffbd 	bl	8005acc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000b52:	9b05      	ldr	r3, [sp, #20]
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000b5a:	9b04      	ldr	r3, [sp, #16]
 8000b5c:	0719      	lsls	r1, r3, #28
 8000b5e:	d519      	bpl.n	8000b94 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000b60:	9b05      	ldr	r3, [sp, #20]
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000b68:	9b04      	ldr	r3, [sp, #16]
 8000b6a:	075a      	lsls	r2, r3, #29
 8000b6c:	d550      	bpl.n	8000c10 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000b6e:	69a1      	ldr	r1, [r4, #24]
 8000b70:	2902      	cmp	r1, #2
 8000b72:	d145      	bne.n	8000c00 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b74:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b76:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b78:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b80:	bf18      	it	ne
 8000b82:	2101      	movne	r1, #1
 8000b84:	f001 fd7e 	bl	8002684 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f004 ffab 	bl	8005ae4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f004 ff9c 	bl	8005acc <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000b94:	9b04      	ldr	r3, [sp, #16]
 8000b96:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000b98:	bf42      	ittt	mi
 8000b9a:	9b05      	ldrmi	r3, [sp, #20]
 8000b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8000ba0:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000ba2:	9b05      	ldr	r3, [sp, #20]
 8000ba4:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	f001 fd63 	bl	8002674 <USB_ReadInterrupts>
 8000bae:	0707      	lsls	r7, r0, #28
 8000bb0:	d505      	bpl.n	8000bbe <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f004 ff86 	bl	8005ac4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	2208      	movs	r2, #8
 8000bbc:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000bbe:	6820      	ldr	r0, [r4, #0]
 8000bc0:	f001 fd58 	bl	8002674 <USB_ReadInterrupts>
 8000bc4:	0185      	lsls	r5, r0, #6
 8000bc6:	d512      	bpl.n	8000bee <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	f001 feba 	bl	8002942 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bce:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000bd2:	9001      	str	r0, [sp, #4]
 8000bd4:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000bd8:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000bda:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000bde:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000be0:	68a3      	ldr	r3, [r4, #8]
 8000be2:	459a      	cmp	sl, r3
 8000be4:	d323      	bcc.n	8000c2e <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bec:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000bee:	6820      	ldr	r0, [r4, #0]
 8000bf0:	f001 fd40 	bl	8002674 <USB_ReadInterrupts>
 8000bf4:	06c3      	lsls	r3, r0, #27
 8000bf6:	f100 8220 	bmi.w	800103a <HAL_HCD_IRQHandler+0x5be>
}
 8000bfa:	b007      	add	sp, #28
 8000bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000c00:	68e3      	ldr	r3, [r4, #12]
 8000c02:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8000c04:	bf04      	itt	eq
 8000c06:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000c0a:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000c0e:	e7bb      	b.n	8000b88 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f004 ff6b 	bl	8005aec <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000c16:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000c1a:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000c1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c20:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000c24:	6993      	ldr	r3, [r2, #24]
 8000c26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	e7b2      	b.n	8000b94 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c2e:	9a01      	ldr	r2, [sp, #4]
 8000c30:	f00a 030f 	and.w	r3, sl, #15
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	07d8      	lsls	r0, r3, #31
 8000c3a:	f140 808a 	bpl.w	8000d52 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c42:	6820      	ldr	r0, [r4, #0]
 8000c44:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000c48:	fa5f f58a 	uxtb.w	r5, sl
 8000c4c:	f000 8104 	beq.w	8000e58 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000c50:	016a      	lsls	r2, r5, #5
 8000c52:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8000c56:	18d6      	adds	r6, r2, r3
 8000c58:	68b1      	ldr	r1, [r6, #8]
 8000c5a:	0749      	lsls	r1, r1, #29
 8000c5c:	d513      	bpl.n	8000c86 <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000c5e:	2104      	movs	r1, #4
 8000c60:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c62:	68f1      	ldr	r1, [r6, #12]
 8000c64:	f041 0102 	orr.w	r1, r1, #2
 8000c68:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000c6a:	68b1      	ldr	r1, [r6, #8]
 8000c6c:	0589      	lsls	r1, r1, #22
 8000c6e:	d542      	bpl.n	8000cf6 <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c70:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c72:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c7a:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c7c:	f001 fe66 	bl	800294c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c84:	e0c7      	b.n	8000e16 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000c86:	68b1      	ldr	r1, [r6, #8]
 8000c88:	0689      	lsls	r1, r1, #26
 8000c8a:	d502      	bpl.n	8000c92 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	60b1      	str	r1, [r6, #8]
 8000c90:	e7eb      	b.n	8000c6a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000c92:	68b1      	ldr	r1, [r6, #8]
 8000c94:	0709      	lsls	r1, r1, #28
 8000c96:	d515      	bpl.n	8000cc4 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c98:	68f1      	ldr	r1, [r6, #12]
 8000c9a:	9303      	str	r3, [sp, #12]
 8000c9c:	f041 0102 	orr.w	r1, r1, #2
 8000ca0:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000ca2:	fb07 4105 	mla	r1, r7, r5, r4
 8000ca6:	f04f 0e05 	mov.w	lr, #5
 8000caa:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000cae:	2110      	movs	r1, #16
 8000cb0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	9202      	str	r2, [sp, #8]
 8000cba:	f001 fe47 	bl	800294c <USB_HC_Halt>
 8000cbe:	9a02      	ldr	r2, [sp, #8]
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	e7d2      	b.n	8000c6a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000cc4:	68b1      	ldr	r1, [r6, #8]
 8000cc6:	0549      	lsls	r1, r1, #21
 8000cc8:	d5cf      	bpl.n	8000c6a <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000cca:	68f1      	ldr	r1, [r6, #12]
 8000ccc:	9303      	str	r3, [sp, #12]
 8000cce:	f041 0102 	orr.w	r1, r1, #2
 8000cd2:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	9202      	str	r2, [sp, #8]
 8000cd8:	f001 fe38 	bl	800294c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000cdc:	2110      	movs	r1, #16
 8000cde:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000ce0:	fb07 4105 	mla	r1, r7, r5, r4
 8000ce4:	2008      	movs	r0, #8
 8000ce6:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cee:	60b1      	str	r1, [r6, #8]
 8000cf0:	9b03      	ldr	r3, [sp, #12]
 8000cf2:	9a02      	ldr	r2, [sp, #8]
 8000cf4:	e7b9      	b.n	8000c6a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000cf6:	68b1      	ldr	r1, [r6, #8]
 8000cf8:	07c8      	lsls	r0, r1, #31
 8000cfa:	d53d      	bpl.n	8000d78 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8000cfc:	6921      	ldr	r1, [r4, #16]
 8000cfe:	b149      	cbz	r1, 8000d14 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000d00:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d04:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000d06:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d0a:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000d0e:	1a09      	subs	r1, r1, r0
 8000d10:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8000d14:	fb07 4e05 	mla	lr, r7, r5, r4
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000d1e:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000d22:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000d24:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8000d28:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000d2c:	d116      	bne.n	8000d5c <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d2e:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d30:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f001 fe07 	bl	800294c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000d3e:	2310      	movs	r3, #16
 8000d40:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8000d42:	fb07 4505 	mla	r5, r7, r5, r4
 8000d46:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d52:	f10a 0a01 	add.w	sl, sl, #1
 8000d56:	f108 0820 	add.w	r8, r8, #32
 8000d5a:	e741      	b.n	8000be0 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000d5c:	2903      	cmp	r1, #3
 8000d5e:	d1f0      	bne.n	8000d42 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000d60:	58d1      	ldr	r1, [r2, r3]
 8000d62:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000d66:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000d68:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4629      	mov	r1, r5
 8000d70:	4620      	mov	r0, r4
 8000d72:	f004 feb3 	bl	8005adc <HAL_HCD_HC_NotifyURBChange_Callback>
 8000d76:	e7e4      	b.n	8000d42 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000d78:	68b1      	ldr	r1, [r6, #8]
 8000d7a:	0789      	lsls	r1, r1, #30
 8000d7c:	d536      	bpl.n	8000dec <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d7e:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d80:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d84:	f021 0102 	bic.w	r1, r1, #2
 8000d88:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d8a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000d8e:	2901      	cmp	r1, #1
 8000d90:	d10c      	bne.n	8000dac <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000d92:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d96:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000d9a:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d9e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000da2:	4629      	mov	r1, r5
 8000da4:	4620      	mov	r0, r4
 8000da6:	f004 fe99 	bl	8005adc <HAL_HCD_HC_NotifyURBChange_Callback>
 8000daa:	e7d2      	b.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000dac:	2905      	cmp	r1, #5
 8000dae:	d0f0      	beq.n	8000d92 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000db0:	2906      	cmp	r1, #6
 8000db2:	d001      	beq.n	8000db8 <HAL_HCD_IRQHandler+0x33c>
 8000db4:	2908      	cmp	r1, #8
 8000db6:	d114      	bne.n	8000de2 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8000db8:	fb07 4105 	mla	r1, r7, r5, r4
 8000dbc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000dbe:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8000dc0:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8000dc2:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000dc4:	bf83      	ittte	hi
 8000dc6:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000dc8:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000dcc:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000dd0:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000dd4:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000dd6:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000dda:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000dde:	50d1      	str	r1, [r2, r3]
 8000de0:	e7d9      	b.n	8000d96 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000de2:	2903      	cmp	r1, #3
 8000de4:	d1d7      	bne.n	8000d96 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000de6:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8000dea:	e7f3      	b.n	8000dd4 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000dec:	68b1      	ldr	r1, [r6, #8]
 8000dee:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8000df2:	d012      	beq.n	8000e1a <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000df4:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000df6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8000dfe:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e02:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8000e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e06:	3201      	adds	r2, #1
 8000e08:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e10:	f001 fd9c 	bl	800294c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	60b3      	str	r3, [r6, #8]
 8000e18:	e79b      	b.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000e1a:	68b3      	ldr	r3, [r6, #8]
 8000e1c:	06da      	lsls	r2, r3, #27
 8000e1e:	d598      	bpl.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000e20:	fb07 4205 	mla	r2, r7, r5, r4
 8000e24:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d10a      	bne.n	8000e42 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e2c:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e2e:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e30:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e38:	4629      	mov	r1, r5
 8000e3a:	f001 fd87 	bl	800294c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000e3e:	2310      	movs	r3, #16
 8000e40:	e7e9      	b.n	8000e16 <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e42:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8000e46:	d1fa      	bne.n	8000e3e <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e48:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8000e4a:	6923      	ldr	r3, [r4, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f6      	bne.n	8000e3e <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8000e56:	e7ea      	b.n	8000e2e <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e58:	0169      	lsls	r1, r5, #5
 8000e5a:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8000e5e:	188e      	adds	r6, r1, r2
 8000e60:	68b3      	ldr	r3, [r6, #8]
 8000e62:	f013 0e04 	ands.w	lr, r3, #4
 8000e66:	d006      	beq.n	8000e76 <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e68:	2304      	movs	r3, #4
 8000e6a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e6c:	68f3      	ldr	r3, [r6, #12]
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	60f3      	str	r3, [r6, #12]
 8000e74:	e76d      	b.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e76:	68b3      	ldr	r3, [r6, #8]
 8000e78:	f013 0320 	ands.w	r3, r3, #32
 8000e7c:	d014      	beq.n	8000ea8 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e7e:	2320      	movs	r3, #32
 8000e80:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000e82:	fb07 4305 	mla	r3, r7, r5, r4
 8000e86:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000e8a:	2a01      	cmp	r2, #1
 8000e8c:	f47f af61 	bne.w	8000d52 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8000e90:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000e94:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e98:	68f3      	ldr	r3, [r6, #12]
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	f001 fd53 	bl	800294c <USB_HC_Halt>
 8000ea6:	e754      	b.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8000ea8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8000eac:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000eb0:	d011      	beq.n	8000ed6 <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8000eb2:	fb07 4205 	mla	r2, r7, r5, r4
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ec2:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ec4:	68f3      	ldr	r3, [r6, #12]
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ecc:	4629      	mov	r1, r5
 8000ece:	f001 fd3d 	bl	800294c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	e79f      	b.n	8000e16 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000ed6:	68b3      	ldr	r3, [r6, #8]
 8000ed8:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8000edc:	d005      	beq.n	8000eea <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ede:	68f3      	ldr	r3, [r6, #12]
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e6c8      	b.n	8000c7c <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000eea:	68b3      	ldr	r3, [r6, #8]
 8000eec:	07db      	lsls	r3, r3, #31
 8000eee:	d511      	bpl.n	8000f14 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ef0:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ef2:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ef6:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000efa:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000efe:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f00:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f02:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f04:	f001 fd22 	bl	800294c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f08:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8000f12:	e71e      	b.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000f14:	68b3      	ldr	r3, [r6, #8]
 8000f16:	071b      	lsls	r3, r3, #28
 8000f18:	d50e      	bpl.n	8000f38 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f1e:	68f3      	ldr	r3, [r6, #12]
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f26:	4629      	mov	r1, r5
 8000f28:	f001 fd10 	bl	800294c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8000f2c:	fb07 4505 	mla	r5, r7, r5, r4
 8000f30:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f32:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f36:	e70c      	b.n	8000d52 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000f38:	68b3      	ldr	r3, [r6, #8]
 8000f3a:	06db      	lsls	r3, r3, #27
 8000f3c:	d515      	bpl.n	8000f6a <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f3e:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8000f42:	2203      	movs	r2, #3
 8000f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000f48:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f4c:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000f50:	b92a      	cbnz	r2, 8000f5e <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8000f52:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000f56:	b912      	cbnz	r2, 8000f5e <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f5e:	68f3      	ldr	r3, [r6, #12]
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f66:	4629      	mov	r1, r5
 8000f68:	e767      	b.n	8000e3a <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000f6a:	68b3      	ldr	r3, [r6, #8]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	d50c      	bpl.n	8000f8a <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f70:	68f3      	ldr	r3, [r6, #12]
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f78:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f7a:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f7e:	f001 fce5 	bl	800294c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f82:	2306      	movs	r3, #6
 8000f84:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f88:	e744      	b.n	8000e14 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f8a:	68b3      	ldr	r3, [r6, #8]
 8000f8c:	055b      	lsls	r3, r3, #21
 8000f8e:	d50f      	bpl.n	8000fb0 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f90:	68f3      	ldr	r3, [r6, #12]
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f001 fcd7 	bl	800294c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa6:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000fa8:	fb07 4505 	mla	r5, r7, r5, r4
 8000fac:	2308      	movs	r3, #8
 8000fae:	e7c0      	b.n	8000f32 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000fb0:	68b3      	ldr	r3, [r6, #8]
 8000fb2:	0798      	lsls	r0, r3, #30
 8000fb4:	f57f aecd 	bpl.w	8000d52 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000fb8:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000fba:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000fbe:	f023 0302 	bic.w	r3, r3, #2
 8000fc2:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000fc4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10e      	bne.n	8000fea <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8000fcc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8000fd0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	f63f aedd 	bhi.w	8000d96 <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8000fdc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8000fe8:	e6d5      	b.n	8000d96 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d102      	bne.n	8000ff4 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000fee:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8000ff2:	e6d0      	b.n	8000d96 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d0fa      	beq.n	8000fee <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d102      	bne.n	8001002 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000ffc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001000:	e6c9      	b.n	8000d96 <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001002:	2b06      	cmp	r3, #6
 8001004:	d002      	beq.n	800100c <HAL_HCD_IRQHandler+0x590>
 8001006:	2b08      	cmp	r3, #8
 8001008:	f47f aec5 	bne.w	8000d96 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 800100c:	fb07 4005 	mla	r0, r7, r5, r4
 8001010:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001012:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001014:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001016:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001018:	bf84      	itt	hi
 800101a:	2304      	movhi	r3, #4
 800101c:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001020:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001022:	bf88      	it	hi
 8001024:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001030:	bf98      	it	ls
 8001032:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001036:	508b      	str	r3, [r1, r2]
 8001038:	e6ad      	b.n	8000d96 <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800103a:	6826      	ldr	r6, [r4, #0]
 800103c:	69b3      	ldr	r3, [r6, #24]
 800103e:	f023 0310 	bic.w	r3, r3, #16
 8001042:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001044:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001046:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 800104a:	2a02      	cmp	r2, #2
 800104c:	d129      	bne.n	80010a2 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800104e:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001052:	f1b8 0f00 	cmp.w	r8, #0
 8001056:	d024      	beq.n	80010a2 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001058:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800105c:	2728      	movs	r7, #40	; 0x28
 800105e:	fb07 4705 	mla	r7, r7, r5, r4
 8001062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001064:	b1e9      	cbz	r1, 80010a2 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001066:	4642      	mov	r2, r8
 8001068:	4630      	mov	r0, r6
 800106a:	f001 faf5 	bl	8002658 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800106e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001070:	4443      	add	r3, r8
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001076:	4443      	add	r3, r8
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800107a:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800107e:	016b      	lsls	r3, r5, #5
 8001080:	199a      	adds	r2, r3, r6
 8001082:	6911      	ldr	r1, [r2, #16]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_HCD_IRQHandler+0x634>)
 8001086:	400a      	ands	r2, r1
 8001088:	b15a      	cbz	r2, 80010a2 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800108a:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800108c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001090:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001094:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001096:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010a2:	6822      	ldr	r2, [r4, #0]
 80010a4:	6993      	ldr	r3, [r2, #24]
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	e5a5      	b.n	8000bfa <HAL_HCD_IRQHandler+0x17e>
 80010ae:	bf00      	nop
 80010b0:	1ff80000 	.word	0x1ff80000

080010b4 <HAL_HCD_Start>:
{
 80010b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80010b6:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80010ba:	2b01      	cmp	r3, #1
{
 80010bc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80010be:	d00d      	beq.n	80010dc <HAL_HCD_Start+0x28>
 80010c0:	2501      	movs	r5, #1
 80010c2:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80010c6:	6800      	ldr	r0, [r0, #0]
 80010c8:	f001 fa6c 	bl	80025a4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80010cc:	4629      	mov	r1, r5
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f001 fb12 	bl	80026f8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80010da:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80010dc:	2002      	movs	r0, #2
}
 80010de:	bd38      	pop	{r3, r4, r5, pc}

080010e0 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80010e0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80010e4:	2b01      	cmp	r3, #1
{
 80010e6:	b510      	push	{r4, lr}
 80010e8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80010ea:	d009      	beq.n	8001100 <HAL_HCD_Stop+0x20>
 80010ec:	2301      	movs	r3, #1
 80010ee:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80010f2:	6800      	ldr	r0, [r0, #0]
 80010f4:	f001 fd40 	bl	8002b78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80010fe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001100:	2002      	movs	r0, #2
}
 8001102:	bd10      	pop	{r4, pc}

08001104 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001104:	6800      	ldr	r0, [r0, #0]
 8001106:	f001 bad9 	b.w	80026bc <USB_ResetPort>

0800110a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800110a:	2328      	movs	r3, #40	; 0x28
 800110c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001110:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001114:	4770      	bx	lr

08001116 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001116:	2328      	movs	r3, #40	; 0x28
 8001118:	fb03 0101 	mla	r1, r3, r1, r0
}
 800111c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800111e:	4770      	bx	lr

08001120 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001120:	6800      	ldr	r0, [r0, #0]
 8001122:	f001 bb84 	b.w	800282e <USB_GetCurrentFrame>

08001126 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	f001 bb76 	b.w	8002818 <USB_GetHostSpeed>

0800112c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800112c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800112e:	4604      	mov	r4, r0
 8001130:	b908      	cbnz	r0, 8001136 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001136:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800113a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800113e:	b91b      	cbnz	r3, 8001148 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001140:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001144:	f004 fabc 	bl	80056c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001148:	2324      	movs	r3, #36	; 0x24
 800114a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800115e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001168:	f000 fd34 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800116c:	6865      	ldr	r5, [r4, #4]
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_I2C_Init+0x148>)
 8001170:	429d      	cmp	r5, r3
 8001172:	d84d      	bhi.n	8001210 <HAL_I2C_Init+0xe4>
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <HAL_I2C_Init+0x14c>)
 8001176:	4298      	cmp	r0, r3
 8001178:	d9db      	bls.n	8001132 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800117a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800117c:	493f      	ldr	r1, [pc, #252]	; (800127c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800117e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001180:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	430b      	orrs	r3, r1
 800118a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800118c:	6a13      	ldr	r3, [r2, #32]
 800118e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001192:	3101      	adds	r1, #1
 8001194:	4319      	orrs	r1, r3
 8001196:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001198:	69d1      	ldr	r1, [r2, #28]
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_I2C_Init+0x148>)
 800119c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80011a0:	429d      	cmp	r5, r3
 80011a2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80011a6:	f100 30ff 	add.w	r0, r0, #4294967295
 80011aa:	d848      	bhi.n	800123e <HAL_I2C_Init+0x112>
 80011ac:	006d      	lsls	r5, r5, #1
 80011ae:	fbb0 f0f5 	udiv	r0, r0, r5
 80011b2:	3001      	adds	r0, #1
 80011b4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	bf38      	it	cc
 80011bc:	2304      	movcc	r3, #4
 80011be:	430b      	orrs	r3, r1
 80011c0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011c2:	6811      	ldr	r1, [r2, #0]
 80011c4:	6a20      	ldr	r0, [r4, #32]
 80011c6:	69e3      	ldr	r3, [r4, #28]
 80011c8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80011cc:	4303      	orrs	r3, r0
 80011ce:	430b      	orrs	r3, r1
 80011d0:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011d2:	6891      	ldr	r1, [r2, #8]
 80011d4:	68e0      	ldr	r0, [r4, #12]
 80011d6:	6923      	ldr	r3, [r4, #16]
 80011d8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80011dc:	4303      	orrs	r3, r0
 80011de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80011e2:	430b      	orrs	r3, r1
 80011e4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011e6:	68d1      	ldr	r1, [r2, #12]
 80011e8:	69a0      	ldr	r0, [r4, #24]
 80011ea:	6963      	ldr	r3, [r4, #20]
 80011ec:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80011f0:	4303      	orrs	r3, r0
 80011f2:	430b      	orrs	r3, r1
 80011f4:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011fe:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001200:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001202:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001204:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001208:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800120a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800120e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_I2C_Init+0x154>)
 8001212:	4298      	cmp	r0, r3
 8001214:	d98d      	bls.n	8001132 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001216:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001218:	4e18      	ldr	r6, [pc, #96]	; (800127c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800121a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800121c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001224:	4333      	orrs	r3, r6
 8001226:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001228:	6a13      	ldr	r3, [r2, #32]
 800122a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800122e:	4371      	muls	r1, r6
 8001230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001234:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001238:	fbb1 f1f6 	udiv	r1, r1, r6
 800123c:	e7a9      	b.n	8001192 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800123e:	68a3      	ldr	r3, [r4, #8]
 8001240:	b953      	cbnz	r3, 8001258 <HAL_I2C_Init+0x12c>
 8001242:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001246:	fbb0 f0f3 	udiv	r0, r0, r3
 800124a:	1c43      	adds	r3, r0, #1
 800124c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001250:	b16b      	cbz	r3, 800126e <HAL_I2C_Init+0x142>
 8001252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001256:	e7b2      	b.n	80011be <HAL_I2C_Init+0x92>
 8001258:	2319      	movs	r3, #25
 800125a:	436b      	muls	r3, r5
 800125c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001266:	b113      	cbz	r3, 800126e <HAL_I2C_Init+0x142>
 8001268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800126c:	e7a7      	b.n	80011be <HAL_I2C_Init+0x92>
 800126e:	2301      	movs	r3, #1
 8001270:	e7a5      	b.n	80011be <HAL_I2C_Init+0x92>
 8001272:	bf00      	nop
 8001274:	000186a0 	.word	0x000186a0
 8001278:	001e847f 	.word	0x001e847f
 800127c:	000f4240 	.word	0x000f4240
 8001280:	003d08ff 	.word	0x003d08ff

08001284 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001286:	4604      	mov	r4, r0
 8001288:	2800      	cmp	r0, #0
 800128a:	d041      	beq.n	8001310 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800128c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001290:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001294:	b92b      	cbnz	r3, 80012a2 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001298:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800129c:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800129e:	f004 fa47 	bl	8005730 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80012a2:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012a4:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80012a6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012aa:	69d3      	ldr	r3, [r2, #28]
 80012ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80012b6:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80012b8:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d031      	beq.n	8001322 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80012be:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80012c0:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80012c2:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80012c4:	bf0c      	ite	eq
 80012c6:	2510      	moveq	r5, #16
 80012c8:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80012ca:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80012cc:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80012ce:	bf98      	it	ls
 80012d0:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80012d2:	f000 fd55 	bl	8001d80 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	6961      	ldr	r1, [r4, #20]
 80012da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012de:	d11b      	bne.n	8001318 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80012e0:	68e3      	ldr	r3, [r4, #12]
 80012e2:	220a      	movs	r2, #10
 80012e4:	b1b3      	cbz	r3, 8001314 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012e6:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ec:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80012ee:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80012f6:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80012fa:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80012fe:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001300:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001302:	1e99      	subs	r1, r3, #2
 8001304:	29fd      	cmp	r1, #253	; 0xfd
 8001306:	d90e      	bls.n	8001326 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001308:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001310:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001314:	00eb      	lsls	r3, r5, #3
 8001316:	e7e7      	b.n	80012e8 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001318:	230a      	movs	r3, #10
 800131a:	fbb0 f0f5 	udiv	r0, r0, r5
 800131e:	4343      	muls	r3, r0
 8001320:	e7e5      	b.n	80012ee <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8001322:	2200      	movs	r2, #0
 8001324:	e7ed      	b.n	8001302 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001326:	4313      	orrs	r3, r2
 8001328:	6922      	ldr	r2, [r4, #16]
 800132a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800132c:	6866      	ldr	r6, [r4, #4]
 800132e:	68e5      	ldr	r5, [r4, #12]
 8001330:	69a0      	ldr	r0, [r4, #24]
 8001332:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80013b0 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001336:	4313      	orrs	r3, r2
 8001338:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800133a:	68a3      	ldr	r3, [r4, #8]
 800133c:	69cf      	ldr	r7, [r1, #28]
 800133e:	ea46 0203 	orr.w	r2, r6, r3
 8001342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001346:	432a      	orrs	r2, r5
 8001348:	4302      	orrs	r2, r0
 800134a:	ea07 070e 	and.w	r7, r7, lr
 800134e:	433a      	orrs	r2, r7
 8001350:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001352:	6a22      	ldr	r2, [r4, #32]
 8001354:	2a01      	cmp	r2, #1
 8001356:	d11d      	bne.n	8001394 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <HAL_I2S_Init+0x120>)
 800135a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800135c:	4f12      	ldr	r7, [pc, #72]	; (80013a8 <HAL_I2S_Init+0x124>)
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_I2S_Init+0x128>)
 8001360:	42b9      	cmp	r1, r7
 8001362:	bf18      	it	ne
 8001364:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001368:	432b      	orrs	r3, r5
 800136a:	69d1      	ldr	r1, [r2, #28]
 800136c:	ea01 010e 	and.w	r1, r1, lr
 8001370:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001372:	2102      	movs	r1, #2
 8001374:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001376:	69d7      	ldr	r7, [r2, #28]
 8001378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137c:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 800137e:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8001382:	ea43 0307 	orr.w	r3, r3, r7
 8001386:	bf0c      	ite	eq
 8001388:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800138c:	2100      	movne	r1, #0
 800138e:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001390:	430b      	orrs	r3, r1
 8001392:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001394:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001396:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001398:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800139a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 800139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a0:	080013bb 	.word	0x080013bb
 80013a4:	080014b9 	.word	0x080014b9
 80013a8:	40003800 	.word	0x40003800
 80013ac:	40003400 	.word	0x40003400
 80013b0:	fffff040 	.word	0xfffff040

080013b4 <HAL_I2S_TxCpltCallback>:
 80013b4:	4770      	bx	lr

080013b6 <HAL_I2S_RxCpltCallback>:
 80013b6:	4770      	bx	lr

080013b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80013b8:	4770      	bx	lr

080013ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80013ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80013bc:	6803      	ldr	r3, [r0, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80013c2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80013c6:	2a04      	cmp	r2, #4
{
 80013c8:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80013ca:	d136      	bne.n	800143a <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80013cc:	9a01      	ldr	r2, [sp, #4]
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	d517      	bpl.n	8001402 <I2S_IRQHandler+0x48>
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	0652      	lsls	r2, r2, #25
 80013d6:	d514      	bpl.n	8001402 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80013d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80013da:	68d9      	ldr	r1, [r3, #12]
 80013dc:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80013e0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80013e2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80013e4:	3a01      	subs	r2, #1
 80013e6:	b292      	uxth	r2, r2
 80013e8:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80013ea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80013ec:	b292      	uxth	r2, r2
 80013ee:	b942      	cbnz	r2, 8001402 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013f6:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80013fe:	f7ff ffda 	bl	80013b6 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001402:	9b01      	ldr	r3, [sp, #4]
 8001404:	0659      	lsls	r1, r3, #25
 8001406:	d518      	bpl.n	800143a <I2S_IRQHandler+0x80>
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	0692      	lsls	r2, r2, #26
 800140e:	d514      	bpl.n	800143a <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001416:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001418:	2200      	movs	r2, #0
 800141a:	9202      	str	r2, [sp, #8]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	9202      	str	r2, [sp, #8]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001426:	2301      	movs	r3, #1
 8001428:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800142c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff ffbf 	bl	80013b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800143a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800143e:	2b03      	cmp	r3, #3
 8001440:	d136      	bne.n	80014b0 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001442:	9b01      	ldr	r3, [sp, #4]
 8001444:	079b      	lsls	r3, r3, #30
 8001446:	d519      	bpl.n	800147c <I2S_IRQHandler+0xc2>
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	6853      	ldr	r3, [r2, #4]
 800144c:	0618      	lsls	r0, r3, #24
 800144e:	d515      	bpl.n	800147c <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001452:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001456:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8001458:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800145a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800145c:	3b01      	subs	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001462:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	b94b      	cbnz	r3, 800147c <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001468:	6853      	ldr	r3, [r2, #4]
 800146a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800146e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001470:	2301      	movs	r3, #1
 8001472:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff ff9c 	bl	80013b4 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800147c:	9b01      	ldr	r3, [sp, #4]
 800147e:	0719      	lsls	r1, r3, #28
 8001480:	d516      	bpl.n	80014b0 <I2S_IRQHandler+0xf6>
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	0692      	lsls	r2, r2, #26
 8001488:	d512      	bpl.n	80014b0 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001490:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001492:	2200      	movs	r2, #0
 8001494:	9203      	str	r2, [sp, #12]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800149c:	2301      	movs	r3, #1
 800149e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80014a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff ff84 	bl	80013b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80014b0:	b004      	add	sp, #16
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80014b8:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80014ba:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80014bc:	498b      	ldr	r1, [pc, #556]	; (80016ec <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80014be:	6893      	ldr	r3, [r2, #8]
{
 80014c0:	b086      	sub	sp, #24
 80014c2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80014c4:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80014c6:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80014c8:	428a      	cmp	r2, r1
 80014ca:	bf18      	it	ne
 80014cc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80014d4:	6851      	ldr	r1, [r2, #4]
 80014d6:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80014d8:	6859      	ldr	r1, [r3, #4]
 80014da:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80014dc:	6841      	ldr	r1, [r0, #4]
 80014de:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80014e2:	f040 8090 	bne.w	8001606 <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80014e6:	9b00      	ldr	r3, [sp, #0]
 80014e8:	0799      	lsls	r1, r3, #30
 80014ea:	d51a      	bpl.n	8001522 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80014ec:	9b02      	ldr	r3, [sp, #8]
 80014ee:	061b      	lsls	r3, r3, #24
 80014f0:	d517      	bpl.n	8001522 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80014f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014f4:	1c99      	adds	r1, r3, #2
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	6241      	str	r1, [r0, #36]	; 0x24
 80014fa:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80014fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001504:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001506:	b29b      	uxth	r3, r3
 8001508:	b95b      	cbnz	r3, 8001522 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800150a:	6853      	ldr	r3, [r2, #4]
 800150c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001510:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001512:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001514:	b29b      	uxth	r3, r3
 8001516:	b923      	cbnz	r3, 8001522 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001518:	2301      	movs	r3, #1
 800151a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800151e:	f7ff ffc9 	bl	80014b4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001522:	9b01      	ldr	r3, [sp, #4]
 8001524:	07d8      	lsls	r0, r3, #31
 8001526:	d522      	bpl.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8001528:	9b03      	ldr	r3, [sp, #12]
 800152a:	0659      	lsls	r1, r3, #25
 800152c:	d51f      	bpl.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800152e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001530:	6820      	ldr	r0, [r4, #0]
 8001532:	496e      	ldr	r1, [pc, #440]	; (80016ec <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001534:	1c93      	adds	r3, r2, #2
 8001536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001538:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800153a:	4288      	cmp	r0, r1
 800153c:	bf18      	it	ne
 800153e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001546:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001548:	3a01      	subs	r2, #1
 800154a:	b292      	uxth	r2, r2
 800154c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800154e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001550:	b292      	uxth	r2, r2
 8001552:	b962      	cbnz	r2, 800156e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800155a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800155c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	b92b      	cbnz	r3, 800156e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001562:	2301      	movs	r3, #1
 8001564:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ffa3 	bl	80014b4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800156e:	9b01      	ldr	r3, [sp, #4]
 8001570:	065a      	lsls	r2, r3, #25
 8001572:	d522      	bpl.n	80015ba <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001574:	9b03      	ldr	r3, [sp, #12]
 8001576:	069b      	lsls	r3, r3, #26
 8001578:	d51f      	bpl.n	80015ba <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	495b      	ldr	r1, [pc, #364]	; (80016ec <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 800157e:	4a5c      	ldr	r2, [pc, #368]	; (80016f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001580:	428b      	cmp	r3, r1
 8001582:	bf18      	it	ne
 8001584:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001588:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800158a:	6851      	ldr	r1, [r2, #4]
 800158c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001590:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001598:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800159a:	2200      	movs	r2, #0
 800159c:	9204      	str	r2, [sp, #16]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	9204      	str	r2, [sp, #16]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	9304      	str	r3, [sp, #16]
 80015a6:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80015ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80015b6:	f7ff feff 	bl	80013b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	0718      	lsls	r0, r3, #28
 80015be:	d520      	bpl.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 80015c0:	9b02      	ldr	r3, [sp, #8]
 80015c2:	0699      	lsls	r1, r3, #26
 80015c4:	d51d      	bpl.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015c6:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015c8:	4948      	ldr	r1, [pc, #288]	; (80016ec <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015d0:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015d2:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80015d4:	428b      	cmp	r3, r1
 80015d6:	bf18      	it	ne
 80015d8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80015dc:	6851      	ldr	r1, [r2, #4]
 80015de:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80015e2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80015e4:	2200      	movs	r2, #0
 80015e6:	9205      	str	r2, [sp, #20]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	9305      	str	r3, [sp, #20]
 80015ec:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80015f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff fedb 	bl	80013b8 <HAL_I2S_ErrorCallback>
}
 8001602:	b006      	add	sp, #24
 8001604:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001606:	9a01      	ldr	r2, [sp, #4]
 8001608:	0792      	lsls	r2, r2, #30
 800160a:	d51a      	bpl.n	8001642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 800160c:	9a03      	ldr	r2, [sp, #12]
 800160e:	0611      	lsls	r1, r2, #24
 8001610:	d517      	bpl.n	8001642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001612:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001614:	1c91      	adds	r1, r2, #2
 8001616:	8812      	ldrh	r2, [r2, #0]
 8001618:	6241      	str	r1, [r0, #36]	; 0x24
 800161a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800161c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800161e:	3a01      	subs	r2, #1
 8001620:	b292      	uxth	r2, r2
 8001622:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001624:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001626:	b292      	uxth	r2, r2
 8001628:	b95a      	cbnz	r2, 8001642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001630:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001632:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001634:	b29b      	uxth	r3, r3
 8001636:	b923      	cbnz	r3, 8001642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001638:	2301      	movs	r3, #1
 800163a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800163e:	f7ff ff39 	bl	80014b4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001642:	9b00      	ldr	r3, [sp, #0]
 8001644:	07da      	lsls	r2, r3, #31
 8001646:	d51c      	bpl.n	8001682 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001648:	9b02      	ldr	r3, [sp, #8]
 800164a:	065b      	lsls	r3, r3, #25
 800164c:	d519      	bpl.n	8001682 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800164e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001650:	1c9a      	adds	r2, r3, #2
 8001652:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	68d1      	ldr	r1, [r2, #12]
 8001658:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800165a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800165c:	3b01      	subs	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001662:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001664:	b29b      	uxth	r3, r3
 8001666:	b963      	cbnz	r3, 8001682 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001668:	6853      	ldr	r3, [r2, #4]
 800166a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800166e:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001670:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001672:	b29b      	uxth	r3, r3
 8001674:	b92b      	cbnz	r3, 8001682 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001676:	2301      	movs	r3, #1
 8001678:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ff19 	bl	80014b4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001682:	9b00      	ldr	r3, [sp, #0]
 8001684:	0658      	lsls	r0, r3, #25
 8001686:	d51b      	bpl.n	80016c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001688:	9b02      	ldr	r3, [sp, #8]
 800168a:	0699      	lsls	r1, r3, #26
 800168c:	d518      	bpl.n	80016c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800168e:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001690:	4916      	ldr	r1, [pc, #88]	; (80016ec <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001692:	6853      	ldr	r3, [r2, #4]
 8001694:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001698:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800169c:	428a      	cmp	r2, r1
 800169e:	bf18      	it	ne
 80016a0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80016a4:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016ac:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80016b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80016bc:	f7ff fe7c 	bl	80013b8 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	071a      	lsls	r2, r3, #28
 80016c4:	d59d      	bpl.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 80016c6:	9b03      	ldr	r3, [sp, #12]
 80016c8:	069b      	lsls	r3, r3, #26
 80016ca:	d59a      	bpl.n	8001602 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	4907      	ldr	r1, [pc, #28]	; (80016ec <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80016d2:	428a      	cmp	r2, r1
 80016d4:	bf18      	it	ne
 80016d6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80016e0:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016e2:	6853      	ldr	r3, [r2, #4]
 80016e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80016e8:	6053      	str	r3, [r2, #4]
 80016ea:	e780      	b.n	80015ee <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 80016ec:	40003800 	.word	0x40003800
 80016f0:	40003400 	.word	0x40003400

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	4604      	mov	r4, r0
 80016fa:	b908      	cbnz	r0, 8001700 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
 80016fe:	e03f      	b.n	8001780 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001700:	6803      	ldr	r3, [r0, #0]
 8001702:	07dd      	lsls	r5, r3, #31
 8001704:	d410      	bmi.n	8001728 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	0798      	lsls	r0, r3, #30
 800170a:	d45a      	bmi.n	80017c2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	071a      	lsls	r2, r3, #28
 8001710:	f100 809c 	bmi.w	800184c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	075b      	lsls	r3, r3, #29
 8001718:	f100 80ba 	bmi.w	8001890 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171c:	69a0      	ldr	r0, [r4, #24]
 800171e:	2800      	cmp	r0, #0
 8001720:	f040 811b 	bne.w	800195a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2000      	movs	r0, #0
 8001726:	e02b      	b.n	8001780 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001728:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	f002 020c 	and.w	r2, r2, #12
 8001730:	2a04      	cmp	r2, #4
 8001732:	d007      	beq.n	8001744 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	2a08      	cmp	r2, #8
 800173c:	d10a      	bne.n	8001754 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0259      	lsls	r1, r3, #9
 8001742:	d507      	bpl.n	8001754 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b9d      	ldr	r3, [pc, #628]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	039a      	lsls	r2, r3, #14
 800174a:	d5dc      	bpl.n	8001706 <HAL_RCC_OscConfig+0x12>
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1d9      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
 8001752:	e7d3      	b.n	80016fc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	4d99      	ldr	r5, [pc, #612]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d113      	bne.n	8001786 <HAL_RCC_OscConfig+0x92>
 800175e:	682b      	ldr	r3, [r5, #0]
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001766:	f7fe ff39 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4d94      	ldr	r5, [pc, #592]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800176c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	039b      	lsls	r3, r3, #14
 8001772:	d4c8      	bmi.n	8001706 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7fe ff32 	bl	80005dc <HAL_GetTick>
 8001778:	1b80      	subs	r0, r0, r6
 800177a:	2864      	cmp	r0, #100	; 0x64
 800177c:	d9f7      	bls.n	800176e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800177e:	2003      	movs	r0, #3
}
 8001780:	b002      	add	sp, #8
 8001782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178a:	d104      	bne.n	8001796 <HAL_RCC_OscConfig+0xa2>
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001792:	602b      	str	r3, [r5, #0]
 8001794:	e7e3      	b.n	800175e <HAL_RCC_OscConfig+0x6a>
 8001796:	682a      	ldr	r2, [r5, #0]
 8001798:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800179c:	602a      	str	r2, [r5, #0]
 800179e:	682a      	ldr	r2, [r5, #0]
 80017a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80017aa:	f7fe ff17 	bl	80005dc <HAL_GetTick>
 80017ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	039f      	lsls	r7, r3, #14
 80017b4:	d5a7      	bpl.n	8001706 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b6:	f7fe ff11 	bl	80005dc <HAL_GetTick>
 80017ba:	1b80      	subs	r0, r0, r6
 80017bc:	2864      	cmp	r0, #100	; 0x64
 80017be:	d9f7      	bls.n	80017b0 <HAL_RCC_OscConfig+0xbc>
 80017c0:	e7dd      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c2:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	f012 0f0c 	tst.w	r2, #12
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d2:	2a08      	cmp	r2, #8
 80017d4:	d111      	bne.n	80017fa <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	025e      	lsls	r6, r3, #9
 80017da:	d40e      	bmi.n	80017fa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017dc:	4b77      	ldr	r3, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	0795      	lsls	r5, r2, #30
 80017e2:	d502      	bpl.n	80017ea <HAL_RCC_OscConfig+0xf6>
 80017e4:	68e2      	ldr	r2, [r4, #12]
 80017e6:	2a01      	cmp	r2, #1
 80017e8:	d188      	bne.n	80016fc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	6921      	ldr	r1, [r4, #16]
 80017ee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017f2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f8:	e788      	b.n	800170c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017fa:	68e2      	ldr	r2, [r4, #12]
 80017fc:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_RCC_OscConfig+0x2cc>)
 80017fe:	b1b2      	cbz	r2, 800182e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001804:	f7fe feea 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	4d6c      	ldr	r5, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800180a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	0798      	lsls	r0, r3, #30
 8001810:	d507      	bpl.n	8001822 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	682b      	ldr	r3, [r5, #0]
 8001814:	6922      	ldr	r2, [r4, #16]
 8001816:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800181a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	e774      	b.n	800170c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001822:	f7fe fedb 	bl	80005dc <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	2802      	cmp	r0, #2
 800182a:	d9ef      	bls.n	800180c <HAL_RCC_OscConfig+0x118>
 800182c:	e7a7      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800182e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001830:	f7fe fed4 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001834:	4d61      	ldr	r5, [pc, #388]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001836:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	0799      	lsls	r1, r3, #30
 800183c:	f57f af66 	bpl.w	800170c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7fe fecc 	bl	80005dc <HAL_GetTick>
 8001844:	1b80      	subs	r0, r0, r6
 8001846:	2802      	cmp	r0, #2
 8001848:	d9f6      	bls.n	8001838 <HAL_RCC_OscConfig+0x144>
 800184a:	e798      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184c:	6962      	ldr	r2, [r4, #20]
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x2d0>)
 8001850:	b17a      	cbz	r2, 8001872 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001856:	f7fe fec1 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4d58      	ldr	r5, [pc, #352]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800185c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001860:	079f      	lsls	r7, r3, #30
 8001862:	f53f af57 	bmi.w	8001714 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001866:	f7fe feb9 	bl	80005dc <HAL_GetTick>
 800186a:	1b80      	subs	r0, r0, r6
 800186c:	2802      	cmp	r0, #2
 800186e:	d9f6      	bls.n	800185e <HAL_RCC_OscConfig+0x16a>
 8001870:	e785      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001872:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001874:	f7fe feb2 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4d50      	ldr	r5, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800187a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800187e:	0798      	lsls	r0, r3, #30
 8001880:	f57f af48 	bpl.w	8001714 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7fe feaa 	bl	80005dc <HAL_GetTick>
 8001888:	1b80      	subs	r0, r0, r6
 800188a:	2802      	cmp	r0, #2
 800188c:	d9f6      	bls.n	800187c <HAL_RCC_OscConfig+0x188>
 800188e:	e776      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 8001892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001894:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001898:	d128      	bne.n	80018ec <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	9201      	str	r2, [sp, #4]
 800189c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018ae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4d45      	ldr	r5, [pc, #276]	; (80019c8 <HAL_RCC_OscConfig+0x2d4>)
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	05d9      	lsls	r1, r3, #23
 80018b6:	d51b      	bpl.n	80018f0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	68a3      	ldr	r3, [r4, #8]
 80018ba:	4d40      	ldr	r5, [pc, #256]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d127      	bne.n	8001910 <HAL_RCC_OscConfig+0x21c>
 80018c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018c8:	f7fe fe88 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	4d3b      	ldr	r5, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80018ce:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d6:	079b      	lsls	r3, r3, #30
 80018d8:	d539      	bpl.n	800194e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80018da:	2e00      	cmp	r6, #0
 80018dc:	f43f af1e 	beq.w	800171c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4a36      	ldr	r2, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 80018e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	e717      	b.n	800171c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80018ec:	2600      	movs	r6, #0
 80018ee:	e7df      	b.n	80018b0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018f8:	f7fe fe70 	bl	80005dc <HAL_GetTick>
 80018fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	682b      	ldr	r3, [r5, #0]
 8001900:	05da      	lsls	r2, r3, #23
 8001902:	d4d9      	bmi.n	80018b8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001904:	f7fe fe6a 	bl	80005dc <HAL_GetTick>
 8001908:	1bc0      	subs	r0, r0, r7
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f7      	bls.n	80018fe <HAL_RCC_OscConfig+0x20a>
 800190e:	e736      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001910:	2b05      	cmp	r3, #5
 8001912:	d104      	bne.n	800191e <HAL_RCC_OscConfig+0x22a>
 8001914:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	672b      	str	r3, [r5, #112]	; 0x70
 800191c:	e7d0      	b.n	80018c0 <HAL_RCC_OscConfig+0x1cc>
 800191e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	672a      	str	r2, [r5, #112]	; 0x70
 8001926:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001928:	f022 0204 	bic.w	r2, r2, #4
 800192c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ca      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001932:	f7fe fe53 	bl	80005dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800193a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800193e:	0798      	lsls	r0, r3, #30
 8001940:	d5cb      	bpl.n	80018da <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7fe fe4b 	bl	80005dc <HAL_GetTick>
 8001946:	1bc0      	subs	r0, r0, r7
 8001948:	4540      	cmp	r0, r8
 800194a:	d9f7      	bls.n	800193c <HAL_RCC_OscConfig+0x248>
 800194c:	e717      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7fe fe45 	bl	80005dc <HAL_GetTick>
 8001952:	1bc0      	subs	r0, r0, r7
 8001954:	4540      	cmp	r0, r8
 8001956:	d9bd      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1e0>
 8001958:	e711      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800195a:	4d18      	ldr	r5, [pc, #96]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
 800195c:	68ab      	ldr	r3, [r5, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d047      	beq.n	80019f6 <HAL_RCC_OscConfig+0x302>
 8001966:	4e19      	ldr	r6, [pc, #100]	; (80019cc <HAL_RCC_OscConfig+0x2d8>)
 8001968:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800196c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196e:	d135      	bne.n	80019dc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001970:	f7fe fe34 	bl	80005dc <HAL_GetTick>
 8001974:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	0199      	lsls	r1, r3, #6
 800197a:	d429      	bmi.n	80019d0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197c:	6a22      	ldr	r2, [r4, #32]
 800197e:	69e3      	ldr	r3, [r4, #28]
 8001980:	4313      	orrs	r3, r2
 8001982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001984:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800198a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800198e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001992:	0852      	lsrs	r2, r2, #1
 8001994:	3a01      	subs	r2, #1
 8001996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800199a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800199c:	2301      	movs	r3, #1
 800199e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80019a0:	f7fe fe1c 	bl	80005dc <HAL_GetTick>
 80019a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	019a      	lsls	r2, r3, #6
 80019aa:	f53f aebb 	bmi.w	8001724 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ae:	f7fe fe15 	bl	80005dc <HAL_GetTick>
 80019b2:	1b40      	subs	r0, r0, r5
 80019b4:	2802      	cmp	r0, #2
 80019b6:	d9f6      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2b2>
 80019b8:	e6e1      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	42470000 	.word	0x42470000
 80019c4:	42470e80 	.word	0x42470e80
 80019c8:	40007000 	.word	0x40007000
 80019cc:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe fe04 	bl	80005dc <HAL_GetTick>
 80019d4:	1bc0      	subs	r0, r0, r7
 80019d6:	2802      	cmp	r0, #2
 80019d8:	d9cd      	bls.n	8001976 <HAL_RCC_OscConfig+0x282>
 80019da:	e6d0      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80019dc:	f7fe fdfe 	bl	80005dc <HAL_GetTick>
 80019e0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	f57f ae9d 	bpl.w	8001724 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7fe fdf7 	bl	80005dc <HAL_GetTick>
 80019ee:	1b00      	subs	r0, r0, r4
 80019f0:	2802      	cmp	r0, #2
 80019f2:	d9f6      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2ee>
 80019f4:	e6c3      	b.n	800177e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f6:	2801      	cmp	r0, #1
 80019f8:	f43f aec2 	beq.w	8001780 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80019fc:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	69e3      	ldr	r3, [r4, #28]
 8001a00:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f47f ae79 	bne.w	80016fc <HAL_RCC_OscConfig+0x8>
 8001a0a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a0c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f47f ae73 	bne.w	80016fc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a1c:	4003      	ands	r3, r0
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	f47f ae6c 	bne.w	80016fc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a26:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f47f ae66 	bne.w	80016fc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a32:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001a36:	1ac0      	subs	r0, r0, r3
 8001a38:	bf18      	it	ne
 8001a3a:	2001      	movne	r0, #1
 8001a3c:	e6a0      	b.n	8001780 <HAL_RCC_OscConfig+0x8c>
 8001a3e:	bf00      	nop

08001a40 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a40:	4913      	ldr	r1, [pc, #76]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001a42:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a44:	688b      	ldr	r3, [r1, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x16>
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a54:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x58>)
 8001a58:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a5a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a60:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a64:	bf14      	ite	ne
 8001a66:	480c      	ldrne	r0, [pc, #48]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a68:	480a      	ldreq	r0, [pc, #40]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a6e:	bf18      	it	ne
 8001a70:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a76:	fba1 0100 	umull	r0, r1, r1, r0
 8001a7a:	f7fe fc01 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x50>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001a8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a8e:	bd08      	pop	{r3, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCC_ClockConfig>:
{
 8001a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	b910      	cbnz	r0, 8001aac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_ClockConfig+0x124>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f002 020f 	and.w	r2, r2, #15
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d329      	bcc.n	8001b0c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	6821      	ldr	r1, [r4, #0]
 8001aba:	078f      	lsls	r7, r1, #30
 8001abc:	d42e      	bmi.n	8001b1c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	07c8      	lsls	r0, r1, #31
 8001ac0:	d441      	bmi.n	8001b46 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_ClockConfig+0x124>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f002 020f 	and.w	r2, r2, #15
 8001aca:	4295      	cmp	r5, r2
 8001acc:	d367      	bcc.n	8001b9e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	0751      	lsls	r1, r2, #29
 8001ad2:	d46d      	bmi.n	8001bb0 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	0713      	lsls	r3, r2, #28
 8001ad6:	d507      	bpl.n	8001ae8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad8:	4a3a      	ldr	r2, [pc, #232]	; (8001bc4 <HAL_RCC_ClockConfig+0x128>)
 8001ada:	6921      	ldr	r1, [r4, #16]
 8001adc:	6893      	ldr	r3, [r2, #8]
 8001ade:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ae2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ae6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae8:	f7ff ffaa 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8001aec:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_RCC_ClockConfig+0x128>)
 8001aee:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <HAL_RCC_ClockConfig+0x12c>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	40d8      	lsrs	r0, r3
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_RCC_ClockConfig+0x130>)
 8001afc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_RCC_ClockConfig+0x134>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f003 fee7 	bl	80058d4 <HAL_InitTick>
  return HAL_OK;
 8001b06:	2000      	movs	r0, #0
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	4299      	cmp	r1, r3
 8001b18:	d1c5      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xa>
 8001b1a:	e7cd      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1c>
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b22:	bf1e      	ittt	ne
 8001b24:	689a      	ldrne	r2, [r3, #8]
 8001b26:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001b2a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b2e:	bf42      	ittt	mi
 8001b30:	689a      	ldrmi	r2, [r3, #8]
 8001b32:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001b36:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	68a0      	ldr	r0, [r4, #8]
 8001b3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b40:	4302      	orrs	r2, r0
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	e7bb      	b.n	8001abe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	6862      	ldr	r2, [r4, #4]
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_ClockConfig+0x128>)
 8001b4a:	2a01      	cmp	r2, #1
 8001b4c:	d11d      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	d0a7      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4e1b      	ldr	r6, [pc, #108]	; (8001bc4 <HAL_RCC_ClockConfig+0x128>)
 8001b58:	68b3      	ldr	r3, [r6, #8]
 8001b5a:	f023 0303 	bic.w	r3, r3, #3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b62:	f7fe fd3b 	bl	80005dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b66:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b6a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6c:	68b3      	ldr	r3, [r6, #8]
 8001b6e:	6862      	ldr	r2, [r4, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b78:	d0a3      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7fe fd2f 	bl	80005dc <HAL_GetTick>
 8001b7e:	1bc0      	subs	r0, r0, r7
 8001b80:	4540      	cmp	r0, r8
 8001b82:	d9f3      	bls.n	8001b6c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
}
 8001b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	1e91      	subs	r1, r2, #2
 8001b8c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b90:	d802      	bhi.n	8001b98 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b96:	e7dd      	b.n	8001b54 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	f013 0f02 	tst.w	r3, #2
 8001b9c:	e7da      	b.n	8001b54 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	b2ea      	uxtb	r2, r5
 8001ba0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	429d      	cmp	r5, r3
 8001baa:	f47f af7c 	bne.w	8001aa6 <HAL_RCC_ClockConfig+0xa>
 8001bae:	e78e      	b.n	8001ace <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <HAL_RCC_ClockConfig+0x128>)
 8001bb2:	68e0      	ldr	r0, [r4, #12]
 8001bb4:	688b      	ldr	r3, [r1, #8]
 8001bb6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	608b      	str	r3, [r1, #8]
 8001bbe:	e789      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x38>
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08006691 	.word	0x08006691
 8001bcc:	2000002c 	.word	0x2000002c
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001be2:	6810      	ldr	r0, [r2, #0]
}
 8001be4:	40d8      	lsrs	r0, r3
 8001be6:	4770      	bx	lr
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080066a1 	.word	0x080066a1
 8001bf0:	2000002c 	.word	0x2000002c

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	4a03      	ldr	r2, [pc, #12]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c02:	6810      	ldr	r0, [r2, #0]
}
 8001c04:	40d8      	lsrs	r0, r3
 8001c06:	4770      	bx	lr
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	080066a1 	.word	0x080066a1
 8001c10:	2000002c 	.word	0x2000002c

08001c14 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c14:	230f      	movs	r3, #15
 8001c16:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_GetClockConfig+0x34>)
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001c28:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001c30:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c3a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetClockConfig+0x38>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	600b      	str	r3, [r1, #0]
 8001c46:	4770      	bx	lr
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	f013 0f05 	tst.w	r3, #5
{
 8001c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c58:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c5c:	6828      	ldr	r0, [r5, #0]
 8001c5e:	f010 0002 	ands.w	r0, r0, #2
 8001c62:	d128      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8001c64:	b003      	add	sp, #12
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001c68:	4c41      	ldr	r4, [pc, #260]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c6a:	4e42      	ldr	r6, [pc, #264]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c70:	f7fe fcb4 	bl	80005dc <HAL_GetTick>
 8001c74:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c76:	6833      	ldr	r3, [r6, #0]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	d415      	bmi.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001c7c:	68ab      	ldr	r3, [r5, #8]
 8001c7e:	686a      	ldr	r2, [r5, #4]
 8001c80:	071b      	lsls	r3, r3, #28
 8001c82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c86:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c8e:	f7fe fca5 	bl	80005dc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c92:	4c38      	ldr	r4, [pc, #224]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001c94:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	0118      	lsls	r0, r3, #4
 8001c9a:	d4df      	bmi.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c9c:	f7fe fc9e 	bl	80005dc <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	2802      	cmp	r0, #2
 8001ca4:	d9f7      	bls.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001ca6:	e004      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ca8:	f7fe fc98 	bl	80005dc <HAL_GetTick>
 8001cac:	1bc0      	subs	r0, r0, r7
 8001cae:	2802      	cmp	r0, #2
 8001cb0:	d9e1      	bls.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	e7d6      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001cbc:	4c2e      	ldr	r4, [pc, #184]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fc80 	bl	80005dc <HAL_GetTick>
 8001cdc:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	05d9      	lsls	r1, r3, #23
 8001ce2:	d51b      	bpl.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce4:	4c23      	ldr	r4, [pc, #140]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ce6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ce8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cee:	68eb      	ldr	r3, [r5, #12]
 8001cf0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001cf4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001cfa:	d134      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001cfc:	6891      	ldr	r1, [r2, #8]
 8001cfe:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001d02:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d06:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001d0a:	4301      	orrs	r1, r0
 8001d0c:	6091      	str	r1, [r2, #8]
 8001d0e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e7a3      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d1c:	f7fe fc5e 	bl	80005dc <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	2802      	cmp	r0, #2
 8001d24:	d9db      	bls.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8001d26:	e7c4      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d28:	68ea      	ldr	r2, [r5, #12]
 8001d2a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d0dd      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d32:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3e:	2100      	movs	r1, #0
 8001d40:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001d42:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001d46:	07da      	lsls	r2, r3, #31
 8001d48:	d5d1      	bpl.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8001d4a:	f7fe fc47 	bl	80005dc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001d52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001d56:	079b      	lsls	r3, r3, #30
 8001d58:	d4c9      	bmi.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fc3f 	bl	80005dc <HAL_GetTick>
 8001d5e:	1b80      	subs	r0, r0, r6
 8001d60:	42b8      	cmp	r0, r7
 8001d62:	d9f7      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001d64:	e7a5      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d66:	6891      	ldr	r1, [r2, #8]
 8001d68:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d6c:	e7ce      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001d6e:	bf00      	nop
 8001d70:	42470068 	.word	0x42470068
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42470e40 	.word	0x42470e40

08001d80 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001d80:	2801      	cmp	r0, #1
 8001d82:	d120      	bne.n	8001dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001d86:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001d88:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001d8c:	d004      	beq.n	8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001d8e:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001d90:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001d92:	bf18      	it	ne
 8001d94:	2000      	movne	r0, #0
 8001d96:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d98:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001d9a:	490c      	ldr	r1, [pc, #48]	; (8001dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001d9c:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d9e:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001da0:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001da4:	bf4c      	ite	mi
 8001da6:	4b0b      	ldrmi	r3, [pc, #44]	; (8001dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001da8:	4b0b      	ldrpl	r3, [pc, #44]	; (8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001daa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001dae:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001db2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001db6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001dba:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001dbc:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001dc0:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001dc4:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001dc6:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	00bb8000 	.word	0x00bb8000
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	00f42400 	.word	0x00f42400

08001ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ddc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dde:	4604      	mov	r4, r0
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d036      	beq.n	8001e52 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001de8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001dec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001df0:	b91b      	cbnz	r3, 8001dfa <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001df2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001df6:	f003 fce5 	bl	80057c4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dfa:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001dfc:	68a0      	ldr	r0, [r4, #8]
 8001dfe:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e00:	2302      	movs	r3, #2
 8001e02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001e06:	680b      	ldr	r3, [r1, #0]
 8001e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e0c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	4303      	orrs	r3, r0
 8001e12:	68e0      	ldr	r0, [r4, #12]
 8001e14:	4303      	orrs	r3, r0
 8001e16:	6920      	ldr	r0, [r4, #16]
 8001e18:	4303      	orrs	r3, r0
 8001e1a:	6960      	ldr	r0, [r4, #20]
 8001e1c:	4303      	orrs	r3, r0
 8001e1e:	69e0      	ldr	r0, [r4, #28]
 8001e20:	4303      	orrs	r3, r0
 8001e22:	6a20      	ldr	r0, [r4, #32]
 8001e24:	4303      	orrs	r3, r0
 8001e26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e28:	4303      	orrs	r3, r0
 8001e2a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001e2e:	4303      	orrs	r3, r0
 8001e30:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e32:	0c12      	lsrs	r2, r2, #16
 8001e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e36:	f002 0204 	and.w	r2, r2, #4
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e3e:	69cb      	ldr	r3, [r1, #28]
 8001e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e44:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e46:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001e48:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e4a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001e50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e52:	2001      	movs	r0, #1
}
 8001e54:	bd10      	pop	{r4, pc}

08001e56 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001e66:	bf1e      	ittt	ne
 8001e68:	681a      	ldrne	r2, [r3, #0]
 8001e6a:	f042 0201 	orrne.w	r2, r2, #1
 8001e6e:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001e76:	2000      	movs	r0, #0
 8001e78:	4770      	bx	lr

08001e7a <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7a:	6803      	ldr	r3, [r0, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	bf1e      	ittt	ne
 8001e8e:	681a      	ldrne	r2, [r3, #0]
 8001e90:	f042 0201 	orrne.w	r2, r2, #1
 8001e94:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001e96:	2000      	movs	r0, #0
 8001e98:	4770      	bx	lr

08001e9a <HAL_TIM_OC_DelayElapsedCallback>:
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_IC_CaptureCallback>:
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_TriggerCallback>:
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea2:	6803      	ldr	r3, [r0, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	0791      	lsls	r1, r2, #30
{
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eac:	d50e      	bpl.n	8001ecc <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	0792      	lsls	r2, r2, #30
 8001eb2:	d50b      	bpl.n	8001ecc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb4:	f06f 0202 	mvn.w	r2, #2
 8001eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ebc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ebe:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec2:	d077      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec4:	f7ff ffea 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	0750      	lsls	r0, r2, #29
 8001ed2:	d510      	bpl.n	8001ef6 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	0751      	lsls	r1, r2, #29
 8001ed8:	d50d      	bpl.n	8001ef6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eda:	f06f 0204 	mvn.w	r2, #4
 8001ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	d068      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	f7ff ffd5 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	0712      	lsls	r2, r2, #28
 8001efc:	d50f      	bpl.n	8001f1e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	0710      	lsls	r0, r2, #28
 8001f02:	d50c      	bpl.n	8001f1e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f04:	f06f 0208 	mvn.w	r2, #8
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f0e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f10:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f14:	d05a      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	f7ff ffc1 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	06d2      	lsls	r2, r2, #27
 8001f24:	d510      	bpl.n	8001f48 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	06d0      	lsls	r0, r2, #27
 8001f2a:	d50d      	bpl.n	8001f48 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f2c:	f06f 0210 	mvn.w	r2, #16
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f34:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f36:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f3a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f3e:	d04b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f40:	f7ff ffac 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f44:	2300      	movs	r3, #0
 8001f46:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	07d1      	lsls	r1, r2, #31
 8001f4e:	d508      	bpl.n	8001f62 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	07d2      	lsls	r2, r2, #31
 8001f54:	d505      	bpl.n	8001f62 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f56:	f06f 0201 	mvn.w	r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f003 fb81 	bl	8005664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	0610      	lsls	r0, r2, #24
 8001f68:	d508      	bpl.n	8001f7c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	0611      	lsls	r1, r2, #24
 8001f6e:	d505      	bpl.n	8001f7c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 f997 	bl	80022aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	0652      	lsls	r2, r2, #25
 8001f82:	d508      	bpl.n	8001f96 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	0650      	lsls	r0, r2, #25
 8001f88:	d505      	bpl.n	8001f96 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff ff85 	bl	8001ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	0691      	lsls	r1, r2, #26
 8001f9c:	d522      	bpl.n	8001fe4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	0692      	lsls	r2, r2, #26
 8001fa2:	d51f      	bpl.n	8001fe4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa4:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001faa:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001fb0:	f000 b97a 	b.w	80022a8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb4:	f7ff ff71 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff ff70 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
 8001fbe:	e783      	b.n	8001ec8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc0:	f7ff ff6b 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff6a 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
 8001fca:	e792      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fcc:	f7ff ff65 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff64 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
 8001fd6:	e7a0      	b.n	8001f1a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd8:	f7ff ff5f 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff ff5e 	bl	8001e9e <HAL_TIM_PWM_PulseFinishedCallback>
 8001fe2:	e7af      	b.n	8001f44 <HAL_TIM_IRQHandler+0xa2>
 8001fe4:	bd10      	pop	{r4, pc}
	...

08001fe8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001fea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	4290      	cmp	r0, r2
 8001fee:	d012      	beq.n	8002016 <TIM_Base_SetConfig+0x2e>
 8001ff0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ff4:	d00f      	beq.n	8002016 <TIM_Base_SetConfig+0x2e>
 8001ff6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d00b      	beq.n	8002016 <TIM_Base_SetConfig+0x2e>
 8001ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002002:	4290      	cmp	r0, r2
 8002004:	d007      	beq.n	8002016 <TIM_Base_SetConfig+0x2e>
 8002006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200a:	4290      	cmp	r0, r2
 800200c:	d003      	beq.n	8002016 <TIM_Base_SetConfig+0x2e>
 800200e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002012:	4290      	cmp	r0, r2
 8002014:	d119      	bne.n	800204a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002016:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800201c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <TIM_Base_SetConfig+0xc4>)
 8002020:	4290      	cmp	r0, r2
 8002022:	d029      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002024:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002028:	d026      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 800202a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800202e:	4290      	cmp	r0, r2
 8002030:	d022      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002036:	4290      	cmp	r0, r2
 8002038:	d01e      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 800203a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800203e:	4290      	cmp	r0, r2
 8002040:	d01a      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002042:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002046:	4290      	cmp	r0, r2
 8002048:	d016      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <TIM_Base_SetConfig+0xc8>)
 800204c:	4290      	cmp	r0, r2
 800204e:	d013      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002050:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002054:	4290      	cmp	r0, r2
 8002056:	d00f      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002058:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800205c:	4290      	cmp	r0, r2
 800205e:	d00b      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002060:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002064:	4290      	cmp	r0, r2
 8002066:	d007      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800206c:	4290      	cmp	r0, r2
 800206e:	d003      	beq.n	8002078 <TIM_Base_SetConfig+0x90>
 8002070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002074:	4290      	cmp	r0, r2
 8002076:	d103      	bne.n	8002080 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002078:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	694a      	ldr	r2, [r1, #20]
 8002082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002086:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002088:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208a:	688b      	ldr	r3, [r1, #8]
 800208c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208e:	680b      	ldr	r3, [r1, #0]
 8002090:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <TIM_Base_SetConfig+0xc4>)
 8002094:	4298      	cmp	r0, r3
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0xb8>
 8002098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209c:	4298      	cmp	r0, r3
 800209e:	d101      	bne.n	80020a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a0:	690b      	ldr	r3, [r1, #16]
 80020a2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a4:	2301      	movs	r3, #1
 80020a6:	6143      	str	r3, [r0, #20]
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40014000 	.word	0x40014000

080020b4 <HAL_TIM_Base_Init>:
{
 80020b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020b6:	4604      	mov	r4, r0
 80020b8:	b1a0      	cbz	r0, 80020e4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020c2:	b91b      	cbnz	r3, 80020cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020c8:	f003 fbb0 	bl	800582c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	2302      	movs	r3, #2
 80020ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d2:	6820      	ldr	r0, [r4, #0]
 80020d4:	1d21      	adds	r1, r4, #4
 80020d6:	f7ff ff87 	bl	8001fe8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020da:	2301      	movs	r3, #1
 80020dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020e0:	2000      	movs	r0, #0
 80020e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020e4:	2001      	movs	r0, #1
}
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020e8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020ec:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020f6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020f8:	6083      	str	r3, [r0, #8]
 80020fa:	bd10      	pop	{r4, pc}

080020fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002100:	2b01      	cmp	r3, #1
{
 8002102:	b570      	push	{r4, r5, r6, lr}
 8002104:	4604      	mov	r4, r0
 8002106:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800210a:	d019      	beq.n	8002140 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002110:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002112:	2301      	movs	r3, #1
 8002114:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002118:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800211a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002122:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002124:	680b      	ldr	r3, [r1, #0]
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d065      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0xfa>
 800212a:	d815      	bhi.n	8002158 <HAL_TIM_ConfigClockSource+0x5c>
 800212c:	2b10      	cmp	r3, #16
 800212e:	d00c      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x4e>
 8002130:	d807      	bhi.n	8002142 <HAL_TIM_ConfigClockSource+0x46>
 8002132:	b153      	cbz	r3, 800214a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002134:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002136:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800213c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002140:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002142:	2b20      	cmp	r3, #32
 8002144:	d001      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x4e>
 8002146:	2b30      	cmp	r3, #48	; 0x30
 8002148:	d1f4      	bne.n	8002134 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800214a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800214c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002150:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002154:	4313      	orrs	r3, r2
 8002156:	e01a      	b.n	800218e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002158:	2b60      	cmp	r3, #96	; 0x60
 800215a:	d034      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xca>
 800215c:	d819      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x96>
 800215e:	2b50      	cmp	r3, #80	; 0x50
 8002160:	d1e8      	bne.n	8002134 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	684a      	ldr	r2, [r1, #4]
 8002164:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002166:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002168:	6a05      	ldr	r5, [r0, #32]
 800216a:	f025 0501 	bic.w	r5, r5, #1
 800216e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002170:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002172:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800217a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800217e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002180:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002182:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002184:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800218a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800218e:	6083      	str	r3, [r0, #8]
 8002190:	e7d0      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002192:	2b70      	cmp	r3, #112	; 0x70
 8002194:	d00c      	beq.n	80021b0 <HAL_TIM_ConfigClockSource+0xb4>
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	d1cb      	bne.n	8002134 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800219c:	68cb      	ldr	r3, [r1, #12]
 800219e:	684a      	ldr	r2, [r1, #4]
 80021a0:	6889      	ldr	r1, [r1, #8]
 80021a2:	f7ff ffa1 	bl	80020e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	6893      	ldr	r3, [r2, #8]
 80021aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ae:	e008      	b.n	80021c2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80021b0:	68cb      	ldr	r3, [r1, #12]
 80021b2:	684a      	ldr	r2, [r1, #4]
 80021b4:	6889      	ldr	r1, [r1, #8]
 80021b6:	f7ff ff97 	bl	80020e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c2:	6093      	str	r3, [r2, #8]
      break;
 80021c4:	e7b6      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021c6:	684d      	ldr	r5, [r1, #4]
 80021c8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ca:	6a01      	ldr	r1, [r0, #32]
 80021cc:	f021 0110 	bic.w	r1, r1, #16
 80021d0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80021d4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021e2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021e6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021e8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021ea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021f0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80021f4:	e7cb      	b.n	800218e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f6:	684a      	ldr	r2, [r1, #4]
 80021f8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021fa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fc:	6a05      	ldr	r5, [r0, #32]
 80021fe:	f025 0501 	bic.w	r5, r5, #1
 8002202:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002204:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002206:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800220a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800220e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002212:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002214:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002216:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002218:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800221e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002222:	e7b4      	b.n	800218e <HAL_TIM_ConfigClockSource+0x92>

08002224 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002224:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002228:	2b01      	cmp	r3, #1
{
 800222a:	b530      	push	{r4, r5, lr}
 800222c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002230:	d035      	beq.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002232:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002236:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002238:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800223a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800223c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8002240:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002242:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8002244:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002248:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800224a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224c:	4c15      	ldr	r4, [pc, #84]	; (80022a4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800224e:	42a3      	cmp	r3, r4
 8002250:	d01a      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002256:	d017      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002258:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800225c:	42a3      	cmp	r3, r4
 800225e:	d013      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002260:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002264:	42a3      	cmp	r3, r4
 8002266:	d00f      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002268:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800226c:	42a3      	cmp	r3, r4
 800226e:	d00b      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002270:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002274:	42a3      	cmp	r3, r4
 8002276:	d007      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002278:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800227c:	42a3      	cmp	r3, r4
 800227e:	d003      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002280:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002284:	42a3      	cmp	r3, r4
 8002286:	d104      	bne.n	8002292 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002288:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800228a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800228e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002292:	2301      	movs	r3, #1
 8002294:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002298:	2300      	movs	r3, #0
 800229a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800229e:	4618      	mov	r0, r3

  return HAL_OK;
}
 80022a0:	bd30      	pop	{r4, r5, pc}
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000

080022a8 <HAL_TIMEx_CommutCallback>:
 80022a8:	4770      	bx	lr

080022aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	4770      	bx	lr

080022ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ac:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ae:	6803      	ldr	r3, [r0, #0]
 80022b0:	68c1      	ldr	r1, [r0, #12]
 80022b2:	691a      	ldr	r2, [r3, #16]
{
 80022b4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022ba:	430a      	orrs	r2, r1
 80022bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022be:	6925      	ldr	r5, [r4, #16]
 80022c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c4:	69c0      	ldr	r0, [r0, #28]
 80022c6:	432a      	orrs	r2, r5
 80022c8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80022ca:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ce:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80022d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	69a1      	ldr	r1, [r4, #24]
 80022de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022e2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	4a25      	ldr	r2, [pc, #148]	; (8002380 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ec:	d129      	bne.n	8002342 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <UART_SetConfig+0x4e>
 80022f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d120      	bne.n	800233c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022fa:	f7ff fc7b 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022fe:	6862      	ldr	r2, [r4, #4]
 8002300:	6825      	ldr	r5, [r4, #0]
 8002302:	1892      	adds	r2, r2, r2
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	f04f 0119 	mov.w	r1, #25
 800230c:	415b      	adcs	r3, r3
 800230e:	fba0 0101 	umull	r0, r1, r0, r1
 8002312:	f7fd ffb5 	bl	8000280 <__aeabi_uldivmod>
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fbb0 f4f1 	udiv	r4, r0, r1
 800231c:	fb01 0314 	mls	r3, r1, r4, r0
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	3332      	adds	r3, #50	; 0x32
 8002324:	fbb3 f3f1 	udiv	r3, r3, r1
 8002328:	f003 0207 	and.w	r2, r3, #7
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002332:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002336:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002338:	60ab      	str	r3, [r5, #8]
 800233a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800233c:	f7ff fc4a 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002340:	e7dd      	b.n	80022fe <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002342:	4293      	cmp	r3, r2
 8002344:	d002      	beq.n	800234c <UART_SetConfig+0xa0>
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <UART_SetConfig+0xd8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d116      	bne.n	800237a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800234c:	f7ff fc52 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	6825      	ldr	r5, [r4, #0]
 8002354:	2119      	movs	r1, #25
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	fba0 0101 	umull	r0, r1, r0, r1
 800235c:	0f9b      	lsrs	r3, r3, #30
 800235e:	f7fd ff8f 	bl	8000280 <__aeabi_uldivmod>
 8002362:	2264      	movs	r2, #100	; 0x64
 8002364:	fbb0 f1f2 	udiv	r1, r0, r2
 8002368:	fb02 0311 	mls	r3, r2, r1, r0
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	fbb3 f3f2 	udiv	r3, r3, r2
 8002374:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002378:	e7de      	b.n	8002338 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800237a:	f7ff fc2b 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 800237e:	e7e7      	b.n	8002350 <UART_SetConfig+0xa4>
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400

08002388 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	4604      	mov	r4, r0
 800238c:	460e      	mov	r6, r1
 800238e:	4617      	mov	r7, r2
 8002390:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002392:	6821      	ldr	r1, [r4, #0]
 8002394:	680b      	ldr	r3, [r1, #0]
 8002396:	ea36 0303 	bics.w	r3, r6, r3
 800239a:	d101      	bne.n	80023a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800239c:	2000      	movs	r0, #0
}
 800239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80023a0:	1c6b      	adds	r3, r5, #1
 80023a2:	d0f7      	beq.n	8002394 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023a4:	b995      	cbnz	r5, 80023cc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80023b8:	2320      	movs	r3, #32
 80023ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80023c2:	2300      	movs	r3, #0
 80023c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80023c8:	2003      	movs	r0, #3
 80023ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023cc:	f7fe f906 	bl	80005dc <HAL_GetTick>
 80023d0:	1bc0      	subs	r0, r0, r7
 80023d2:	4285      	cmp	r5, r0
 80023d4:	d2dd      	bcs.n	8002392 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80023d6:	e7e6      	b.n	80023a6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080023d8 <HAL_UART_Init>:
{
 80023d8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023da:	4604      	mov	r4, r0
 80023dc:	b340      	cbz	r0, 8002430 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023e6:	b91b      	cbnz	r3, 80023f0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023ec:	f003 fa3c 	bl	8005868 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023f2:	2324      	movs	r3, #36	; 0x24
 80023f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023f8:	68d3      	ldr	r3, [r2, #12]
 80023fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023fe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff ff53 	bl	80022ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002416:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002420:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002422:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002426:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800242a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800242e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bd10      	pop	{r4, pc}

08002434 <HAL_UART_Transmit>:
{
 8002434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002438:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800243a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800243e:	2b20      	cmp	r3, #32
{
 8002440:	4604      	mov	r4, r0
 8002442:	460d      	mov	r5, r1
 8002444:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002446:	d151      	bne.n	80024ec <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002448:	2900      	cmp	r1, #0
 800244a:	d04c      	beq.n	80024e6 <HAL_UART_Transmit+0xb2>
 800244c:	2a00      	cmp	r2, #0
 800244e:	d04a      	beq.n	80024e6 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002450:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002454:	2b01      	cmp	r3, #1
 8002456:	d049      	beq.n	80024ec <HAL_UART_Transmit+0xb8>
 8002458:	2301      	movs	r3, #1
 800245a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002462:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002464:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002468:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800246c:	f7fe f8b6 	bl	80005dc <HAL_GetTick>
    huart->TxXferSize = Size;
 8002470:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002474:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002476:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800247a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800247e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002480:	b29b      	uxth	r3, r3
 8002482:	b95b      	cbnz	r3, 800249c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	4632      	mov	r2, r6
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	4620      	mov	r0, r4
 800248c:	f7ff ff7c 	bl	8002388 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002490:	b9a0      	cbnz	r0, 80024bc <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002492:	2320      	movs	r3, #32
 8002494:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800249c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024a4:	68a3      	ldr	r3, [r4, #8]
 80024a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	4632      	mov	r2, r6
 80024ac:	463b      	mov	r3, r7
 80024ae:	f04f 0180 	mov.w	r1, #128	; 0x80
 80024b2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024b4:	d10e      	bne.n	80024d4 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b6:	f7ff ff67 	bl	8002388 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024ba:	b110      	cbz	r0, 80024c2 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80024bc:	2003      	movs	r0, #3
 80024be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024c2:	882b      	ldrh	r3, [r5, #0]
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ca:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024cc:	6923      	ldr	r3, [r4, #16]
 80024ce:	b943      	cbnz	r3, 80024e2 <HAL_UART_Transmit+0xae>
          pData += 2U;
 80024d0:	3502      	adds	r5, #2
 80024d2:	e7d4      	b.n	800247e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d4:	f7ff ff58 	bl	8002388 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024d8:	2800      	cmp	r0, #0
 80024da:	d1ef      	bne.n	80024bc <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	782a      	ldrb	r2, [r5, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	3501      	adds	r5, #1
 80024e4:	e7cb      	b.n	800247e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
 80024e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80024ec:	2002      	movs	r0, #2
}
 80024ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080024f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80024f6:	3b01      	subs	r3, #1
 80024f8:	d101      	bne.n	80024fe <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80024fa:	2003      	movs	r0, #3
 80024fc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80024fe:	6902      	ldr	r2, [r0, #16]
 8002500:	2a00      	cmp	r2, #0
 8002502:	daf8      	bge.n	80024f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002504:	6903      	ldr	r3, [r0, #16]
 8002506:	4a06      	ldr	r2, [pc, #24]	; (8002520 <USB_CoreReset+0x2c>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800250e:	3a01      	subs	r2, #1
 8002510:	d0f3      	beq.n	80024fa <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002512:	6903      	ldr	r3, [r0, #16]
 8002514:	f013 0301 	ands.w	r3, r3, #1
 8002518:	d1f9      	bne.n	800250e <USB_CoreReset+0x1a>

  return HAL_OK;
 800251a:	4618      	mov	r0, r3
}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	00030d41 	.word	0x00030d41

08002524 <USB_CoreInit>:
{
 8002524:	b084      	sub	sp, #16
 8002526:	b538      	push	{r3, r4, r5, lr}
 8002528:	ad05      	add	r5, sp, #20
 800252a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800252e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002530:	2b01      	cmp	r3, #1
{
 8002532:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002534:	d125      	bne.n	8002582 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002536:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800253e:	68c3      	ldr	r3, [r0, #12]
 8002540:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002548:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800254a:	68c3      	ldr	r3, [r0, #12]
 800254c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002550:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002554:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002556:	bf02      	ittt	eq
 8002558:	68c3      	ldreq	r3, [r0, #12]
 800255a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800255e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002560:	f7ff ffc8 	bl	80024f4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002564:	9b08      	ldr	r3, [sp, #32]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800256a:	68a3      	ldr	r3, [r4, #8]
 800256c:	f043 0306 	orr.w	r3, r3, #6
 8002570:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002572:	68a3      	ldr	r3, [r4, #8]
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	60a3      	str	r3, [r4, #8]
}
 800257a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800257e:	b004      	add	sp, #16
 8002580:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002582:	68c3      	ldr	r3, [r0, #12]
 8002584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002588:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800258a:	f7ff ffb3 	bl	80024f4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800258e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002590:	b923      	cbnz	r3, 800259c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002598:	63a3      	str	r3, [r4, #56]	; 0x38
 800259a:	e7e3      	b.n	8002564 <USB_CoreInit+0x40>
 800259c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	e7f9      	b.n	8002598 <USB_CoreInit+0x74>

080025a4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80025a4:	6883      	ldr	r3, [r0, #8]
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6083      	str	r3, [r0, #8]
}
 80025ac:	2000      	movs	r0, #0
 80025ae:	4770      	bx	lr

080025b0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80025b0:	6883      	ldr	r3, [r0, #8]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6083      	str	r3, [r0, #8]
}
 80025b8:	2000      	movs	r0, #0
 80025ba:	4770      	bx	lr

080025bc <USB_SetCurrentMode>:
{
 80025bc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80025be:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80025c0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80025c2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80025c6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80025c8:	d108      	bne.n	80025dc <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80025ca:	68c3      	ldr	r3, [r0, #12]
 80025cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80025d0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80025d2:	2032      	movs	r0, #50	; 0x32
 80025d4:	f7fe f808 	bl	80005e8 <HAL_Delay>
  return HAL_OK;
 80025d8:	2000      	movs	r0, #0
 80025da:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80025dc:	b919      	cbnz	r1, 80025e6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80025de:	68c3      	ldr	r3, [r0, #12]
 80025e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025e4:	e7f4      	b.n	80025d0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80025e6:	2001      	movs	r0, #1
}
 80025e8:	bd08      	pop	{r3, pc}
	...

080025ec <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80025ec:	0189      	lsls	r1, r1, #6
 80025ee:	f041 0120 	orr.w	r1, r1, #32
 80025f2:	4a06      	ldr	r2, [pc, #24]	; (800260c <USB_FlushTxFifo+0x20>)
 80025f4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80025f6:	3a01      	subs	r2, #1
 80025f8:	d005      	beq.n	8002606 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80025fa:	6903      	ldr	r3, [r0, #16]
 80025fc:	f013 0320 	ands.w	r3, r3, #32
 8002600:	d1f9      	bne.n	80025f6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002602:	4618      	mov	r0, r3
 8002604:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	00030d41 	.word	0x00030d41

08002610 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002610:	2310      	movs	r3, #16
 8002612:	4a06      	ldr	r2, [pc, #24]	; (800262c <USB_FlushRxFifo+0x1c>)
 8002614:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002616:	3a01      	subs	r2, #1
 8002618:	d005      	beq.n	8002626 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800261a:	6903      	ldr	r3, [r0, #16]
 800261c:	f013 0310 	ands.w	r3, r3, #16
 8002620:	d1f9      	bne.n	8002616 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002622:	4618      	mov	r0, r3
 8002624:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002626:	2003      	movs	r0, #3
}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	00030d41 	.word	0x00030d41

08002630 <USB_WritePacket>:
{
 8002630:	b510      	push	{r4, lr}
 8002632:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002636:	b94c      	cbnz	r4, 800264c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002638:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800263a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002646:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002648:	4299      	cmp	r1, r3
 800264a:	d101      	bne.n	8002650 <USB_WritePacket+0x20>
}
 800264c:	2000      	movs	r0, #0
 800264e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002650:	f851 2b04 	ldr.w	r2, [r1], #4
 8002654:	6002      	str	r2, [r0, #0]
 8002656:	e7f7      	b.n	8002648 <USB_WritePacket+0x18>

08002658 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002658:	3203      	adds	r2, #3
 800265a:	f022 0203 	bic.w	r2, r2, #3
 800265e:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002660:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002664:	4291      	cmp	r1, r2
 8002666:	d101      	bne.n	800266c <USB_ReadPacket+0x14>
}
 8002668:	4608      	mov	r0, r1
 800266a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800266c:	6803      	ldr	r3, [r0, #0]
 800266e:	f841 3b04 	str.w	r3, [r1], #4
 8002672:	e7f7      	b.n	8002664 <USB_ReadPacket+0xc>

08002674 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002674:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002676:	6980      	ldr	r0, [r0, #24]
}
 8002678:	4010      	ands	r0, r2
 800267a:	4770      	bx	lr

0800267c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800267c:	6940      	ldr	r0, [r0, #20]
}
 800267e:	f000 0001 	and.w	r0, r0, #1
 8002682:	4770      	bx	lr

08002684 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002684:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002688:	f023 0303 	bic.w	r3, r3, #3
{
 800268c:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800268e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002692:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002696:	f001 0303 	and.w	r3, r1, #3
 800269a:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 800269c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800269e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80026a2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80026a6:	d104      	bne.n	80026b2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80026a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80026ac:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80026ae:	2000      	movs	r0, #0
 80026b0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80026b2:	2902      	cmp	r1, #2
 80026b4:	d1fb      	bne.n	80026ae <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80026b6:	f241 7370 	movw	r3, #6000	; 0x1770
 80026ba:	e7f7      	b.n	80026ac <USB_InitFSLSPClkSel+0x28>

080026bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80026bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80026be:	2500      	movs	r5, #0
 80026c0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026c2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026c6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026ce:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80026d6:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80026d8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80026dc:	2064      	movs	r0, #100	; 0x64
 80026de:	f7fd ff83 	bl	80005e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80026e2:	9b01      	ldr	r3, [sp, #4]
 80026e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80026ec:	200a      	movs	r0, #10
 80026ee:	f7fd ff7b 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
}
 80026f2:	4628      	mov	r0, r5
 80026f4:	b003      	add	sp, #12
 80026f6:	bd30      	pop	{r4, r5, pc}

080026f8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80026f8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026fe:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002702:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002704:	9b01      	ldr	r3, [sp, #4]
 8002706:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800270a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800270c:	9b01      	ldr	r3, [sp, #4]
 800270e:	04da      	lsls	r2, r3, #19
 8002710:	d406      	bmi.n	8002720 <USB_DriveVbus+0x28>
 8002712:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002714:	bf02      	ittt	eq
 8002716:	9b01      	ldreq	r3, [sp, #4]
 8002718:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800271c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	04db      	lsls	r3, r3, #19
 8002724:	d505      	bpl.n	8002732 <USB_DriveVbus+0x3a>
 8002726:	b921      	cbnz	r1, 8002732 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800272e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002732:	2000      	movs	r0, #0
 8002734:	b002      	add	sp, #8
 8002736:	4770      	bx	lr

08002738 <USB_HostInit>:
{
 8002738:	b084      	sub	sp, #16
 800273a:	b538      	push	{r3, r4, r5, lr}
 800273c:	4604      	mov	r4, r0
 800273e:	a805      	add	r0, sp, #20
 8002740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800274a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800274c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002750:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002754:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002758:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800275a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002764:	05da      	lsls	r2, r3, #23
 8002766:	d53f      	bpl.n	80027e8 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002768:	9b07      	ldr	r3, [sp, #28]
 800276a:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800276c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002770:	d13c      	bne.n	80027ec <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002772:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002776:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800277a:	2110      	movs	r1, #16
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff ff35 	bl	80025ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff ff44 	bl	8002610 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	9906      	ldr	r1, [sp, #24]
 800278c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8002794:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002796:	428b      	cmp	r3, r1
 8002798:	d12b      	bne.n	80027f2 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 800279a:	2101      	movs	r1, #1
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ffab 	bl	80026f8 <USB_DriveVbus>
  HAL_Delay(200U);
 80027a2:	20c8      	movs	r0, #200	; 0xc8
 80027a4:	f7fd ff20 	bl	80005e8 <HAL_Delay>
  USBx->GINTMSK = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
 80027b0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80027b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027b4:	05db      	lsls	r3, r3, #23
 80027b6:	d521      	bpl.n	80027fc <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 80027b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027bc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80027be:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80027c2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80027c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80027ca:	9b08      	ldr	r3, [sp, #32]
 80027cc:	b91b      	cbnz	r3, 80027d6 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80027ce:	69a3      	ldr	r3, [r4, #24]
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80027d6:	69a2      	ldr	r2, [r4, #24]
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <USB_HostInit+0xd8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	61a3      	str	r3, [r4, #24]
}
 80027de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027e2:	2000      	movs	r0, #0
 80027e4:	b004      	add	sp, #16
 80027e6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80027e8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	e7c1      	b.n	8002776 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80027f2:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 80027f4:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 80027f6:	60d5      	str	r5, [r2, #12]
 80027f8:	3220      	adds	r2, #32
 80027fa:	e7cc      	b.n	8002796 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002800:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002804:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002806:	4b03      	ldr	r3, [pc, #12]	; (8002814 <USB_HostInit+0xdc>)
 8002808:	e7dd      	b.n	80027c6 <USB_HostInit+0x8e>
 800280a:	bf00      	nop
 800280c:	00e00300 	.word	0x00e00300
 8002810:	a3200008 	.word	0xa3200008
 8002814:	004000e0 	.word	0x004000e0

08002818 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002818:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800281e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002822:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002824:	9801      	ldr	r0, [sp, #4]
}
 8002826:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800282a:	b002      	add	sp, #8
 800282c:	4770      	bx	lr

0800282e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800282e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002832:	6880      	ldr	r0, [r0, #8]
}
 8002834:	b280      	uxth	r0, r0
 8002836:	4770      	bx	lr

08002838 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800283c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8002840:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002844:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002848:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800284a:	f04f 30ff 	mov.w	r0, #4294967295
 800284e:	60a0      	str	r0, [r4, #8]
 8002850:	fa4f f882 	sxtb.w	r8, r2
 8002854:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002858:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800285c:	2e03      	cmp	r6, #3
 800285e:	d86c      	bhi.n	800293a <USB_HC_Init+0x102>
 8002860:	e8df f006 	tbb	[pc, r6]
 8002864:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002868:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800286c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002870:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002872:	da03      	bge.n	800287c <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002874:	68e1      	ldr	r1, [r4, #12]
 8002876:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800287a:	e005      	b.n	8002888 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800287c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800287e:	05c9      	lsls	r1, r1, #23
 8002880:	d542      	bpl.n	8002908 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002882:	68e1      	ldr	r1, [r4, #12]
 8002884:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002888:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800288a:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800288c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f10e 	lsl.w	r1, r1, lr
 8002896:	4321      	orrs	r1, r4
 8002898:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800289c:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800289e:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80028a2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80028a6:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80028a8:	bfb4      	ite	lt
 80028aa:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 80028ae:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80028b0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 80028b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80028b8:	059b      	lsls	r3, r3, #22
 80028ba:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80028be:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80028c2:	02d2      	lsls	r2, r2, #11
 80028c4:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80028c8:	432b      	orrs	r3, r5
 80028ca:	4313      	orrs	r3, r2
 80028cc:	04b2      	lsls	r2, r6, #18
 80028ce:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 80028d2:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80028d4:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 80028d8:	bf0c      	ite	eq
 80028da:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 80028de:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80028e0:	4323      	orrs	r3, r4
 80028e2:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 80028e4:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80028e6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 80028ea:	d128      	bne.n	800293e <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80028ec:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80028f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028f4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 80028f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80028fc:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8002900:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002904:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002906:	dbb5      	blt.n	8002874 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002908:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f10e 	lsl.w	r1, r1, lr
 8002912:	4301      	orrs	r1, r0
 8002914:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002918:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 800291a:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800291c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002920:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002922:	4604      	mov	r4, r0
 8002924:	e7c4      	b.n	80028b0 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002926:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800292a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800292e:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002930:	daea      	bge.n	8002908 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002932:	68e1      	ldr	r1, [r4, #12]
 8002934:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002938:	e7a6      	b.n	8002888 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 800293a:	2001      	movs	r0, #1
 800293c:	e7a6      	b.n	800288c <USB_HC_Init+0x54>
}
 800293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002942 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002942:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002946:	6940      	ldr	r0, [r0, #20]
}
 8002948:	b280      	uxth	r0, r0
 800294a:	4770      	bx	lr

0800294c <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800294c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002950:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002954:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002958:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800295c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002964:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002968:	d11e      	bne.n	80029a8 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800296a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800296c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002970:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002974:	d137      	bne.n	80029e6 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800297a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800297e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002986:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800298a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800298e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002992:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002996:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 800299a:	3b01      	subs	r3, #1
 800299c:	d002      	beq.n	80029a4 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800299e:	6811      	ldr	r1, [r2, #0]
 80029a0:	2900      	cmp	r1, #0
 80029a2:	dbfa      	blt.n	800299a <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80029a4:	2000      	movs	r0, #0
 80029a6:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80029a8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80029ac:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80029b0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80029b4:	d117      	bne.n	80029e6 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80029b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ba:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029be:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80029c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80029ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80029ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029d2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80029d6:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 80029da:	3b01      	subs	r3, #1
 80029dc:	d0e2      	beq.n	80029a4 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80029de:	6811      	ldr	r1, [r2, #0]
 80029e0:	2900      	cmp	r1, #0
 80029e2:	dbfa      	blt.n	80029da <USB_HC_Halt+0x8e>
 80029e4:	e7de      	b.n	80029a4 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80029ee:	e7d9      	b.n	80029a4 <USB_HC_Halt+0x58>

080029f0 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80029f0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <USB_DoPing+0x20>)
 80029f6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80029fa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a06:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	80080000 	.word	0x80080000

08002a14 <USB_HC_StartXfer>:
{
 8002a14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002a18:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002a1a:	05db      	lsls	r3, r3, #23
{
 8002a1c:	4616      	mov	r6, r2
 8002a1e:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002a20:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002a22:	d517      	bpl.n	8002a54 <USB_HC_StartXfer+0x40>
 8002a24:	790d      	ldrb	r5, [r1, #4]
 8002a26:	b9ad      	cbnz	r5, 8002a54 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002a28:	b94e      	cbnz	r6, 8002a3e <USB_HC_StartXfer+0x2a>
 8002a2a:	794b      	ldrb	r3, [r1, #5]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d111      	bne.n	8002a54 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002a30:	4611      	mov	r1, r2
 8002a32:	f7ff ffdd 	bl	80029f0 <USB_DoPing>
}
 8002a36:	2000      	movs	r0, #0
 8002a38:	b002      	add	sp, #8
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8002a3e:	2e01      	cmp	r6, #1
 8002a40:	d108      	bne.n	8002a54 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002a42:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002a46:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002a4a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002a4e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002a52:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002a54:	6908      	ldr	r0, [r1, #16]
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d066      	beq.n	8002b28 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002a5a:	890b      	ldrh	r3, [r1, #8]
 8002a5c:	3801      	subs	r0, #1
 8002a5e:	4418      	add	r0, r3
 8002a60:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a64:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002a66:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002a6a:	d903      	bls.n	8002a74 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8002a70:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002a74:	78cf      	ldrb	r7, [r1, #3]
 8002a76:	b117      	cbz	r7, 8002a7e <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002a78:	890b      	ldrh	r3, [r1, #8]
 8002a7a:	4343      	muls	r3, r0
 8002a7c:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002a7e:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002a82:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002a84:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002a88:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002a8c:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002a90:	ea4e 0e08 	orr.w	lr, lr, r8
 8002a94:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002b74 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002a98:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002a9c:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8002aa0:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002aa4:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002aa8:	b116      	cbz	r6, 8002ab0 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002aaa:	68c8      	ldr	r0, [r1, #12]
 8002aac:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002ab0:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002ab4:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002ab8:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002abc:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8002ac0:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002ac4:	43c0      	mvns	r0, r0
 8002ac6:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002aca:	0740      	lsls	r0, r0, #29
 8002acc:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002ad0:	ea40 000c 	orr.w	r0, r0, ip
 8002ad4:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ad8:	4825      	ldr	r0, [pc, #148]	; (8002b70 <USB_HC_StartXfer+0x15c>)
 8002ada:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002ade:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae2:	f8d0 c000 	ldr.w	ip, [r0]
 8002ae6:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002aea:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002aee:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8002af2:	b1df      	cbz	r7, 8002b2c <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002af4:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002af8:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002afc:	f8d0 c000 	ldr.w	ip, [r0]
 8002b00:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002b04:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b08:	6800      	ldr	r0, [r0, #0]
 8002b0a:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	d191      	bne.n	8002a36 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002b12:	2f00      	cmp	r7, #0
 8002b14:	d18f      	bne.n	8002a36 <USB_HC_StartXfer+0x22>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d08d      	beq.n	8002a36 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8002b1a:	79c8      	ldrb	r0, [r1, #7]
 8002b1c:	2803      	cmp	r0, #3
 8002b1e:	d813      	bhi.n	8002b48 <USB_HC_StartXfer+0x134>
 8002b20:	e8df f000 	tbb	[pc, r0]
 8002b24:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e7a3      	b.n	8002a74 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002b2c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8002b30:	e7e2      	b.n	8002af8 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002b32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002b34:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002b36:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002b3a:	b280      	uxth	r0, r0
 8002b3c:	4285      	cmp	r5, r0
 8002b3e:	d903      	bls.n	8002b48 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002b40:	69a0      	ldr	r0, [r4, #24]
 8002b42:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002b46:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	9000      	str	r0, [sp, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	68c9      	ldr	r1, [r1, #12]
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff fd6d 	bl	8002630 <USB_WritePacket>
 8002b56:	e76e      	b.n	8002a36 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002b58:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002b5c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002b5e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002b62:	b280      	uxth	r0, r0
 8002b64:	4285      	cmp	r5, r0
 8002b66:	d9ef      	bls.n	8002b48 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002b68:	69a0      	ldr	r0, [r4, #24]
 8002b6a:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002b6e:	e7ea      	b.n	8002b46 <USB_HC_StartXfer+0x132>
 8002b70:	200000b0 	.word	0x200000b0
 8002b74:	1ff80000 	.word	0x1ff80000

08002b78 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b78:	6883      	ldr	r3, [r0, #8]
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002b7e:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b80:	2110      	movs	r1, #16
{
 8002b82:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b84:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b86:	f7ff fd31 	bl	80025ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7ff fd40 	bl	8002610 <USB_FlushRxFifo>
 8002b90:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002b94:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002b98:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002b9a:	6811      	ldr	r1, [r2, #0]
 8002b9c:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002ba0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002ba4:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002ba8:	4290      	cmp	r0, r2
 8002baa:	d1f6      	bne.n	8002b9a <USB_StopHost+0x22>
 8002bac:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002bb4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002bb8:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002bba:	3001      	adds	r0, #1
 8002bbc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002bc0:	d802      	bhi.n	8002bc8 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	dbf8      	blt.n	8002bba <USB_StopHost+0x42>
 8002bc8:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d1ef      	bne.n	8002bae <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002bd6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bd8:	68a3      	ldr	r3, [r4, #8]
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002be0:	2000      	movs	r0, #0
 8002be2:	bd10      	pop	{r4, pc}

08002be4 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	4770      	bx	lr

08002be8 <USBH_CDC_InterfaceDeInit>:
{
 8002be8:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002bea:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002bee:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8002bf0:	7821      	ldrb	r1, [r4, #0]
{
 8002bf2:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002bf4:	b139      	cbz	r1, 8002c06 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002bf6:	f000 fed6 	bl	80039a6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002bfa:	7821      	ldrb	r1, [r4, #0]
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 feee 	bl	80039de <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8002c02:	2300      	movs	r3, #0
 8002c04:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002c06:	7b21      	ldrb	r1, [r4, #12]
 8002c08:	b141      	cbz	r1, 8002c1c <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f000 fecb 	bl	80039a6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8002c10:	7b21      	ldrb	r1, [r4, #12]
 8002c12:	4628      	mov	r0, r5
 8002c14:	f000 fee3 	bl	80039de <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8002c1c:	7b61      	ldrb	r1, [r4, #13]
 8002c1e:	b141      	cbz	r1, 8002c32 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8002c20:	4628      	mov	r0, r5
 8002c22:	f000 fec0 	bl	80039a6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8002c26:	7b61      	ldrb	r1, [r4, #13]
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 fed8 	bl	80039de <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8002c2e:	2300      	movs	r3, #0
 8002c30:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8002c32:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002c36:	69d8      	ldr	r0, [r3, #28]
 8002c38:	b128      	cbz	r0, 8002c46 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8002c3a:	f003 f885 	bl	8005d48 <free>
    phost->pActiveClass->pData = 0U;
 8002c3e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
}
 8002c46:	2000      	movs	r0, #0
 8002c48:	bd38      	pop	{r3, r4, r5, pc}

08002c4a <USBH_CDC_InterfaceInit>:
{
 8002c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8002c4c:	2202      	movs	r2, #2
{
 8002c4e:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8002c50:	2301      	movs	r3, #1
 8002c52:	4611      	mov	r1, r2
{
 8002c54:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8002c56:	f000 f9e7 	bl	8003028 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8002c5a:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8002c5c:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8002c5e:	d102      	bne.n	8002c66 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002c60:	2002      	movs	r0, #2
}
 8002c62:	b005      	add	sp, #20
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8002c66:	4601      	mov	r1, r0
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 f9d4 	bl	8003016 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002c6e:	2050      	movs	r0, #80	; 0x50
 8002c70:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8002c74:	f003 f860 	bl	8005d38 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002c78:	231a      	movs	r3, #26
 8002c7a:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002c7e:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002c80:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8002c84:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002c86:	bf42      	ittt	mi
 8002c88:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002c8a:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8002c8e:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002c90:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8002c92:	7841      	ldrb	r1, [r0, #1]
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 fe8b 	bl	80039b0 <USBH_AllocPipe>
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8002c9e:	8960      	ldrh	r0, [r4, #10]
 8002ca0:	9002      	str	r0, [sp, #8]
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	9001      	str	r0, [sp, #4]
 8002ca6:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002caa:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002cae:	7862      	ldrb	r2, [r4, #1]
 8002cb0:	9000      	str	r0, [sp, #0]
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f000 fe68 	bl	8003988 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	7821      	ldrb	r1, [r4, #0]
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f002 ffcc 	bl	8005c5a <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	210a      	movs	r1, #10
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f000 f9ad 	bl	8003028 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8002cce:	28ff      	cmp	r0, #255	; 0xff
 8002cd0:	d0c6      	beq.n	8002c60 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002cd2:	231a      	movs	r3, #26
 8002cd4:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002cd8:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002cdc:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002ce0:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8002ce4:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002ce8:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002cec:	bf0d      	iteet	eq
 8002cee:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002cf0:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002cf2:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002cf4:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002cf6:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002cfa:	bf08      	it	eq
 8002cfc:	73a3      	strbeq	r3, [r4, #14]
 8002cfe:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d02:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002d04:	bf18      	it	ne
 8002d06:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d08:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002d0a:	bf14      	ite	ne
 8002d0c:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002d0e:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d10:	f000 fe4e 	bl	80039b0 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8002d14:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d16:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f000 fe49 	bl	80039b0 <USBH_AllocPipe>
 8002d1e:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8002d20:	8b20      	ldrh	r0, [r4, #24]
 8002d22:	9002      	str	r0, [sp, #8]
 8002d24:	2602      	movs	r6, #2
 8002d26:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002d2a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002d2e:	7ba2      	ldrb	r2, [r4, #14]
 8002d30:	7b61      	ldrb	r1, [r4, #13]
 8002d32:	9601      	str	r6, [sp, #4]
 8002d34:	9000      	str	r0, [sp, #0]
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 fe26 	bl	8003988 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8002d3c:	8b60      	ldrh	r0, [r4, #26]
 8002d3e:	9002      	str	r0, [sp, #8]
 8002d40:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002d44:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002d48:	7be2      	ldrb	r2, [r4, #15]
 8002d4a:	7b21      	ldrb	r1, [r4, #12]
 8002d4c:	9601      	str	r6, [sp, #4]
 8002d4e:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002d50:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 fe18 	bl	8003988 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8002d58:	4632      	mov	r2, r6
 8002d5a:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002d5c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8002d60:	4628      	mov	r0, r5
 8002d62:	f002 ff7a 	bl	8005c5a <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8002d66:	4632      	mov	r2, r6
 8002d68:	7b21      	ldrb	r1, [r4, #12]
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f002 ff75 	bl	8005c5a <USBH_LL_SetToggle>
      status = USBH_OK;
 8002d70:	4630      	mov	r0, r6
 8002d72:	e776      	b.n	8002c62 <USBH_CDC_InterfaceInit+0x18>

08002d74 <USBH_CDC_ClassRequest>:
{
 8002d74:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002d76:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002d7a:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002d7c:	23a1      	movs	r3, #161	; 0xa1
 8002d7e:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002d80:	2321      	movs	r3, #33	; 0x21
 8002d82:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002d84:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002d8a:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002d8c:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002d8e:	3140      	adds	r1, #64	; 0x40
{
 8002d90:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002d92:	f000 fb6d 	bl	8003470 <USBH_CtlReq>
  if(status == USBH_OK)
 8002d96:	4605      	mov	r5, r0
 8002d98:	b920      	cbnz	r0, 8002da4 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8002d9a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4620      	mov	r0, r4
 8002da2:	4798      	blx	r3
}
 8002da4:	4628      	mov	r0, r5
 8002da6:	bd38      	pop	{r3, r4, r5, pc}

08002da8 <USBH_CDC_TransmitCallback>:
 8002da8:	4770      	bx	lr

08002daa <USBH_CDC_ReceiveCallback>:
 8002daa:	4770      	bx	lr

08002dac <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8002dac:	4770      	bx	lr

08002dae <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002dae:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8002db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002db4:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8002db6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8002dba:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d817      	bhi.n	8002df0 <USBH_CDC_Process+0x42>
 8002dc0:	e8df f003 	tbb	[pc, r3]
 8002dc4:	42180603 	.word	0x42180603
 8002dc8:	ba          	.byte	0xba
 8002dc9:	00          	.byte	0x00
    status = USBH_OK;
 8002dca:	2000      	movs	r0, #0
}
 8002dcc:	b003      	add	sp, #12
 8002dce:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002dd0:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8002dd2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002dd4:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002dda:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002de0:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002de2:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002de4:	f000 fb44 	bl	8003470 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002de8:	bb50      	cbnz	r0, 8002e40 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8002dea:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8002dec:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8002df0:	2001      	movs	r0, #1
 8002df2:	e7eb      	b.n	8002dcc <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002df4:	23a1      	movs	r3, #161	; 0xa1
 8002df6:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002df8:	2321      	movs	r3, #33	; 0x21
 8002dfa:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002dfc:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002e02:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002e04:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002e06:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002e0a:	f000 fb31 	bl	8003470 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002e0e:	b9b8      	cbnz	r0, 8002e40 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8002e10:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002e12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8002e14:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8002e18:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002e22:	4291      	cmp	r1, r2
 8002e24:	d1e4      	bne.n	8002df0 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8002e26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e2a:	795a      	ldrb	r2, [r3, #5]
 8002e2c:	4291      	cmp	r1, r2
 8002e2e:	d1df      	bne.n	8002df0 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8002e30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1db      	bne.n	8002df0 <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f7ff ffb7 	bl	8002dac <USBH_CDC_LineCodingChanged>
 8002e3e:	e7d7      	b.n	8002df0 <USBH_CDC_Process+0x42>
      if(req_status != USBH_BUSY)
 8002e40:	2801      	cmp	r0, #1
 8002e42:	d0d5      	beq.n	8002df0 <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_ERROR_STATE;
 8002e44:	2304      	movs	r3, #4
 8002e46:	e7d1      	b.n	8002dec <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8002e48:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8002e4c:	2901      	cmp	r1, #1
 8002e4e:	d02b      	beq.n	8002ea8 <USBH_CDC_Process+0xfa>
 8002e50:	2902      	cmp	r1, #2
 8002e52:	d038      	beq.n	8002ec6 <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002e54:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002e58:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8002e5a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d059      	beq.n	8002f16 <USBH_CDC_Process+0x168>
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d1c4      	bne.n	8002df0 <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8002e66:	7b21      	ldrb	r1, [r4, #12]
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f002 fee5 	bl	8005c38 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8002e6e:	2801      	cmp	r0, #1
 8002e70:	d1be      	bne.n	8002df0 <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8002e72:	7b21      	ldrb	r1, [r4, #12]
 8002e74:	4628      	mov	r0, r5
 8002e76:	f002 fe9b 	bl	8005bb0 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8002e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e7c:	4298      	cmp	r0, r3
 8002e7e:	d054      	beq.n	8002f2a <USBH_CDC_Process+0x17c>
 8002e80:	8b62      	ldrh	r2, [r4, #26]
 8002e82:	4290      	cmp	r0, r2
 8002e84:	d951      	bls.n	8002f2a <USBH_CDC_Process+0x17c>
        CDC_Handle->RxDataLength -= length ;
 8002e86:	1a1b      	subs	r3, r3, r0
 8002e88:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8002e8a:	6a23      	ldr	r3, [r4, #32]
 8002e8c:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002e8e:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 8002e90:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002e92:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8002e96:	2104      	movs	r1, #4
 8002e98:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8002ea2:	f000 fdf1 	bl	8003a88 <osMessagePut>
 8002ea6:	e7a3      	b.n	8002df0 <USBH_CDC_Process+0x42>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002eaa:	8b22      	ldrh	r2, [r4, #24]
 8002eac:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8002eae:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002eb0:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8002eb2:	bf98      	it	ls
 8002eb4:	b282      	uxthls	r2, r0
 8002eb6:	69e1      	ldr	r1, [r4, #28]
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f000 fd3e 	bl	800393a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8002ec4:	e7c6      	b.n	8002e54 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8002ec6:	7b61      	ldrb	r1, [r4, #13]
 8002ec8:	f002 feb6 	bl	8005c38 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8002ecc:	2801      	cmp	r0, #1
 8002ece:	d11f      	bne.n	8002f10 <USBH_CDC_Process+0x162>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ed2:	8b22      	ldrh	r2, [r4, #24]
 8002ed4:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8002ed6:	bf83      	ittte	hi
 8002ed8:	1a9b      	subhi	r3, r3, r2
 8002eda:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002edc:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8002ede:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002ee0:	bf8a      	itet	hi
 8002ee2:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8002ee4:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002ee6:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8002ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eea:	b11b      	cbz	r3, 8002ef4 <USBH_CDC_Process+0x146>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8002ef2:	e004      	b.n	8002efe <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8002ef4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f7ff ff55 	bl	8002da8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8002efe:	2104      	movs	r1, #4
 8002f00:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
 8002f0a:	f000 fdbd 	bl	8003a88 <osMessagePut>
 8002f0e:	e7a1      	b.n	8002e54 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8002f10:	2802      	cmp	r0, #2
 8002f12:	d19f      	bne.n	8002e54 <USBH_CDC_Process+0xa6>
 8002f14:	e7ea      	b.n	8002eec <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 8002f16:	7b23      	ldrb	r3, [r4, #12]
 8002f18:	8b62      	ldrh	r2, [r4, #26]
 8002f1a:	6a21      	ldr	r1, [r4, #32]
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 fd23 	bl	8003968 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8002f22:	2304      	movs	r3, #4
 8002f24:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 8002f28:	e762      	b.n	8002df0 <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7ff ff3a 	bl	8002daa <USBH_CDC_ReceiveCallback>
 8002f36:	e7ae      	b.n	8002e96 <USBH_CDC_Process+0xe8>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f000 fcb8 	bl	80038ae <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	f47f af56 	bne.w	8002df0 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8002f44:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8002f48:	e752      	b.n	8002df0 <USBH_CDC_Process+0x42>

08002f4a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8002f4a:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8002f4e:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8002f52:	2100      	movs	r1, #0
 8002f54:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d1fb      	bne.n	8002f54 <DeInitStateMachine+0xa>
 8002f5c:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002f60:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	d1fb      	bne.n	8002f66 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8002f6e:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002f70:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8002f72:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8002f74:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8002f76:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8002f78:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8002f7c:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002f7e:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8002f80:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8002f82:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8002f86:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	4770      	bx	lr
	...

08002f90 <USBH_Init>:
{
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	460c      	mov	r4, r1
 8002f94:	b08c      	sub	sp, #48	; 0x30
  if(phost == NULL)
 8002f96:	4606      	mov	r6, r0
 8002f98:	b358      	cbz	r0, 8002ff2 <USBH_Init+0x62>
  phost->pActiveClass = NULL;
 8002f9a:	2300      	movs	r3, #0
  phost->id = id;
 8002f9c:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8002fa0:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8002fa4:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8002fa8:	f7ff ffcf 	bl	8002f4a <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8002fac:	b10c      	cbz	r4, 8002fb2 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 8002fae:	f8c6 43c8 	str.w	r4, [r6, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8002fb2:	4c11      	ldr	r4, [pc, #68]	; (8002ff8 <USBH_Init+0x68>)
 8002fb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fb8:	ad01      	add	r5, sp, #4
 8002fba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 fd4d 	bl	8003a60 <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8002fc6:	3410      	adds	r4, #16
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8002fc8:	f8c6 03cc 	str.w	r0, [r6, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8002fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fce:	ad05      	add	r5, sp, #20
 8002fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002fd6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8002fda:	4631      	mov	r1, r6
 8002fdc:	a805      	add	r0, sp, #20
 8002fde:	f000 fd0f 	bl	8003a00 <osThreadCreate>
 8002fe2:	f8c6 03d0 	str.w	r0, [r6, #976]	; 0x3d0
  USBH_LL_Init(phost);
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f002 fd84 	bl	8005af4 <USBH_LL_Init>
  return USBH_OK;
 8002fec:	2000      	movs	r0, #0
}
 8002fee:	b00c      	add	sp, #48	; 0x30
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	e7fb      	b.n	8002fee <USBH_Init+0x5e>
 8002ff6:	bf00      	nop
 8002ff8:	080065cc 	.word	0x080065cc

08002ffc <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8002ffc:	b149      	cbz	r1, 8003012 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8002ffe:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003002:	b933      	cbnz	r3, 8003012 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003004:	2201      	movs	r2, #1
 8003006:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 800300a:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 800300e:	4618      	mov	r0, r3
 8003010:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8003012:	2002      	movs	r0, #2
  }

  return status;
}
 8003014:	4770      	bx	lr

08003016 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003016:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800301a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800301c:	bf86      	itte	hi
 800301e:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8003022:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8003024:	2002      	movls	r0, #2
  }
  return status;
}
 8003026:	4770      	bx	lr

08003028 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800302c:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8003030:	428e      	cmp	r6, r1
 8003032:	b2e5      	uxtb	r5, r4
 8003034:	d001      	beq.n	800303a <USBH_FindInterface+0x12>
 8003036:	29ff      	cmp	r1, #255	; 0xff
 8003038:	d10b      	bne.n	8003052 <USBH_FindInterface+0x2a>
 800303a:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 800303e:	4296      	cmp	r6, r2
 8003040:	d001      	beq.n	8003046 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8003042:	2aff      	cmp	r2, #255	; 0xff
 8003044:	d105      	bne.n	8003052 <USBH_FindInterface+0x2a>
 8003046:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800304a:	429e      	cmp	r6, r3
 800304c:	d007      	beq.n	800305e <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d005      	beq.n	800305e <USBH_FindInterface+0x36>
 8003052:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003054:	2c02      	cmp	r4, #2
 8003056:	f100 001a 	add.w	r0, r0, #26
 800305a:	d1e7      	bne.n	800302c <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800305c:	25ff      	movs	r5, #255	; 0xff
}
 800305e:	4628      	mov	r0, r5
 8003060:	bd70      	pop	{r4, r5, r6, pc}

08003062 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003062:	b510      	push	{r4, lr}
 8003064:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003066:	f002 fd6b 	bl	8005b40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800306a:	2101      	movs	r1, #1
 800306c:	4620      	mov	r0, r4
 800306e:	f002 fde7 	bl	8005c40 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003072:	2000      	movs	r0, #0
 8003074:	bd10      	pop	{r4, pc}

08003076 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003076:	b530      	push	{r4, r5, lr}
 8003078:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800307a:	2302      	movs	r3, #2
 800307c:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8003080:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8003084:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003086:	b933      	cbnz	r3, 8003096 <USBH_Process+0x20>
 8003088:	7802      	ldrb	r2, [r0, #0]
 800308a:	b122      	cbz	r2, 8003096 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800308c:	7802      	ldrb	r2, [r0, #0]
 800308e:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8003090:	bf1c      	itt	ne
 8003092:	2203      	movne	r2, #3
 8003094:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003096:	7822      	ldrb	r2, [r4, #0]
 8003098:	2a0b      	cmp	r2, #11
 800309a:	d820      	bhi.n	80030de <USBH_Process+0x68>
 800309c:	e8df f012 	tbh	[pc, r2, lsl #1]
 80030a0:	0022000c 	.word	0x0022000c
 80030a4:	01640027 	.word	0x01640027
 80030a8:	005b001f 	.word	0x005b001f
 80030ac:	01040149 	.word	0x01040149
 80030b0:	011c010f 	.word	0x011c010f
 80030b4:	015b0128 	.word	0x015b0128
    if (phost->device.is_connected)
 80030b8:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80030bc:	b17b      	cbz	r3, 80030de <USBH_Process+0x68>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80030be:	2501      	movs	r5, #1
      USBH_Delay(200U);
 80030c0:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80030c2:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 80030c4:	f002 fdd8 	bl	8005c78 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80030c8:	4620      	mov	r0, r4
 80030ca:	f002 fd63 	bl	8005b94 <USBH_LL_ResetPort>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80030ce:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80030d2:	2200      	movs	r2, #0
 80030d4:	4629      	mov	r1, r5
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80030d6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80030da:	f000 fcd5 	bl	8003a88 <osMessagePut>
}
 80030de:	2000      	movs	r0, #0
 80030e0:	b007      	add	sp, #28
 80030e2:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d1fa      	bne.n	80030de <USBH_Process+0x68>
      phost->gState = HOST_DEV_ATTACHED;
 80030e8:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 80030ea:	7023      	strb	r3, [r4, #0]
 80030ec:	e7f7      	b.n	80030de <USBH_Process+0x68>
    USBH_Delay(100U);
 80030ee:	2064      	movs	r0, #100	; 0x64
 80030f0:	f002 fdc2 	bl	8005c78 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f002 fd3f 	bl	8005b78 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80030fa:	2305      	movs	r3, #5
 80030fc:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80030fe:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003102:	2100      	movs	r1, #0
 8003104:	4620      	mov	r0, r4
 8003106:	f000 fc53 	bl	80039b0 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800310a:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800310c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800310e:	4620      	mov	r0, r4
 8003110:	f000 fc4e 	bl	80039b0 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8003114:	79a2      	ldrb	r2, [r4, #6]
 8003116:	9202      	str	r2, [sp, #8]
 8003118:	2500      	movs	r5, #0
 800311a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800311e:	7120      	strb	r0, [r4, #4]
 8003120:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8003122:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003126:	9200      	str	r2, [sp, #0]
 8003128:	9501      	str	r5, [sp, #4]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	4620      	mov	r0, r4
 800312e:	f000 fc2b 	bl	8003988 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 8003132:	79a2      	ldrb	r2, [r4, #6]
 8003134:	9202      	str	r2, [sp, #8]
 8003136:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800313a:	7961      	ldrb	r1, [r4, #5]
 800313c:	9200      	str	r2, [sp, #0]
 800313e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003142:	9501      	str	r5, [sp, #4]
 8003144:	462a      	mov	r2, r5
 8003146:	4620      	mov	r0, r4
 8003148:	f000 fc1e 	bl	8003988 <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800314c:	2101      	movs	r1, #1
 800314e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003152:	462a      	mov	r2, r5
 8003154:	e7bf      	b.n	80030d6 <USBH_Process+0x60>
  switch (phost->EnumState)
 8003156:	7863      	ldrb	r3, [r4, #1]
 8003158:	2b07      	cmp	r3, #7
 800315a:	d8c0      	bhi.n	80030de <USBH_Process+0x68>
 800315c:	e8df f003 	tbb	[pc, r3]
 8003160:	45332a04 	.word	0x45332a04
 8003164:	8373584e 	.word	0x8373584e
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8003168:	2108      	movs	r1, #8
 800316a:	4620      	mov	r0, r4
 800316c:	f000 fa78 	bl	8003660 <USBH_Get_DevDesc>
 8003170:	4605      	mov	r5, r0
 8003172:	2800      	cmp	r0, #0
 8003174:	d1b3      	bne.n	80030de <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003176:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003178:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800317c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800317e:	7921      	ldrb	r1, [r4, #4]
 8003180:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003184:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8003186:	9202      	str	r2, [sp, #8]
 8003188:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800318c:	9200      	str	r2, [sp, #0]
 800318e:	9501      	str	r5, [sp, #4]
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	4620      	mov	r0, r4
 8003194:	f000 fbf8 	bl	8003988 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8003198:	79a2      	ldrb	r2, [r4, #6]
 800319a:	9202      	str	r2, [sp, #8]
 800319c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80031a0:	9200      	str	r2, [sp, #0]
 80031a2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80031a6:	7961      	ldrb	r1, [r4, #5]
 80031a8:	9501      	str	r5, [sp, #4]
 80031aa:	462a      	mov	r2, r5
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 fbeb 	bl	8003988 <USBH_OpenPipe>
 80031b2:	e794      	b.n	80030de <USBH_Process+0x68>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80031b4:	2112      	movs	r1, #18
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 fa52 	bl	8003660 <USBH_Get_DevDesc>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d18e      	bne.n	80030de <USBH_Process+0x68>
      phost->EnumState = ENUM_SET_ADDR;
 80031c0:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80031c2:	7063      	strb	r3, [r4, #1]
 80031c4:	e78b      	b.n	80030de <USBH_Process+0x68>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80031c6:	2101      	movs	r1, #1
 80031c8:	4620      	mov	r0, r4
 80031ca:	f000 fb46 	bl	800385a <USBH_SetAddress>
 80031ce:	4605      	mov	r5, r0
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d184      	bne.n	80030de <USBH_Process+0x68>
      USBH_Delay(2U);
 80031d4:	2002      	movs	r0, #2
 80031d6:	f002 fd4f 	bl	8005c78 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 80031da:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 80031dc:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 80031de:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 80031e0:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 80031e4:	7921      	ldrb	r1, [r4, #4]
 80031e6:	79a2      	ldrb	r2, [r4, #6]
 80031e8:	e7cd      	b.n	8003186 <USBH_Process+0x110>
    if ( USBH_Get_CfgDesc(phost,
 80031ea:	2109      	movs	r1, #9
 80031ec:	4620      	mov	r0, r4
 80031ee:	f000 fa7f 	bl	80036f0 <USBH_Get_CfgDesc>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	f47f af73 	bne.w	80030de <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80031f8:	2304      	movs	r3, #4
 80031fa:	e7e2      	b.n	80031c2 <USBH_Process+0x14c>
    if (USBH_Get_CfgDesc(phost,
 80031fc:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8003200:	4620      	mov	r0, r4
 8003202:	f000 fa75 	bl	80036f0 <USBH_Get_CfgDesc>
 8003206:	2800      	cmp	r0, #0
 8003208:	f47f af69 	bne.w	80030de <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800320c:	2305      	movs	r3, #5
 800320e:	e7d8      	b.n	80031c2 <USBH_Process+0x14c>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8003210:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8003214:	b179      	cbz	r1, 8003236 <USBH_Process+0x1c0>
      if ( USBH_Get_StringDesc(phost,
 8003216:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800321a:	23ff      	movs	r3, #255	; 0xff
 800321c:	4620      	mov	r0, r4
 800321e:	f000 faf5 	bl	800380c <USBH_Get_StringDesc>
 8003222:	4602      	mov	r2, r0
 8003224:	2800      	cmp	r0, #0
 8003226:	f47f af5a 	bne.w	80030de <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800322a:	2306      	movs	r3, #6
 800322c:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800322e:	2105      	movs	r1, #5
 8003230:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 8003234:	e74f      	b.n	80030d6 <USBH_Process+0x60>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003236:	2306      	movs	r3, #6
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003238:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800323a:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800323c:	460a      	mov	r2, r1
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800323e:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003242:	4619      	mov	r1, r3
 8003244:	e747      	b.n	80030d6 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 8003246:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800324a:	b151      	cbz	r1, 8003262 <USBH_Process+0x1ec>
      if ( USBH_Get_StringDesc(phost,
 800324c:	23ff      	movs	r3, #255	; 0xff
 800324e:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003252:	4620      	mov	r0, r4
 8003254:	f000 fada 	bl	800380c <USBH_Get_StringDesc>
 8003258:	2800      	cmp	r0, #0
 800325a:	f47f af40 	bne.w	80030de <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800325e:	2307      	movs	r3, #7
 8003260:	e7af      	b.n	80031c2 <USBH_Process+0x14c>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003262:	2307      	movs	r3, #7
 8003264:	e7e8      	b.n	8003238 <USBH_Process+0x1c2>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8003266:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800326a:	b189      	cbz	r1, 8003290 <USBH_Process+0x21a>
      if ( USBH_Get_StringDesc(phost,
 800326c:	23ff      	movs	r3, #255	; 0xff
 800326e:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003272:	4620      	mov	r0, r4
 8003274:	f000 faca 	bl	800380c <USBH_Get_StringDesc>
 8003278:	2800      	cmp	r0, #0
 800327a:	f47f af30 	bne.w	80030de <USBH_Process+0x68>
      phost->device.current_interface = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8003284:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8003288:	2b01      	cmp	r3, #1
 800328a:	d10b      	bne.n	80032a4 <USBH_Process+0x22e>
        phost->gState  = HOST_SET_CONFIGURATION;
 800328c:	2308      	movs	r3, #8
 800328e:	e72c      	b.n	80030ea <USBH_Process+0x74>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003290:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003292:	460a      	mov	r2, r1
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003294:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003298:	4619      	mov	r1, r3
 800329a:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800329e:	f000 fbf3 	bl	8003a88 <osMessagePut>
 80032a2:	e7ec      	b.n	800327e <USBH_Process+0x208>
        phost->gState  = HOST_INPUT;
 80032a4:	2307      	movs	r3, #7
 80032a6:	e720      	b.n	80030ea <USBH_Process+0x74>
      if(phost->pUser != NULL)
 80032a8:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f43f af16 	beq.w	80030de <USBH_Process+0x68>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80032b2:	2101      	movs	r1, #1
 80032b4:	4620      	mov	r0, r4
 80032b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80032b8:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 80032ba:	7023      	strb	r3, [r4, #0]
 80032bc:	e035      	b.n	800332a <USBH_Process+0x2b4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80032be:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 fad7 	bl	8003876 <USBH_SetCfg>
 80032c8:	b908      	cbnz	r0, 80032ce <USBH_Process+0x258>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80032ca:	2309      	movs	r3, #9
      phost->gState  = HOST_CHECK_CLASS;
 80032cc:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80032ce:	2101      	movs	r1, #1
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80032d0:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	e6fe      	b.n	80030d6 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80032d8:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80032dc:	069b      	lsls	r3, r3, #26
 80032de:	d505      	bpl.n	80032ec <USBH_Process+0x276>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80032e0:	2101      	movs	r1, #1
 80032e2:	4620      	mov	r0, r4
 80032e4:	f000 fad5 	bl	8003892 <USBH_SetFeature>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d1f0      	bne.n	80032ce <USBH_Process+0x258>
      phost->gState  = HOST_CHECK_CLASS;
 80032ec:	230a      	movs	r3, #10
 80032ee:	e7ed      	b.n	80032cc <USBH_Process+0x256>
    if(phost->ClassNumber == 0U)
 80032f0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80032f4:	b1cb      	cbz	r3, 800332a <USBH_Process+0x2b4>
      phost->pActiveClass = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80032fc:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003300:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8003304:	7919      	ldrb	r1, [r3, #4]
 8003306:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8003308:	bf08      	it	eq
 800330a:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800330e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003312:	b163      	cbz	r3, 800332e <USBH_Process+0x2b8>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4620      	mov	r0, r4
 8003318:	4798      	blx	r3
 800331a:	b940      	cbnz	r0, 800332e <USBH_Process+0x2b8>
          phost->gState  = HOST_CLASS_REQUEST;
 800331c:	2306      	movs	r3, #6
 800331e:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003320:	2103      	movs	r1, #3
 8003322:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003326:	4620      	mov	r0, r4
 8003328:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800332a:	2105      	movs	r1, #5
 800332c:	e7d0      	b.n	80032d0 <USBH_Process+0x25a>
        phost->gState  = HOST_ABORT_STATE;
 800332e:	230d      	movs	r3, #13
 8003330:	e7c3      	b.n	80032ba <USBH_Process+0x244>
    if(phost->pActiveClass != NULL)
 8003332:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
 8003336:	b15a      	cbz	r2, 8003350 <USBH_Process+0x2da>
      status = phost->pActiveClass->Requests(phost);
 8003338:	6913      	ldr	r3, [r2, #16]
 800333a:	4620      	mov	r0, r4
 800333c:	4798      	blx	r3
 800333e:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003342:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f47f aec9 	bne.w	80030de <USBH_Process+0x68>
        phost->gState  = HOST_CLASS;
 800334c:	230b      	movs	r3, #11
 800334e:	e6cc      	b.n	80030ea <USBH_Process+0x74>
      phost->gState  = HOST_ABORT_STATE;
 8003350:	230d      	movs	r3, #13
 8003352:	7023      	strb	r3, [r4, #0]
 8003354:	e76b      	b.n	800322e <USBH_Process+0x1b8>
    if(phost->pActiveClass != NULL)
 8003356:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800335a:	2b00      	cmp	r3, #0
 800335c:	f43f aebf 	beq.w	80030de <USBH_Process+0x68>
      phost->pActiveClass->BgndProcess(phost);
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4620      	mov	r0, r4
 8003364:	4798      	blx	r3
 8003366:	e6ba      	b.n	80030de <USBH_Process+0x68>
    DeInitStateMachine(phost);
 8003368:	4620      	mov	r0, r4
 800336a:	f7ff fdee 	bl	8002f4a <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800336e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003372:	2b00      	cmp	r3, #0
 8003374:	f43f aeb3 	beq.w	80030de <USBH_Process+0x68>
      phost->pActiveClass->DeInit(phost);
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4620      	mov	r0, r4
 800337c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 8003384:	e6ab      	b.n	80030de <USBH_Process+0x68>

08003386 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8003386:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003388:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800338a:	f04f 32ff 	mov.w	r2, #4294967295
 800338e:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 8003392:	a801      	add	r0, sp, #4
 8003394:	f000 fba0 	bl	8003ad8 <osMessageGet>
    if(event.status == osEventMessage)
 8003398:	9b01      	ldr	r3, [sp, #4]
 800339a:	2b10      	cmp	r3, #16
 800339c:	d1f5      	bne.n	800338a <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fe69 	bl	8003076 <USBH_Process>
 80033a4:	e7f1      	b.n	800338a <USBH_Process_OS+0x4>

080033a6 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80033a6:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80033aa:	4770      	bx	lr

080033ac <USBH_LL_IncTimer>:
  phost->Timer ++;
 80033ac:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80033b0:	3201      	adds	r2, #1
 80033b2:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80033b6:	7802      	ldrb	r2, [r0, #0]
 80033b8:	2a0b      	cmp	r2, #11
 80033ba:	d104      	bne.n	80033c6 <USBH_LL_IncTimer+0x1a>
 80033bc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80033c0:	b10b      	cbz	r3, 80033c6 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4718      	bx	r3
 80033c6:	4770      	bx	lr

080033c8 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80033ce:	4770      	bx	lr

080033d0 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80033d6:	4770      	bx	lr

080033d8 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 80033d8:	7803      	ldrb	r3, [r0, #0]
{
 80033da:	b510      	push	{r4, lr}
 80033dc:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 80033de:	b98b      	cbnz	r3, 8003404 <USBH_LL_Connect+0x2c>
    phost->device.is_connected = 1U;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80033e6:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80033ea:	b10b      	cbz	r3, 80033f0 <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 80033ec:	2104      	movs	r1, #4
 80033ee:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80033f0:	2101      	movs	r1, #1
 80033f2:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80033fc:	f000 fb44 	bl	8003a88 <osMessagePut>
}
 8003400:	2000      	movs	r0, #0
 8003402:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 8003404:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8003408:	2b01      	cmp	r3, #1
      phost->gState = HOST_DEV_ATTACHED;
 800340a:	bf04      	itt	eq
 800340c:	2302      	moveq	r3, #2
 800340e:	7003      	strbeq	r3, [r0, #0]
 8003410:	e7ee      	b.n	80033f0 <USBH_LL_Connect+0x18>

08003412 <USBH_LL_Disconnect>:
{
 8003412:	b510      	push	{r4, lr}
 8003414:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 8003416:	f002 fba1 	bl	8005b5c <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800341a:	7921      	ldrb	r1, [r4, #4]
 800341c:	4620      	mov	r0, r4
 800341e:	f000 fade 	bl	80039de <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8003422:	7961      	ldrb	r1, [r4, #5]
 8003424:	4620      	mov	r0, r4
 8003426:	f000 fada 	bl	80039de <USBH_FreePipe>
  phost->device.is_connected = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8003430:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003434:	b113      	cbz	r3, 800343c <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003436:	2105      	movs	r1, #5
 8003438:	4620      	mov	r0, r4
 800343a:	4798      	blx	r3
  USBH_LL_Start(phost);
 800343c:	4620      	mov	r0, r4
 800343e:	f002 fb7f 	bl	8005b40 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 8003442:	2303      	movs	r3, #3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003444:	2101      	movs	r1, #1
  phost->gState = HOST_DEV_DISCONNECTED;
 8003446:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003448:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800344c:	2200      	movs	r2, #0
 800344e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8003452:	f000 fb19 	bl	8003a88 <osMessagePut>
}
 8003456:	2000      	movs	r0, #0
 8003458:	bd10      	pop	{r4, pc}

0800345a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800345a:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800345c:	2101      	movs	r1, #1
 800345e:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003462:	2200      	movs	r2, #0
 8003464:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8003468:	f000 fb0e 	bl	8003a88 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800346c:	2000      	movs	r0, #0
 800346e:	bd08      	pop	{r3, pc}

08003470 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003470:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003472:	7885      	ldrb	r5, [r0, #2]
 8003474:	2d01      	cmp	r5, #1
{
 8003476:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8003478:	d003      	beq.n	8003482 <USBH_CtlReq+0x12>
 800347a:	2d02      	cmp	r5, #2
 800347c:	d00f      	beq.n	800349e <USBH_CtlReq+0x2e>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800347e:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003480:	e057      	b.n	8003532 <USBH_CtlReq+0xc2>
    phost->RequestState = CMD_WAIT;
 8003482:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8003484:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8003486:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8003488:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 800348a:	7083      	strb	r3, [r0, #2]
          phost->Control.state = CTRL_STATUS_IN;
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800348c:	2103      	movs	r1, #3
 800348e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003492:	2200      	movs	r2, #0
 8003494:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8003498:	f000 faf6 	bl	8003a88 <osMessagePut>
 800349c:	e7ef      	b.n	800347e <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 800349e:	7e03      	ldrb	r3, [r0, #24]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	2101      	movs	r1, #1
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d8ea      	bhi.n	800347e <USBH_CtlReq+0xe>
 80034a8:	e8df f003 	tbb	[pc, r3]
 80034ac:	2f250e06 	.word	0x2f250e06
 80034b0:	7a705045 	.word	0x7a705045
 80034b4:	a196      	.short	0xa196
 80034b6:	ab          	.byte	0xab
 80034b7:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80034b8:	7942      	ldrb	r2, [r0, #5]
 80034ba:	f100 0110 	add.w	r1, r0, #16
 80034be:	f000 fa04 	bl	80038ca <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80034c2:	2302      	movs	r3, #2
    USBH_CtlReceiveData(phost,
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80034c4:	7623      	strb	r3, [r4, #24]
 80034c6:	e7da      	b.n	800347e <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80034c8:	7941      	ldrb	r1, [r0, #5]
 80034ca:	f002 fbb5 	bl	8005c38 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80034ce:	2801      	cmp	r0, #1
 80034d0:	d10c      	bne.n	80034ec <USBH_CtlReq+0x7c>
      if (phost->Control.setup.b.wLength.w != 0U)
 80034d2:	8ae2      	ldrh	r2, [r4, #22]
 80034d4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80034d8:	b122      	cbz	r2, 80034e4 <USBH_CtlReq+0x74>
        if (direction == USB_D2H)
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da44      	bge.n	8003568 <USBH_CtlReq+0xf8>
          phost->Control.state = CTRL_DATA_IN;
 80034de:	2303      	movs	r3, #3
          phost->Control.state = CTRL_STATUS_IN;
 80034e0:	7623      	strb	r3, [r4, #24]
 80034e2:	e7d3      	b.n	800348c <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da36      	bge.n	8003556 <USBH_CtlReq+0xe6>
#endif
#endif
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80034e8:	2309      	movs	r3, #9
 80034ea:	e7f9      	b.n	80034e0 <USBH_CtlReq+0x70>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80034ec:	2804      	cmp	r0, #4
 80034ee:	d06d      	beq.n	80035cc <USBH_CtlReq+0x15c>
 80034f0:	2802      	cmp	r0, #2
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80034f2:	d1c4      	bne.n	800347e <USBH_CtlReq+0xe>
 80034f4:	e06a      	b.n	80035cc <USBH_CtlReq+0x15c>
    phost->Control.timer = (uint16_t)phost->Timer;
 80034f6:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 80034fa:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 80034fc:	8982      	ldrh	r2, [r0, #12]
 80034fe:	7903      	ldrb	r3, [r0, #4]
 8003500:	6881      	ldr	r1, [r0, #8]
 8003502:	f000 fa0a 	bl	800391a <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8003506:	2304      	movs	r3, #4
 8003508:	e7dc      	b.n	80034c4 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800350a:	7901      	ldrb	r1, [r0, #4]
 800350c:	f002 fb94 	bl	8005c38 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003510:	2801      	cmp	r0, #1
 8003512:	d0e9      	beq.n	80034e8 <USBH_CtlReq+0x78>
    if  (URB_Status == USBH_URB_STALL)
 8003514:	2805      	cmp	r0, #5
 8003516:	d172      	bne.n	80035fe <USBH_CtlReq+0x18e>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003518:	2103      	movs	r1, #3
 800351a:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800351e:	2200      	movs	r2, #0
 8003520:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8003524:	f000 fab0 	bl	8003a88 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8003528:	2301      	movs	r3, #1
 800352a:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800352c:	2300      	movs	r3, #0
 800352e:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8003530:	2003      	movs	r0, #3
}
 8003532:	b003      	add	sp, #12
 8003534:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 8003536:	7943      	ldrb	r3, [r0, #5]
 8003538:	8982      	ldrh	r2, [r0, #12]
 800353a:	9100      	str	r1, [sp, #0]
 800353c:	6881      	ldr	r1, [r0, #8]
 800353e:	f000 f9d5 	bl	80038ec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003542:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003546:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003548:	2306      	movs	r3, #6
 800354a:	e7bb      	b.n	80034c4 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800354c:	7941      	ldrb	r1, [r0, #5]
 800354e:	f002 fb73 	bl	8005c38 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003552:	2801      	cmp	r0, #1
 8003554:	d101      	bne.n	800355a <USBH_CtlReq+0xea>
          phost->Control.state = CTRL_STATUS_IN;
 8003556:	2307      	movs	r3, #7
 8003558:	e7c2      	b.n	80034e0 <USBH_CtlReq+0x70>
    else if  (URB_Status == USBH_URB_STALL)
 800355a:	2805      	cmp	r0, #5
 800355c:	d102      	bne.n	8003564 <USBH_CtlReq+0xf4>
      phost->Control.state = CTRL_STALLED;
 800355e:	230c      	movs	r3, #12
 8003560:	7623      	strb	r3, [r4, #24]
 8003562:	e7d9      	b.n	8003518 <USBH_CtlReq+0xa8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003564:	2802      	cmp	r0, #2
 8003566:	d101      	bne.n	800356c <USBH_CtlReq+0xfc>
      phost->Control.state = CTRL_DATA_OUT;
 8003568:	2305      	movs	r3, #5
 800356a:	e7b9      	b.n	80034e0 <USBH_CtlReq+0x70>
      if (URB_Status == USBH_URB_ERROR)
 800356c:	2804      	cmp	r0, #4
 800356e:	d186      	bne.n	800347e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8003570:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003572:	2103      	movs	r1, #3
        phost->Control.state = CTRL_ERROR;
 8003574:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003576:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800357a:	2200      	movs	r2, #0
 800357c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8003580:	f000 fa82 	bl	8003a88 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8003584:	2301      	movs	r3, #1
 8003586:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8003588:	2002      	movs	r0, #2
 800358a:	e7d2      	b.n	8003532 <USBH_CtlReq+0xc2>
    USBH_CtlReceiveData (phost,
 800358c:	2200      	movs	r2, #0
 800358e:	7903      	ldrb	r3, [r0, #4]
 8003590:	4611      	mov	r1, r2
 8003592:	f000 f9c2 	bl	800391a <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003596:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800359a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800359c:	2308      	movs	r3, #8
 800359e:	e791      	b.n	80034c4 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80035a0:	7901      	ldrb	r1, [r0, #4]
 80035a2:	f002 fb49 	bl	8005c38 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80035a6:	2801      	cmp	r0, #1
 80035a8:	d10e      	bne.n	80035c8 <USBH_CtlReq+0x158>
      phost->Control.state = CTRL_COMPLETE;
 80035aa:	230d      	movs	r3, #13
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80035ac:	2103      	movs	r1, #3
      phost->Control.state = CTRL_COMPLETE;
 80035ae:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80035b0:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80035ba:	f000 fa65 	bl	8003a88 <osMessagePut>
      phost->RequestState = CMD_SEND;
 80035be:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 80035c0:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80035c2:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 80035c4:	7620      	strb	r0, [r4, #24]
 80035c6:	e7b4      	b.n	8003532 <USBH_CtlReq+0xc2>
    else if (URB_Status == USBH_URB_ERROR)
 80035c8:	2804      	cmp	r0, #4
 80035ca:	d101      	bne.n	80035d0 <USBH_CtlReq+0x160>
      {
        phost->Control.state = CTRL_ERROR;
 80035cc:	230b      	movs	r3, #11
 80035ce:	e787      	b.n	80034e0 <USBH_CtlReq+0x70>
      if(URB_Status == USBH_URB_STALL)
 80035d0:	2805      	cmp	r0, #5
 80035d2:	f47f af54 	bne.w	800347e <USBH_CtlReq+0xe>
 80035d6:	e79f      	b.n	8003518 <USBH_CtlReq+0xa8>
    USBH_CtlSendData (phost,
 80035d8:	2200      	movs	r2, #0
 80035da:	7943      	ldrb	r3, [r0, #5]
 80035dc:	9100      	str	r1, [sp, #0]
 80035de:	4611      	mov	r1, r2
 80035e0:	f000 f984 	bl	80038ec <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80035e4:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80035e8:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80035ea:	230a      	movs	r3, #10
 80035ec:	e76a      	b.n	80034c4 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80035ee:	7941      	ldrb	r1, [r0, #5]
 80035f0:	f002 fb22 	bl	8005c38 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80035f4:	2801      	cmp	r0, #1
 80035f6:	d0d8      	beq.n	80035aa <USBH_CtlReq+0x13a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80035f8:	2802      	cmp	r0, #2
 80035fa:	f43f af75 	beq.w	80034e8 <USBH_CtlReq+0x78>
      if (URB_Status == USBH_URB_ERROR)
 80035fe:	2804      	cmp	r0, #4
 8003600:	e777      	b.n	80034f2 <USBH_CtlReq+0x82>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003602:	7e43      	ldrb	r3, [r0, #25]
 8003604:	3301      	adds	r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	7643      	strb	r3, [r0, #25]
 800360c:	d805      	bhi.n	800361a <USBH_CtlReq+0x1aa>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800360e:	f002 faa5 	bl	8005b5c <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8003612:	2301      	movs	r3, #1
 8003614:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003616:	70a3      	strb	r3, [r4, #2]
 8003618:	e731      	b.n	800347e <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800361a:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800361e:	2106      	movs	r1, #6
 8003620:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	7663      	strb	r3, [r4, #25]
 8003626:	e7ad      	b.n	8003584 <USBH_CtlReq+0x114>

08003628 <USBH_GetDescriptor>:
{
 8003628:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800362a:	7884      	ldrb	r4, [r0, #2]
{
 800362c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8003630:	2c01      	cmp	r4, #1
 8003632:	d110      	bne.n	8003656 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003634:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8003638:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800363a:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 800363e:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8003642:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003644:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8003648:	bf0c      	ite	eq
 800364a:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800364e:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003650:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8003652:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8003654:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8003656:	462a      	mov	r2, r5
 8003658:	4619      	mov	r1, r3
}
 800365a:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800365c:	f7ff bf08 	b.w	8003470 <USBH_CtlReq>

08003660 <USBH_Get_DevDesc>:
{
 8003660:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003662:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003666:	460d      	mov	r5, r1
 8003668:	9100      	str	r1, [sp, #0]
 800366a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366e:	2100      	movs	r1, #0
{
 8003670:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003672:	f7ff ffd9 	bl	8003628 <USBH_GetDescriptor>
 8003676:	bbc8      	cbnz	r0, 80036ec <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003678:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800367c:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003680:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003684:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003688:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800368c:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003690:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003694:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003698:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800369c:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80036a0:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80036a4:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 80036a8:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80036aa:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80036ae:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 80036b2:	d91b      	bls.n	80036ec <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 80036b4:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 80036b8:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 80036bc:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 80036c0:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80036c4:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 80036c8:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80036cc:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80036d0:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80036d4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 80036d8:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80036dc:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80036e0:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80036e4:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80036e8:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 80036ec:	b003      	add	sp, #12
 80036ee:	bd30      	pop	{r4, r5, pc}

080036f0 <USBH_Get_CfgDesc>:
{
 80036f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 80036f4:	f100 051c 	add.w	r5, r0, #28
{
 80036f8:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 80036fa:	9100      	str	r1, [sp, #0]
 80036fc:	462b      	mov	r3, r5
 80036fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003702:	2100      	movs	r1, #0
{
 8003704:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003706:	f7ff ff8f 	bl	8003628 <USBH_GetDescriptor>
 800370a:	bb48      	cbnz	r0, 8003760 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800370c:	7f23      	ldrb	r3, [r4, #28]
 800370e:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003712:	7f63      	ldrb	r3, [r4, #29]
 8003714:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003718:	f894 3020 	ldrb.w	r3, [r4, #32]
 800371c:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8003720:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003724:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8003728:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800372c:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003730:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003734:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003738:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800373c:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800373e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003742:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003746:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800374a:	d909      	bls.n	8003760 <USBH_Get_CfgDesc+0x70>
 800374c:	4627      	mov	r7, r4
 800374e:	462b      	mov	r3, r5
 8003750:	4606      	mov	r6, r0
 8003752:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003754:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8003758:	2e02      	cmp	r6, #2
 800375a:	d001      	beq.n	8003760 <USBH_Get_CfgDesc+0x70>
 800375c:	4596      	cmp	lr, r2
 800375e:	d802      	bhi.n	8003766 <USBH_Get_CfgDesc+0x76>
}
 8003760:	b003      	add	sp, #12
 8003762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003766:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003768:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800376a:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800376c:	7859      	ldrb	r1, [r3, #1]
 800376e:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003770:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003772:	d1f1      	bne.n	8003758 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003774:	7819      	ldrb	r1, [r3, #0]
 8003776:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800377a:	7859      	ldrb	r1, [r3, #1]
 800377c:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8003780:	7899      	ldrb	r1, [r3, #2]
 8003782:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003786:	78d9      	ldrb	r1, [r3, #3]
 8003788:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800378c:	7919      	ldrb	r1, [r3, #4]
 800378e:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8003792:	7959      	ldrb	r1, [r3, #5]
 8003794:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003798:	7999      	ldrb	r1, [r3, #6]
 800379a:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800379e:	79d9      	ldrb	r1, [r3, #7]
 80037a0:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80037a4:	7a19      	ldrb	r1, [r3, #8]
 80037a6:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80037aa:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 80037ae:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80037b0:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 80037b4:	428d      	cmp	r5, r1
 80037b6:	d802      	bhi.n	80037be <USBH_Get_CfgDesc+0xce>
 80037b8:	3601      	adds	r6, #1
 80037ba:	371a      	adds	r7, #26
 80037bc:	e7cc      	b.n	8003758 <USBH_Get_CfgDesc+0x68>
 80037be:	4596      	cmp	lr, r2
 80037c0:	d9fa      	bls.n	80037b8 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80037c2:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80037c4:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80037c6:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80037c8:	785d      	ldrb	r5, [r3, #1]
 80037ca:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80037cc:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80037ce:	d1ef      	bne.n	80037b0 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80037d0:	1c4d      	adds	r5, r1, #1
 80037d2:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 80037d6:	4421      	add	r1, r4
 80037d8:	f893 9000 	ldrb.w	r9, [r3]
 80037dc:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80037e0:	f893 9001 	ldrb.w	r9, [r3, #1]
 80037e4:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80037e8:	f893 9002 	ldrb.w	r9, [r3, #2]
 80037ec:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80037f0:	f893 9003 	ldrb.w	r9, [r3, #3]
 80037f4:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80037f8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80037fc:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003800:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003804:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003808:	b2e9      	uxtb	r1, r5
 800380a:	e7d1      	b.n	80037b0 <USBH_Get_CfgDesc+0xc0>

0800380c <USBH_Get_StringDesc>:
{
 800380c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800380e:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003812:	4614      	mov	r4, r2
 8003814:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800381c:	462b      	mov	r3, r5
 800381e:	2100      	movs	r1, #0
{
 8003820:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003822:	f7ff ff01 	bl	8003628 <USBH_GetDescriptor>
 8003826:	b978      	cbnz	r0, 8003848 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8003828:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800382c:	2b03      	cmp	r3, #3
 800382e:	d10b      	bne.n	8003848 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8003830:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8003834:	3b02      	subs	r3, #2
 8003836:	42bb      	cmp	r3, r7
 8003838:	bf28      	it	cs
 800383a:	463b      	movcs	r3, r7
 800383c:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800383e:	4602      	mov	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d803      	bhi.n	800384c <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8003844:	2300      	movs	r3, #0
 8003846:	7023      	strb	r3, [r4, #0]
}
 8003848:	b003      	add	sp, #12
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800384c:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800384e:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8003850:	7889      	ldrb	r1, [r1, #2]
 8003852:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8003856:	b292      	uxth	r2, r2
 8003858:	e7f2      	b.n	8003840 <USBH_Get_StringDesc+0x34>

0800385a <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800385a:	7883      	ldrb	r3, [r0, #2]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d106      	bne.n	800386e <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003860:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003862:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003864:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003866:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8003868:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800386a:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800386c:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800386e:	2200      	movs	r2, #0
 8003870:	4611      	mov	r1, r2
 8003872:	f7ff bdfd 	b.w	8003470 <USBH_CtlReq>

08003876 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003876:	7883      	ldrb	r3, [r0, #2]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800387c:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800387e:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003880:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003882:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003884:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003886:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003888:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800388a:	2200      	movs	r2, #0
 800388c:	4611      	mov	r1, r2
 800388e:	f7ff bdef 	b.w	8003470 <USBH_CtlReq>

08003892 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003892:	7883      	ldrb	r3, [r0, #2]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003898:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800389a:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800389c:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800389e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80038a0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80038a2:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80038a4:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80038a6:	2200      	movs	r2, #0
 80038a8:	4611      	mov	r1, r2
 80038aa:	f7ff bde1 	b.w	8003470 <USBH_CtlReq>

080038ae <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80038ae:	7883      	ldrb	r3, [r0, #2]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80038b4:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80038b6:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80038b8:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80038ba:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80038bc:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80038be:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80038c0:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 80038c2:	2200      	movs	r2, #0
 80038c4:	4611      	mov	r1, r2
 80038c6:	f7ff bdd3 	b.w	8003470 <USBH_CtlReq>

080038ca <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80038ca:	b530      	push	{r4, r5, lr}
 80038cc:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80038ce:	2400      	movs	r4, #0
{
 80038d0:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80038d2:	2308      	movs	r3, #8
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	9101      	str	r1, [sp, #4]
 80038d8:	9403      	str	r4, [sp, #12]
 80038da:	9400      	str	r4, [sp, #0]
 80038dc:	4623      	mov	r3, r4
 80038de:	4622      	mov	r2, r4
 80038e0:	4629      	mov	r1, r5
 80038e2:	f002 f98f 	bl	8005c04 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 80038e6:	4620      	mov	r0, r4
 80038e8:	b005      	add	sp, #20
 80038ea:	bd30      	pop	{r4, r5, pc}

080038ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80038ec:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80038ee:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80038f2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80038f4:	2d00      	cmp	r5, #0
{
 80038f6:	461c      	mov	r4, r3
 80038f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80038fc:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80038fe:	bf18      	it	ne
 8003900:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003902:	9303      	str	r3, [sp, #12]
 8003904:	2301      	movs	r3, #1
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	9101      	str	r1, [sp, #4]
 800390c:	461a      	mov	r2, r3
 800390e:	4621      	mov	r1, r4
 8003910:	f002 f978 	bl	8005c04 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003914:	2000      	movs	r0, #0
 8003916:	b005      	add	sp, #20
 8003918:	bd30      	pop	{r4, r5, pc}

0800391a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800391a:	b530      	push	{r4, r5, lr}
 800391c:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800391e:	2400      	movs	r4, #0
{
 8003920:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	2201      	movs	r2, #1
 8003926:	9101      	str	r1, [sp, #4]
 8003928:	9403      	str	r4, [sp, #12]
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	4623      	mov	r3, r4
 800392e:	4629      	mov	r1, r5
 8003930:	f002 f968 	bl	8005c04 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003934:	4620      	mov	r0, r4
 8003936:	b005      	add	sp, #20
 8003938:	bd30      	pop	{r4, r5, pc}

0800393a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800393a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800393c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003940:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003942:	2d00      	cmp	r5, #0
{
 8003944:	461c      	mov	r4, r3
 8003946:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800394a:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800394c:	bf18      	it	ne
 800394e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003950:	9303      	str	r3, [sp, #12]
 8003952:	2301      	movs	r3, #1
 8003954:	9101      	str	r1, [sp, #4]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	2302      	movs	r3, #2
 800395c:	4621      	mov	r1, r4
 800395e:	f002 f951 	bl	8005c04 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003962:	2000      	movs	r0, #0
 8003964:	b005      	add	sp, #20
 8003966:	bd30      	pop	{r4, r5, pc}

08003968 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003968:	b530      	push	{r4, r5, lr}
 800396a:	b085      	sub	sp, #20
 800396c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800396e:	2400      	movs	r4, #0
 8003970:	9202      	str	r2, [sp, #8]
 8003972:	2201      	movs	r2, #1
 8003974:	9101      	str	r1, [sp, #4]
 8003976:	9403      	str	r4, [sp, #12]
 8003978:	9200      	str	r2, [sp, #0]
 800397a:	2302      	movs	r3, #2
 800397c:	4629      	mov	r1, r5
 800397e:	f002 f941 	bl	8005c04 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003982:	4620      	mov	r0, r4
 8003984:	b005      	add	sp, #20
 8003986:	bd30      	pop	{r4, r5, pc}

08003988 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003988:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 800398a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800398e:	9402      	str	r4, [sp, #8]
 8003990:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003994:	9401      	str	r4, [sp, #4]
 8003996:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800399a:	9400      	str	r4, [sp, #0]
 800399c:	f002 f90c 	bl	8005bb8 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 80039a0:	2000      	movs	r0, #0
 80039a2:	b004      	add	sp, #16
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80039a6:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80039a8:	f002 f91e 	bl	8005be8 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 80039ac:	2000      	movs	r0, #0
 80039ae:	bd08      	pop	{r3, pc}

080039b0 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80039b0:	b530      	push	{r4, r5, lr}
 80039b2:	2300      	movs	r3, #0
 80039b4:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80039b8:	f854 5b04 	ldr.w	r5, [r4], #4
 80039bc:	042d      	lsls	r5, r5, #16
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	d407      	bmi.n	80039d2 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80039c2:	33e0      	adds	r3, #224	; 0xe0
 80039c4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80039c8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 80039cc:	b292      	uxth	r2, r2
}
 80039ce:	b2d0      	uxtb	r0, r2
 80039d0:	bd30      	pop	{r4, r5, pc}
 80039d2:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 80039d4:	2b0b      	cmp	r3, #11
 80039d6:	d1ef      	bne.n	80039b8 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 80039d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039dc:	e7f7      	b.n	80039ce <USBH_AllocPipe+0x1e>

080039de <USBH_FreePipe>:
   if(idx < 11U)
 80039de:	290a      	cmp	r1, #10
 80039e0:	bf9f      	itttt	ls
 80039e2:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 80039e6:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 80039ea:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80039ee:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 80039f2:	2000      	movs	r0, #0
 80039f4:	4770      	bx	lr

080039f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039f6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80039f8:	f001 f890 	bl	8004b1c <vTaskStartScheduler>
  
  return osOK;
}
 80039fc:	2000      	movs	r0, #0
 80039fe:	bd08      	pop	{r3, pc}

08003a00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a04:	6946      	ldr	r6, [r0, #20]
 8003a06:	692a      	ldr	r2, [r5, #16]
 8003a08:	6840      	ldr	r0, [r0, #4]
 8003a0a:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8003a0e:	460b      	mov	r3, r1
 8003a10:	b086      	sub	sp, #24
 8003a12:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a14:	b176      	cbz	r6, 8003a34 <osThreadCreate+0x34>
 8003a16:	69ad      	ldr	r5, [r5, #24]
 8003a18:	b165      	cbz	r5, 8003a34 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8003a1a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003a1c:	bf14      	ite	ne
 8003a1e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a20:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a22:	9502      	str	r5, [sp, #8]
 8003a24:	e88d 0050 	stmia.w	sp, {r4, r6}
 8003a28:	f001 f814 	bl	8004a54 <xTaskCreateStatic>
 8003a2c:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a2e:	9805      	ldr	r0, [sp, #20]
}
 8003a30:	b006      	add	sp, #24
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003a34:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003a36:	bf14      	ite	ne
 8003a38:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a3a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a3c:	ad05      	add	r5, sp, #20
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	e88d 0030 	stmia.w	sp, {r4, r5}
 8003a44:	f001 f83d 	bl	8004ac2 <xTaskCreate>
 8003a48:	2801      	cmp	r0, #1
 8003a4a:	d0f0      	beq.n	8003a2e <osThreadCreate+0x2e>
      return NULL;
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	e7ef      	b.n	8003a30 <osThreadCreate+0x30>

08003a50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a50:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a52:	2800      	cmp	r0, #0
 8003a54:	bf08      	it	eq
 8003a56:	2001      	moveq	r0, #1
 8003a58:	f001 f9a8 	bl	8004dac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	bd08      	pop	{r3, pc}

08003a60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003a60:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003a62:	6882      	ldr	r2, [r0, #8]
 8003a64:	b14a      	cbz	r2, 8003a7a <osMessageCreate+0x1a>
 8003a66:	68c3      	ldr	r3, [r0, #12]
 8003a68:	b13b      	cbz	r3, 8003a7a <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	9100      	str	r1, [sp, #0]
 8003a6e:	c803      	ldmia	r0, {r0, r1}
 8003a70:	f000 fc14 	bl	800429c <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003a74:	b003      	add	sp, #12
 8003a76:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003a7a:	c803      	ldmia	r0, {r0, r1}
 8003a7c:	2200      	movs	r2, #0
}
 8003a7e:	b003      	add	sp, #12
 8003a80:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003a84:	f000 bc53 	b.w	800432e <xQueueGenericCreate>

08003a88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8003a8a:	2400      	movs	r4, #0
{
 8003a8c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a8e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8003a90:	42a2      	cmp	r2, r4
 8003a92:	bf08      	it	eq
 8003a94:	2201      	moveq	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a96:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8003a9a:	b1ab      	cbz	r3, 8003ac8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	aa03      	add	r2, sp, #12
 8003aa0:	a901      	add	r1, sp, #4
 8003aa2:	f000 fd1f 	bl	80044e4 <xQueueGenericSendFromISR>
 8003aa6:	2801      	cmp	r0, #1
 8003aa8:	d002      	beq.n	8003ab0 <osMessagePut+0x28>
      return osErrorOS;
 8003aaa:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8003aac:	b004      	add	sp, #16
 8003aae:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	b13b      	cbz	r3, 8003ac4 <osMessagePut+0x3c>
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <osMessagePut+0x4c>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
  return osOK;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e7f1      	b.n	8003aac <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003ac8:	a901      	add	r1, sp, #4
 8003aca:	f000 fc55 	bl	8004378 <xQueueGenericSend>
 8003ace:	2801      	cmp	r0, #1
 8003ad0:	d1eb      	bne.n	8003aaa <osMessagePut+0x22>
 8003ad2:	e7f7      	b.n	8003ac4 <osMessagePut+0x3c>
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ada:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8003adc:	2600      	movs	r6, #0
{
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4617      	mov	r7, r2
 8003ae2:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8003ae4:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8003ae6:	9602      	str	r6, [sp, #8]
 8003ae8:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8003aea:	b911      	cbnz	r1, 8003af2 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8003aec:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	e017      	b.n	8003b22 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8003af2:	9600      	str	r6, [sp, #0]
 8003af4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8003af8:	b1d3      	cbz	r3, 8003b30 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003afa:	466a      	mov	r2, sp
 8003afc:	a902      	add	r1, sp, #8
 8003afe:	f000 fdf7 	bl	80046f0 <xQueueReceiveFromISR>
 8003b02:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8003b04:	bf04      	itt	eq
 8003b06:	2310      	moveq	r3, #16
 8003b08:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8003b0a:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8003b0c:	bf18      	it	ne
 8003b0e:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8003b10:	b13b      	cbz	r3, 8003b22 <osMessageGet+0x4a>
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <osMessageGet+0x70>)
 8003b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8003b22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	b005      	add	sp, #20
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003b30:	a902      	add	r1, sp, #8
 8003b32:	f000 fd39 	bl	80045a8 <xQueueReceive>
 8003b36:	2801      	cmp	r0, #1
 8003b38:	d101      	bne.n	8003b3e <osMessageGet+0x66>
      event.status = osEventMessage;
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	e7d7      	b.n	8003aee <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	bf0c      	ite	eq
 8003b42:	2300      	moveq	r3, #0
 8003b44:	2340      	movne	r3, #64	; 0x40
 8003b46:	e7d2      	b.n	8003aee <osMessageGet+0x16>
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4c:	f100 0308 	add.w	r3, r0, #8
 8003b50:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b56:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b5a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b5c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b5e:	6003      	str	r3, [r0, #0]
 8003b60:	4770      	bx	lr

08003b62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	6103      	str	r3, [r0, #16]
 8003b66:	4770      	bx	lr

08003b68 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b74:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003b76:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b78:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6003      	str	r3, [r0, #0]
 8003b7e:	4770      	bx	lr

08003b80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b80:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b82:	1c53      	adds	r3, r2, #1
{
 8003b84:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003b86:	d10a      	bne.n	8003b9e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b88:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b8e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b90:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b92:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003b94:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b96:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003b98:	3301      	adds	r3, #1
 8003b9a:	6003      	str	r3, [r0, #0]
 8003b9c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b9e:	f100 0308 	add.w	r3, r0, #8
 8003ba2:	685c      	ldr	r4, [r3, #4]
 8003ba4:	6825      	ldr	r5, [r4, #0]
 8003ba6:	42aa      	cmp	r2, r5
 8003ba8:	d3ef      	bcc.n	8003b8a <vListInsert+0xa>
 8003baa:	4623      	mov	r3, r4
 8003bac:	e7f9      	b.n	8003ba2 <vListInsert+0x22>

08003bae <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bae:	6841      	ldr	r1, [r0, #4]
 8003bb0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003bb2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bb4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bb6:	6882      	ldr	r2, [r0, #8]
 8003bb8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bbe:	bf08      	it	eq
 8003bc0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bcc:	6818      	ldr	r0, [r3, #0]
}
 8003bce:	4770      	bx	lr

08003bd0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bd0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <prvTaskExitError+0x3c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	d008      	beq.n	8003bf0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	e7fe      	b.n	8003bee <prvTaskExitError+0x1e>
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c00:	9b01      	ldr	r3, [sp, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0fc      	beq.n	8003c00 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c06:	b002      	add	sp, #8
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000028 	.word	0x20000028

08003c10 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c10:	4808      	ldr	r0, [pc, #32]	; (8003c34 <prvPortStartFirstTask+0x24>)
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	6800      	ldr	r0, [r0, #0]
 8003c16:	f380 8808 	msr	MSP, r0
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	f380 8814 	msr	CONTROL, r0
 8003c22:	b662      	cpsie	i
 8003c24:	b661      	cpsie	f
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	df00      	svc	0
 8003c30:	bf00      	nop
 8003c32:	0000      	.short	0x0000
 8003c34:	e000ed08 	.word	0xe000ed08

08003c38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c48 <vPortEnableVFP+0x10>
 8003c3c:	6801      	ldr	r1, [r0, #0]
 8003c3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c42:	6001      	str	r1, [r0, #0]
 8003c44:	4770      	bx	lr
 8003c46:	0000      	.short	0x0000
 8003c48:	e000ed88 	.word	0xe000ed88

08003c4c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c50:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <pxPortInitialiseStack+0x28>)
 8003c56:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c5a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c5e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c62:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c6a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003c6e:	3844      	subs	r0, #68	; 0x44
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	08003bd1 	.word	0x08003bd1
	...

08003c80 <SVC_Handler>:
	__asm volatile (
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <pxCurrentTCBConst2>)
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	6808      	ldr	r0, [r1, #0]
 8003c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8a:	f380 8809 	msr	PSP, r0
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8811 	msr	BASEPRI, r0
 8003c9a:	4770      	bx	lr
 8003c9c:	f3af 8000 	nop.w

08003ca0 <pxCurrentTCBConst2>:
 8003ca0:	200018d4 	.word	0x200018d4

08003ca4 <vPortEnterCritical>:
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003cb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <vPortEnterCritical+0x3c>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003cba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003cbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003cbe:	d10d      	bne.n	8003cdc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <vPortEnterCritical+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cc8:	d008      	beq.n	8003cdc <vPortEnterCritical+0x38>
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	e7fe      	b.n	8003cda <vPortEnterCritical+0x36>
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000028 	.word	0x20000028
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003ce8:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <vPortExitCritical+0x24>)
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	b943      	cbnz	r3, 8003d00 <vPortExitCritical+0x18>
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	e7fe      	b.n	8003cfe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003d00:	3b01      	subs	r3, #1
 8003d02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d04:	b90b      	cbnz	r3, 8003d0a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	4770      	bx	lr
 8003d0c:	20000028 	.word	0x20000028

08003d10 <PendSV_Handler>:
	__asm volatile
 8003d10:	f3ef 8009 	mrs	r0, PSP
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <pxCurrentTCBConst>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f01e 0f10 	tst.w	lr, #16
 8003d20:	bf08      	it	eq
 8003d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d34:	f380 8811 	msr	BASEPRI, r0
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f001 f858 	bl	8004df4 <vTaskSwitchContext>
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f380 8811 	msr	BASEPRI, r0
 8003d4c:	bc09      	pop	{r0, r3}
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	f01e 0f10 	tst.w	lr, #16
 8003d5a:	bf08      	it	eq
 8003d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d60:	f380 8809 	msr	PSP, r0
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst>:
 8003d70:	200018d4 	.word	0x200018d4

08003d74 <SysTick_Handler>:
{
 8003d74:	b508      	push	{r3, lr}
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003d86:	f000 ff07 	bl	8004b98 <xTaskIncrementTick>
 8003d8a:	b118      	cbz	r0, 8003d94 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <SysTick_Handler+0x28>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003d94:	2300      	movs	r3, #0
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	bd08      	pop	{r3, pc}
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003da8:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <vPortSetupTimerInterrupt+0x20>)
 8003dac:	4905      	ldr	r1, [pc, #20]	; (8003dc4 <vPortSetupTimerInterrupt+0x24>)
 8003dae:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000e010 	.word	0xe000e010
 8003dbc:	e000e018 	.word	0xe000e018
 8003dc0:	e000e014 	.word	0xe000e014
 8003dc4:	0002903f 	.word	0x0002903f

08003dc8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dc8:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <xPortStartScheduler+0xe8>)
 8003dca:	4a3a      	ldr	r2, [pc, #232]	; (8003eb4 <xPortStartScheduler+0xec>)
{
 8003dcc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	4291      	cmp	r1, r2
 8003dd2:	d108      	bne.n	8003de6 <xPortStartScheduler+0x1e>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	e7fe      	b.n	8003de4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <xPortStartScheduler+0xf0>)
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d108      	bne.n	8003e00 <xPortStartScheduler+0x38>
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	e7fe      	b.n	8003dfe <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <xPortStartScheduler+0xf4>)
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e08:	22ff      	movs	r2, #255	; 0xff
 8003e0a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e0c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e1e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <xPortStartScheduler+0xfc>)
 8003e22:	2207      	movs	r2, #7
 8003e24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e26:	2100      	movs	r1, #0
 8003e28:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003e2c:	0600      	lsls	r0, r0, #24
 8003e2e:	f102 34ff 	add.w	r4, r2, #4294967295
 8003e32:	d40d      	bmi.n	8003e50 <xPortStartScheduler+0x88>
 8003e34:	b101      	cbz	r1, 8003e38 <xPortStartScheduler+0x70>
 8003e36:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2a03      	cmp	r2, #3
 8003e3c:	d011      	beq.n	8003e62 <xPortStartScheduler+0x9a>
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	e7fe      	b.n	8003e4e <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e50:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003e54:	0052      	lsls	r2, r2, #1
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f88d 2003 	strb.w	r2, [sp, #3]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	e7e2      	b.n	8003e28 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e62:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003e68:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e6a:	9b01      	ldr	r3, [sp, #4]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <xPortStartScheduler+0xf4>)
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <xPortStartScheduler+0x100>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003e7a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003e82:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003e84:	f7ff ff8c 	bl	8003da0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <xPortStartScheduler+0x104>)
 8003e8a:	2400      	movs	r4, #0
 8003e8c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8003e8e:	f7ff fed3 	bl	8003c38 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e92:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <xPortStartScheduler+0x108>)
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e9a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003e9c:	f7ff feb8 	bl	8003c10 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003ea0:	f000 ffa8 	bl	8004df4 <vTaskSwitchContext>
	prvTaskExitError();
 8003ea4:	f7ff fe94 	bl	8003bd0 <prvTaskExitError>
}
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	b002      	add	sp, #8
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	bf00      	nop
 8003eb0:	e000ed00 	.word	0xe000ed00
 8003eb4:	410fc271 	.word	0x410fc271
 8003eb8:	410fc270 	.word	0x410fc270
 8003ebc:	e000e400 	.word	0xe000e400
 8003ec0:	200000b4 	.word	0x200000b4
 8003ec4:	200000b8 	.word	0x200000b8
 8003ec8:	e000ed20 	.word	0xe000ed20
 8003ecc:	20000028 	.word	0x20000028
 8003ed0:	e000ef34 	.word	0xe000ef34

08003ed4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ed4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d90e      	bls.n	8003efa <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003edc:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <vPortValidateInterruptPriority+0x4c>)
 8003ede:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ee0:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <vPortValidateInterruptPriority+0x50>)
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d908      	bls.n	8003efa <vPortValidateInterruptPriority+0x26>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	e7fe      	b.n	8003ef8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <vPortValidateInterruptPriority+0x54>)
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <vPortValidateInterruptPriority+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d908      	bls.n	8003f1c <vPortValidateInterruptPriority+0x48>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	e7fe      	b.n	8003f1a <vPortValidateInterruptPriority+0x46>
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e3f0 	.word	0xe000e3f0
 8003f24:	200000b4 	.word	0x200000b4
 8003f28:	e000ed0c 	.word	0xe000ed0c
 8003f2c:	200000b8 	.word	0x200000b8

08003f30 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f30:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <prvInsertBlockIntoFreeList+0x40>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4282      	cmp	r2, r0
 8003f38:	d318      	bcc.n	8003f6c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f3a:	685c      	ldr	r4, [r3, #4]
 8003f3c:	1919      	adds	r1, r3, r4
 8003f3e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f40:	bf01      	itttt	eq
 8003f42:	6841      	ldreq	r1, [r0, #4]
 8003f44:	4618      	moveq	r0, r3
 8003f46:	1909      	addeq	r1, r1, r4
 8003f48:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f4a:	6844      	ldr	r4, [r0, #4]
 8003f4c:	1901      	adds	r1, r0, r4
 8003f4e:	428a      	cmp	r2, r1
 8003f50:	d107      	bne.n	8003f62 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <prvInsertBlockIntoFreeList+0x44>)
 8003f54:	6809      	ldr	r1, [r1, #0]
 8003f56:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f58:	bf1f      	itttt	ne
 8003f5a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f5c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f5e:	1909      	addne	r1, r1, r4
 8003f60:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f62:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f64:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f66:	bf18      	it	ne
 8003f68:	6018      	strne	r0, [r3, #0]
 8003f6a:	bd10      	pop	{r4, pc}
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	e7e1      	b.n	8003f34 <prvInsertBlockIntoFreeList+0x4>
 8003f70:	200018cc 	.word	0x200018cc
 8003f74:	200000bc 	.word	0x200000bc

08003f78 <pvPortMalloc>:
{
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003f7e:	f000 fe03 	bl	8004b88 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003f82:	493e      	ldr	r1, [pc, #248]	; (800407c <pvPortMalloc+0x104>)
 8003f84:	4d3e      	ldr	r5, [pc, #248]	; (8004080 <pvPortMalloc+0x108>)
 8003f86:	680b      	ldr	r3, [r1, #0]
 8003f88:	bb0b      	cbnz	r3, 8003fce <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003f8a:	4a3e      	ldr	r2, [pc, #248]	; (8004084 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f8c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f8e:	bf1f      	itttt	ne
 8003f90:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f92:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f96:	f502 53c0 	addne.w	r3, r2, #6144	; 0x1800
 8003f9a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f9c:	bf14      	ite	ne
 8003f9e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fa0:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fa4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003fa6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fac:	4e36      	ldr	r6, [pc, #216]	; (8004088 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8003fae:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fb4:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003fb6:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fb8:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fba:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fbc:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fc0:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <pvPortMalloc+0x118>)
 8003fc6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fcc:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fce:	682f      	ldr	r7, [r5, #0]
 8003fd0:	4227      	tst	r7, r4
 8003fd2:	d116      	bne.n	8004002 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003fd4:	2c00      	cmp	r4, #0
 8003fd6:	d041      	beq.n	800405c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8003fd8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fdc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fde:	bf1c      	itt	ne
 8003fe0:	f023 0307 	bicne.w	r3, r3, #7
 8003fe4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fe6:	b163      	cbz	r3, 8004002 <pvPortMalloc+0x8a>
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <pvPortMalloc+0x118>)
 8003fea:	6816      	ldr	r6, [r2, #0]
 8003fec:	42b3      	cmp	r3, r6
 8003fee:	4690      	mov	r8, r2
 8003ff0:	d807      	bhi.n	8004002 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003ff2:	4a25      	ldr	r2, [pc, #148]	; (8004088 <pvPortMalloc+0x110>)
 8003ff4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff6:	6868      	ldr	r0, [r5, #4]
 8003ff8:	4283      	cmp	r3, r0
 8003ffa:	d804      	bhi.n	8004006 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003ffc:	6809      	ldr	r1, [r1, #0]
 8003ffe:	428d      	cmp	r5, r1
 8004000:	d107      	bne.n	8004012 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004002:	2400      	movs	r4, #0
 8004004:	e02a      	b.n	800405c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004006:	682c      	ldr	r4, [r5, #0]
 8004008:	2c00      	cmp	r4, #0
 800400a:	d0f7      	beq.n	8003ffc <pvPortMalloc+0x84>
 800400c:	462a      	mov	r2, r5
 800400e:	4625      	mov	r5, r4
 8004010:	e7f1      	b.n	8003ff6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004012:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004014:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004016:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004018:	1ac2      	subs	r2, r0, r3
 800401a:	2a10      	cmp	r2, #16
 800401c:	d90f      	bls.n	800403e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800401e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004020:	0741      	lsls	r1, r0, #29
 8004022:	d008      	beq.n	8004036 <pvPortMalloc+0xbe>
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	e7fe      	b.n	8004034 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004036:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004038:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800403a:	f7ff ff79 	bl	8003f30 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800403e:	4913      	ldr	r1, [pc, #76]	; (800408c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004040:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004042:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004044:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004046:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004048:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800404a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800404e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004052:	bf38      	it	cc
 8004054:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004056:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004058:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800405a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800405c:	f000 fe2e 	bl	8004cbc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004060:	0763      	lsls	r3, r4, #29
 8004062:	d008      	beq.n	8004076 <pvPortMalloc+0xfe>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	e7fe      	b.n	8004074 <pvPortMalloc+0xfc>
}
 8004076:	4620      	mov	r0, r4
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	200000bc 	.word	0x200000bc
 8004080:	200018c0 	.word	0x200018c0
 8004084:	200000c0 	.word	0x200000c0
 8004088:	200018cc 	.word	0x200018cc
 800408c:	200018c8 	.word	0x200018c8
 8004090:	200018c4 	.word	0x200018c4

08004094 <vPortFree>:
{
 8004094:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004096:	4604      	mov	r4, r0
 8004098:	b370      	cbz	r0, 80040f8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800409a:	4a18      	ldr	r2, [pc, #96]	; (80040fc <vPortFree+0x68>)
 800409c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	4213      	tst	r3, r2
 80040a4:	d108      	bne.n	80040b8 <vPortFree+0x24>
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	e7fe      	b.n	80040b6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040b8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80040bc:	b141      	cbz	r1, 80040d0 <vPortFree+0x3c>
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	e7fe      	b.n	80040ce <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040d0:	ea23 0302 	bic.w	r3, r3, r2
 80040d4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80040d8:	f000 fd56 	bl	8004b88 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <vPortFree+0x6c>)
 80040de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80040e2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040e4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040e8:	440b      	add	r3, r1
 80040ea:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ec:	f7ff ff20 	bl	8003f30 <prvInsertBlockIntoFreeList>
}
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80040f4:	f000 bde2 	b.w	8004cbc <xTaskResumeAll>
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop
 80040fc:	200018c0 	.word	0x200018c0
 8004100:	200018c4 	.word	0x200018c4

08004104 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004104:	b510      	push	{r4, lr}
 8004106:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004108:	f7ff fdcc 	bl	8003ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800410c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800410e:	f7ff fdeb 	bl	8003ce8 <vPortExitCritical>

	return xReturn;
}
 8004112:	fab4 f084 	clz	r0, r4
 8004116:	0940      	lsrs	r0, r0, #5
 8004118:	bd10      	pop	{r4, pc}

0800411a <prvCopyDataToQueue>:
{
 800411a:	b570      	push	{r4, r5, r6, lr}
 800411c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800411e:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004120:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8004122:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004124:	b942      	cbnz	r2, 8004138 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004126:	6805      	ldr	r5, [r0, #0]
 8004128:	b99d      	cbnz	r5, 8004152 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800412a:	6840      	ldr	r0, [r0, #4]
 800412c:	f000 ff56 	bl	8004fdc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004130:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004132:	3601      	adds	r6, #1
 8004134:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004136:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004138:	b96d      	cbnz	r5, 8004156 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800413a:	6880      	ldr	r0, [r0, #8]
 800413c:	f001 fe0c 	bl	8005d58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004144:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004146:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004148:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800414a:	4293      	cmp	r3, r2
 800414c:	d301      	bcc.n	8004152 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004152:	2000      	movs	r0, #0
 8004154:	e7ed      	b.n	8004132 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004156:	68c0      	ldr	r0, [r0, #12]
 8004158:	f001 fdfe 	bl	8005d58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800415c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800415e:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004160:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004162:	425b      	negs	r3, r3
 8004164:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004166:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004168:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800416a:	bf3e      	ittt	cc
 800416c:	6862      	ldrcc	r2, [r4, #4]
 800416e:	189b      	addcc	r3, r3, r2
 8004170:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004172:	2d02      	cmp	r5, #2
 8004174:	d1ed      	bne.n	8004152 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004176:	b10e      	cbz	r6, 800417c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004178:	3e01      	subs	r6, #1
 800417a:	e7ea      	b.n	8004152 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800417c:	4630      	mov	r0, r6
 800417e:	e7d8      	b.n	8004132 <prvCopyDataToQueue+0x18>

08004180 <prvCopyDataFromQueue>:
{
 8004180:	4603      	mov	r3, r0
 8004182:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004186:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004188:	b162      	cbz	r2, 80041a4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800418a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800418c:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800418e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004190:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004192:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004194:	bf24      	itt	cs
 8004196:	6819      	ldrcs	r1, [r3, #0]
 8004198:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800419a:	68d9      	ldr	r1, [r3, #12]
}
 800419c:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041a0:	f001 bdda 	b.w	8005d58 <memcpy>
}
 80041a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <prvUnlockQueue>:
{
 80041aa:	b570      	push	{r4, r5, r6, lr}
 80041ac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80041ae:	f7ff fd79 	bl	8003ca4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80041b2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80041ba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041bc:	2d00      	cmp	r5, #0
 80041be:	dc14      	bgt.n	80041ea <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80041c0:	23ff      	movs	r3, #255	; 0xff
 80041c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80041c6:	f7ff fd8f 	bl	8003ce8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80041ca:	f7ff fd6b 	bl	8003ca4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80041ce:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d2:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80041d6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041d8:	2d00      	cmp	r5, #0
 80041da:	dc12      	bgt.n	8004202 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80041dc:	23ff      	movs	r3, #255	; 0xff
 80041de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80041e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80041e6:	f7ff bd7f 	b.w	8003ce8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0e7      	beq.n	80041c0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 fe53 	bl	8004e9c <xTaskRemoveFromEventList>
 80041f6:	b108      	cbz	r0, 80041fc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80041f8:	f000 feda 	bl	8004fb0 <vTaskMissedYield>
 80041fc:	3d01      	subs	r5, #1
 80041fe:	b26d      	sxtb	r5, r5
 8004200:	e7dc      	b.n	80041bc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0e9      	beq.n	80041dc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004208:	4630      	mov	r0, r6
 800420a:	f000 fe47 	bl	8004e9c <xTaskRemoveFromEventList>
 800420e:	b108      	cbz	r0, 8004214 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004210:	f000 fece 	bl	8004fb0 <vTaskMissedYield>
 8004214:	3d01      	subs	r5, #1
 8004216:	b26d      	sxtb	r5, r5
 8004218:	e7de      	b.n	80041d8 <prvUnlockQueue+0x2e>
	...

0800421c <xQueueGenericReset>:
{
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004220:	4604      	mov	r4, r0
 8004222:	b940      	cbnz	r0, 8004236 <xQueueGenericReset+0x1a>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	e7fe      	b.n	8004234 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004236:	f7ff fd35 	bl	8003ca4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800423a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800423c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800423e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004240:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004242:	4343      	muls	r3, r0
 8004244:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004246:	1a1b      	subs	r3, r3, r0
 8004248:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800424a:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800424c:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800424e:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004250:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004252:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004254:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800425c:	b995      	cbnz	r5, 8004284 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	b163      	cbz	r3, 800427c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004262:	f104 0010 	add.w	r0, r4, #16
 8004266:	f000 fe19 	bl	8004e9c <xTaskRemoveFromEventList>
 800426a:	b138      	cbz	r0, 800427c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <xQueueGenericReset+0x7c>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800427c:	f7ff fd34 	bl	8003ce8 <vPortExitCritical>
}
 8004280:	2001      	movs	r0, #1
 8004282:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004284:	f104 0010 	add.w	r0, r4, #16
 8004288:	f7ff fc60 	bl	8003b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800428c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004290:	f7ff fc5c 	bl	8003b4c <vListInitialise>
 8004294:	e7f2      	b.n	800427c <xQueueGenericReset+0x60>
 8004296:	bf00      	nop
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <xQueueGenericCreateStatic>:
	{
 800429c:	b513      	push	{r0, r1, r4, lr}
 800429e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042a0:	b940      	cbnz	r0, 80042b4 <xQueueGenericCreateStatic+0x18>
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	e7fe      	b.n	80042b2 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80042b4:	b943      	cbnz	r3, 80042c8 <xQueueGenericCreateStatic+0x2c>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	e7fe      	b.n	80042c6 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042c8:	b14a      	cbz	r2, 80042de <xQueueGenericCreateStatic+0x42>
 80042ca:	b9d9      	cbnz	r1, 8004304 <xQueueGenericCreateStatic+0x68>
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	e7fe      	b.n	80042dc <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042de:	b189      	cbz	r1, 8004304 <xQueueGenericCreateStatic+0x68>
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericCreateStatic+0x54>
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	e7fe      	b.n	8004302 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004304:	2348      	movs	r3, #72	; 0x48
 8004306:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	2b48      	cmp	r3, #72	; 0x48
 800430c:	d1f1      	bne.n	80042f2 <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800430e:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004310:	2900      	cmp	r1, #0
 8004312:	bf08      	it	eq
 8004314:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004316:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004318:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800431a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800431e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004320:	4619      	mov	r1, r3
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff ff7a 	bl	800421c <xQueueGenericReset>
	}
 8004328:	4620      	mov	r0, r4
 800432a:	b002      	add	sp, #8
 800432c:	bd10      	pop	{r4, pc}

0800432e <xQueueGenericCreate>:
	{
 800432e:	b570      	push	{r4, r5, r6, lr}
 8004330:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004332:	4606      	mov	r6, r0
 8004334:	b940      	cbnz	r0, 8004348 <xQueueGenericCreate+0x1a>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	e7fe      	b.n	8004346 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004348:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800434a:	3048      	adds	r0, #72	; 0x48
 800434c:	f7ff fe14 	bl	8003f78 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004350:	4604      	mov	r4, r0
 8004352:	b150      	cbz	r0, 800436a <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004354:	2300      	movs	r3, #0
 8004356:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800435a:	b945      	cbnz	r5, 800436e <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800435c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800435e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004360:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004362:	2101      	movs	r1, #1
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff ff59 	bl	800421c <xQueueGenericReset>
	}
 800436a:	4620      	mov	r0, r4
 800436c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800436e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004372:	6003      	str	r3, [r0, #0]
 8004374:	e7f3      	b.n	800435e <xQueueGenericCreate+0x30>
	...

08004378 <xQueueGenericSend>:
{
 8004378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	4689      	mov	r9, r1
 800437e:	9201      	str	r2, [sp, #4]
 8004380:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004382:	4604      	mov	r4, r0
 8004384:	b940      	cbnz	r0, 8004398 <xQueueGenericSend+0x20>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	e7fe      	b.n	8004396 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004398:	2900      	cmp	r1, #0
 800439a:	f040 8088 	bne.w	80044ae <xQueueGenericSend+0x136>
 800439e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8084 	beq.w	80044ae <xQueueGenericSend+0x136>
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	e7fe      	b.n	80043b6 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043b8:	9e01      	ldr	r6, [sp, #4]
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	f000 8082 	beq.w	80044c4 <xQueueGenericSend+0x14c>
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	e7fe      	b.n	80043d0 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d2:	9d01      	ldr	r5, [sp, #4]
 80043d4:	b91d      	cbnz	r5, 80043de <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80043d6:	f7ff fc87 	bl	8003ce8 <vPortExitCritical>
			return errQUEUE_FULL;
 80043da:	2000      	movs	r0, #0
 80043dc:	e058      	b.n	8004490 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80043de:	b916      	cbnz	r6, 80043e6 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e0:	a802      	add	r0, sp, #8
 80043e2:	f000 fd9d 	bl	8004f20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80043e6:	f7ff fc7f 	bl	8003ce8 <vPortExitCritical>
		vTaskSuspendAll();
 80043ea:	f000 fbcd 	bl	8004b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ee:	f7ff fc59 	bl	8003ca4 <vPortEnterCritical>
 80043f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043f6:	2bff      	cmp	r3, #255	; 0xff
 80043f8:	bf08      	it	eq
 80043fa:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80043fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	bf08      	it	eq
 8004406:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800440a:	f7ff fc6d 	bl	8003ce8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800440e:	a901      	add	r1, sp, #4
 8004410:	a802      	add	r0, sp, #8
 8004412:	f000 fd91 	bl	8004f38 <xTaskCheckForTimeOut>
 8004416:	2800      	cmp	r0, #0
 8004418:	d143      	bne.n	80044a2 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800441a:	f7ff fc43 	bl	8003ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800441e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004420:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004422:	f7ff fc61 	bl	8003ce8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004426:	42ae      	cmp	r6, r5
 8004428:	d135      	bne.n	8004496 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800442a:	9901      	ldr	r1, [sp, #4]
 800442c:	f104 0010 	add.w	r0, r4, #16
 8004430:	f000 fd1a 	bl	8004e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff feb8 	bl	80041aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800443a:	f000 fc3f 	bl	8004cbc <xTaskResumeAll>
 800443e:	b938      	cbnz	r0, 8004450 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004444:	f8ca 3000 	str.w	r3, [sl]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004452:	f7ff fc27 	bl	8003ca4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004456:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800445a:	429a      	cmp	r2, r3
 800445c:	d301      	bcc.n	8004462 <xQueueGenericSend+0xea>
 800445e:	2f02      	cmp	r7, #2
 8004460:	d1b7      	bne.n	80043d2 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004462:	463a      	mov	r2, r7
 8004464:	4649      	mov	r1, r9
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff fe57 	bl	800411a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800446c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800446e:	b11b      	cbz	r3, 8004478 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004470:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004474:	f000 fd12 	bl	8004e9c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004478:	b138      	cbz	r0, 800448a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <xQueueGenericSend+0x168>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800448a:	f7ff fc2d 	bl	8003ce8 <vPortExitCritical>
				return pdPASS;
 800448e:	2001      	movs	r0, #1
}
 8004490:	b004      	add	sp, #16
 8004492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004496:	4620      	mov	r0, r4
 8004498:	f7ff fe87 	bl	80041aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800449c:	f000 fc0e 	bl	8004cbc <xTaskResumeAll>
 80044a0:	e7d6      	b.n	8004450 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff fe81 	bl	80041aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044a8:	f000 fc08 	bl	8004cbc <xTaskResumeAll>
 80044ac:	e795      	b.n	80043da <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044ae:	2f02      	cmp	r7, #2
 80044b0:	d102      	bne.n	80044b8 <xQueueGenericSend+0x140>
 80044b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d10a      	bne.n	80044ce <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b8:	f000 fd80 	bl	8004fbc <xTaskGetSchedulerState>
 80044bc:	2800      	cmp	r0, #0
 80044be:	f43f af7b 	beq.w	80043b8 <xQueueGenericSend+0x40>
 80044c2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80044c4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80044c8:	f8df a014 	ldr.w	sl, [pc, #20]	; 80044e0 <xQueueGenericSend+0x168>
 80044cc:	e7c1      	b.n	8004452 <xQueueGenericSend+0xda>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	e7fe      	b.n	80044de <xQueueGenericSend+0x166>
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <xQueueGenericSendFromISR>:
{
 80044e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e8:	4688      	mov	r8, r1
 80044ea:	4691      	mov	r9, r2
 80044ec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80044ee:	4604      	mov	r4, r0
 80044f0:	b940      	cbnz	r0, 8004504 <xQueueGenericSendFromISR+0x20>
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	e7fe      	b.n	8004502 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004504:	bb09      	cbnz	r1, 800454a <xQueueGenericSendFromISR+0x66>
 8004506:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004508:	b1fb      	cbz	r3, 800454a <xQueueGenericSendFromISR+0x66>
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	e7fe      	b.n	800451a <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800451c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004520:	f000 fcbc 	bl	8004e9c <xTaskRemoveFromEventList>
 8004524:	2800      	cmp	r0, #0
 8004526:	d034      	beq.n	8004592 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8004528:	f1b9 0f00 	cmp.w	r9, #0
 800452c:	d031      	beq.n	8004592 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800452e:	2001      	movs	r0, #1
 8004530:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004534:	f386 8811 	msr	BASEPRI, r6
}
 8004538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800453c:	3501      	adds	r5, #1
 800453e:	b26d      	sxtb	r5, r5
 8004540:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004544:	e025      	b.n	8004592 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8004546:	2000      	movs	r0, #0
 8004548:	e7f4      	b.n	8004534 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800454a:	2f02      	cmp	r7, #2
 800454c:	d102      	bne.n	8004554 <xQueueGenericSendFromISR+0x70>
 800454e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d120      	bne.n	8004596 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004554:	f7ff fcbe 	bl	8003ed4 <vPortValidateInterruptPriority>
	__asm volatile
 8004558:	f3ef 8611 	mrs	r6, BASEPRI
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800456c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800456e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004570:	429a      	cmp	r2, r3
 8004572:	d301      	bcc.n	8004578 <xQueueGenericSendFromISR+0x94>
 8004574:	2f02      	cmp	r7, #2
 8004576:	d1e6      	bne.n	8004546 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004578:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800457c:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800457e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004580:	4641      	mov	r1, r8
 8004582:	4620      	mov	r0, r4
 8004584:	f7ff fdc9 	bl	800411a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004588:	1c6b      	adds	r3, r5, #1
 800458a:	d1d7      	bne.n	800453c <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800458c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1c4      	bne.n	800451c <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8004592:	2001      	movs	r0, #1
 8004594:	e7ce      	b.n	8004534 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	e7fe      	b.n	80045a6 <xQueueGenericSendFromISR+0xc2>

080045a8 <xQueueReceive>:
{
 80045a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045ac:	b085      	sub	sp, #20
 80045ae:	4688      	mov	r8, r1
 80045b0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80045b2:	4604      	mov	r4, r0
 80045b4:	b940      	cbnz	r0, 80045c8 <xQueueReceive+0x20>
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	e7fe      	b.n	80045c6 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c8:	2900      	cmp	r1, #0
 80045ca:	f040 8086 	bne.w	80046da <xQueueReceive+0x132>
 80045ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8082 	beq.w	80046da <xQueueReceive+0x132>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	e7fe      	b.n	80045e6 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045e8:	9e01      	ldr	r6, [sp, #4]
 80045ea:	2e00      	cmp	r6, #0
 80045ec:	d07a      	beq.n	80046e4 <xQueueReceive+0x13c>
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	e7fe      	b.n	80045fe <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004600:	9d01      	ldr	r5, [sp, #4]
 8004602:	b91d      	cbnz	r5, 800460c <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8004604:	f7ff fb70 	bl	8003ce8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004608:	2000      	movs	r0, #0
 800460a:	e052      	b.n	80046b2 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 800460c:	b916      	cbnz	r6, 8004614 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800460e:	a802      	add	r0, sp, #8
 8004610:	f000 fc86 	bl	8004f20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004614:	f7ff fb68 	bl	8003ce8 <vPortExitCritical>
		vTaskSuspendAll();
 8004618:	f000 fab6 	bl	8004b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800461c:	f7ff fb42 	bl	8003ca4 <vPortEnterCritical>
 8004620:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004624:	2bff      	cmp	r3, #255	; 0xff
 8004626:	bf08      	it	eq
 8004628:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800462c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004630:	2bff      	cmp	r3, #255	; 0xff
 8004632:	bf08      	it	eq
 8004634:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004638:	f7ff fb56 	bl	8003ce8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800463c:	a901      	add	r1, sp, #4
 800463e:	a802      	add	r0, sp, #8
 8004640:	f000 fc7a 	bl	8004f38 <xTaskCheckForTimeOut>
 8004644:	2800      	cmp	r0, #0
 8004646:	d13d      	bne.n	80046c4 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff fd5b 	bl	8004104 <prvIsQueueEmpty>
 800464e:	b398      	cbz	r0, 80046b8 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004650:	9901      	ldr	r1, [sp, #4]
 8004652:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004656:	f000 fc07 	bl	8004e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800465a:	4620      	mov	r0, r4
 800465c:	f7ff fda5 	bl	80041aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004660:	f000 fb2c 	bl	8004cbc <xTaskResumeAll>
 8004664:	b938      	cbnz	r0, 8004676 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8004666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800466a:	f8c9 3000 	str.w	r3, [r9]
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004678:	f7ff fb14 	bl	8003ca4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800467c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800467e:	2d00      	cmp	r5, #0
 8004680:	d0be      	beq.n	8004600 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004682:	4641      	mov	r1, r8
 8004684:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004686:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004688:	f7ff fd7a 	bl	8004180 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800468c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	b163      	cbz	r3, 80046ac <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004692:	f104 0010 	add.w	r0, r4, #16
 8004696:	f000 fc01 	bl	8004e9c <xTaskRemoveFromEventList>
 800469a:	b138      	cbz	r0, 80046ac <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <xQueueReceive+0x144>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80046ac:	f7ff fb1c 	bl	8003ce8 <vPortExitCritical>
				return pdPASS;
 80046b0:	2001      	movs	r0, #1
}
 80046b2:	b005      	add	sp, #20
 80046b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7ff fd76 	bl	80041aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046be:	f000 fafd 	bl	8004cbc <xTaskResumeAll>
 80046c2:	e7d8      	b.n	8004676 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7ff fd70 	bl	80041aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ca:	f000 faf7 	bl	8004cbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7ff fd18 	bl	8004104 <prvIsQueueEmpty>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d0ce      	beq.n	8004676 <xQueueReceive+0xce>
 80046d8:	e796      	b.n	8004608 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046da:	f000 fc6f 	bl	8004fbc <xTaskGetSchedulerState>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d082      	beq.n	80045e8 <xQueueReceive+0x40>
 80046e2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80046e4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80046e6:	f8df 9004 	ldr.w	r9, [pc, #4]	; 80046ec <xQueueReceive+0x144>
 80046ea:	e7c5      	b.n	8004678 <xQueueReceive+0xd0>
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <xQueueReceiveFromISR>:
{
 80046f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f4:	4689      	mov	r9, r1
 80046f6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80046f8:	4605      	mov	r5, r0
 80046fa:	b940      	cbnz	r0, 800470e <xQueueReceiveFromISR+0x1e>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	e7fe      	b.n	800470c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470e:	bb71      	cbnz	r1, 800476e <xQueueReceiveFromISR+0x7e>
 8004710:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004712:	b363      	cbz	r3, 800476e <xQueueReceiveFromISR+0x7e>
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	e7fe      	b.n	8004724 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004726:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800472a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800472c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800472e:	4628      	mov	r0, r5
 8004730:	f7ff fd26 	bl	8004180 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004734:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8004736:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004738:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800473a:	d113      	bne.n	8004764 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800473c:	692b      	ldr	r3, [r5, #16]
 800473e:	b90b      	cbnz	r3, 8004744 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8004740:	2001      	movs	r0, #1
 8004742:	e00b      	b.n	800475c <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004744:	f105 0010 	add.w	r0, r5, #16
 8004748:	f000 fba8 	bl	8004e9c <xTaskRemoveFromEventList>
 800474c:	2800      	cmp	r0, #0
 800474e:	d0f7      	beq.n	8004740 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8004750:	f1b8 0f00 	cmp.w	r8, #0
 8004754:	d0f4      	beq.n	8004740 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004756:	2001      	movs	r0, #1
 8004758:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800475c:	f387 8811 	msr	BASEPRI, r7
}
 8004760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004764:	3601      	adds	r6, #1
 8004766:	b276      	sxtb	r6, r6
 8004768:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800476c:	e7e8      	b.n	8004740 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800476e:	f7ff fbb1 	bl	8003ed4 <vPortValidateInterruptPriority>
	__asm volatile
 8004772:	f3ef 8711 	mrs	r7, BASEPRI
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004786:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004788:	2c00      	cmp	r4, #0
 800478a:	d1cc      	bne.n	8004726 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 800478c:	4620      	mov	r0, r4
 800478e:	e7e5      	b.n	800475c <xQueueReceiveFromISR+0x6c>

08004790 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004796:	f7ff fa85 	bl	8003ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 800479c:	4c2d      	ldr	r4, [pc, #180]	; (8004854 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4f2d      	ldr	r7, [pc, #180]	; (8004858 <prvAddNewTaskToReadyList+0xc8>)
 80047a2:	3201      	adds	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80047a6:	6825      	ldr	r5, [r4, #0]
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	d145      	bne.n	8004838 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047ac:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d11c      	bne.n	80047ee <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047b4:	1978      	adds	r0, r7, r5
 80047b6:	3514      	adds	r5, #20
 80047b8:	f7ff f9c8 	bl	8003b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047bc:	2d8c      	cmp	r5, #140	; 0x8c
 80047be:	d1f9      	bne.n	80047b4 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047c0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004884 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80047c4:	4d25      	ldr	r5, [pc, #148]	; (800485c <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7ff f9c0 	bl	8003b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7ff f9bd 	bl	8003b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047d2:	4823      	ldr	r0, [pc, #140]	; (8004860 <prvAddNewTaskToReadyList+0xd0>)
 80047d4:	f7ff f9ba 	bl	8003b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047d8:	4822      	ldr	r0, [pc, #136]	; (8004864 <prvAddNewTaskToReadyList+0xd4>)
 80047da:	f7ff f9b7 	bl	8003b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047de:	4822      	ldr	r0, [pc, #136]	; (8004868 <prvAddNewTaskToReadyList+0xd8>)
 80047e0:	f7ff f9b4 	bl	8003b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047e4:	4b21      	ldr	r3, [pc, #132]	; (800486c <prvAddNewTaskToReadyList+0xdc>)
 80047e6:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047ea:	4b21      	ldr	r3, [pc, #132]	; (8004870 <prvAddNewTaskToReadyList+0xe0>)
 80047ec:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80047ee:	4a21      	ldr	r2, [pc, #132]	; (8004874 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80047f0:	4921      	ldr	r1, [pc, #132]	; (8004878 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80047f2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80047f4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80047f6:	3301      	adds	r3, #1
 80047f8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80047fa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80047fc:	2301      	movs	r3, #1
 80047fe:	4093      	lsls	r3, r2
 8004800:	4303      	orrs	r3, r0
 8004802:	2014      	movs	r0, #20
 8004804:	600b      	str	r3, [r1, #0]
 8004806:	fb00 7002 	mla	r0, r0, r2, r7
 800480a:	1d31      	adds	r1, r6, #4
 800480c:	f7ff f9ac 	bl	8003b68 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004810:	f7ff fa6a 	bl	8003ce8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <prvAddNewTaskToReadyList+0xec>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	b163      	cbz	r3, 8004834 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004820:	429a      	cmp	r2, r3
 8004822:	d207      	bcs.n	8004834 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <prvAddNewTaskToReadyList+0xf0>)
 8004826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <prvAddNewTaskToReadyList+0xec>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1d6      	bne.n	80047ee <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004846:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004848:	bf98      	it	ls
 800484a:	6026      	strls	r6, [r4, #0]
 800484c:	e7cf      	b.n	80047ee <prvAddNewTaskToReadyList+0x5e>
 800484e:	bf00      	nop
 8004850:	2000196c 	.word	0x2000196c
 8004854:	200018d4 	.word	0x200018d4
 8004858:	200018e0 	.word	0x200018e0
 800485c:	20001998 	.word	0x20001998
 8004860:	200019b4 	.word	0x200019b4
 8004864:	200019e0 	.word	0x200019e0
 8004868:	200019cc 	.word	0x200019cc
 800486c:	200018d8 	.word	0x200018d8
 8004870:	200018dc 	.word	0x200018dc
 8004874:	2000197c 	.word	0x2000197c
 8004878:	20001980 	.word	0x20001980
 800487c:	200019c8 	.word	0x200019c8
 8004880:	e000ed04 	.word	0xe000ed04
 8004884:	20001984 	.word	0x20001984

08004888 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004888:	4a06      	ldr	r2, [pc, #24]	; (80048a4 <prvResetNextTaskUnblockTime+0x1c>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <prvResetNextTaskUnblockTime+0x20>)
 8004890:	b919      	cbnz	r1, 800489a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004892:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800489e:	68d2      	ldr	r2, [r2, #12]
 80048a0:	6852      	ldr	r2, [r2, #4]
 80048a2:	e7f8      	b.n	8004896 <prvResetNextTaskUnblockTime+0xe>
 80048a4:	200018d8 	.word	0x200018d8
 80048a8:	200019ac 	.word	0x200019ac

080048ac <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80048b2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048b6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80048b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80048bc:	3a01      	subs	r2, #1
 80048be:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80048c2:	469a      	mov	sl, r3
 80048c4:	4681      	mov	r9, r0
 80048c6:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048c8:	f026 0607 	bic.w	r6, r6, #7
 80048cc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80048d0:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048d2:	7858      	ldrb	r0, [r3, #1]
 80048d4:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80048d8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80048dc:	b108      	cbz	r0, 80048e2 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048de:	428b      	cmp	r3, r1
 80048e0:	d1f7      	bne.n	80048d2 <prvInitialiseNewTask.isra.2+0x26>
 80048e2:	9d08      	ldr	r5, [sp, #32]
 80048e4:	2d06      	cmp	r5, #6
 80048e6:	bf28      	it	cs
 80048e8:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ea:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 80048ec:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80048ee:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048f0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048f2:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80048f6:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048f8:	f7ff f933 	bl	8003b62 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048fc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004900:	f104 0018 	add.w	r0, r4, #24
 8004904:	f7ff f92d 	bl	8003b62 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004908:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800490a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800490e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004910:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004914:	4652      	mov	r2, sl
 8004916:	4649      	mov	r1, r9
 8004918:	4630      	mov	r0, r6
 800491a:	f7ff f997 	bl	8003c4c <pxPortInitialiseStack>
 800491e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004920:	f1b8 0f00 	cmp.w	r8, #0
 8004924:	d001      	beq.n	800492a <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004926:	f8c8 4000 	str.w	r4, [r8]
 800492a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800492e <prvDeleteTCB>:
	{
 800492e:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004930:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8004934:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004936:	b93b      	cbnz	r3, 8004948 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8004938:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800493a:	f7ff fbab 	bl	8004094 <vPortFree>
				vPortFree( pxTCB );
 800493e:	4620      	mov	r0, r4
	}
 8004940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004944:	f7ff bba6 	b.w	8004094 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004948:	2b01      	cmp	r3, #1
 800494a:	d0f9      	beq.n	8004940 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800494c:	2b02      	cmp	r3, #2
 800494e:	d008      	beq.n	8004962 <prvDeleteTCB+0x34>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	e7fe      	b.n	8004960 <prvDeleteTCB+0x32>
 8004962:	bd10      	pop	{r4, pc}

08004964 <prvIdleTask>:
{
 8004964:	b580      	push	{r7, lr}
				taskYIELD();
 8004966:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80049c4 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800496a:	4f12      	ldr	r7, [pc, #72]	; (80049b4 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800496c:	4c12      	ldr	r4, [pc, #72]	; (80049b8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800496e:	4d13      	ldr	r5, [pc, #76]	; (80049bc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	b963      	cbnz	r3, 800498e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <prvIdleTask+0x5c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d9f8      	bls.n	800496e <prvIdleTask+0xa>
				taskYIELD();
 800497c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004980:	f8c8 3000 	str.w	r3, [r8]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	e7ee      	b.n	800496c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800498e:	f7ff f989 	bl	8003ca4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004996:	1d30      	adds	r0, r6, #4
 8004998:	f7ff f909 	bl	8003bae <uxListRemove>
				--uxCurrentNumberOfTasks;
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80049a8:	f7ff f99e 	bl	8003ce8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ffbe 	bl	800492e <prvDeleteTCB>
 80049b2:	e7dd      	b.n	8004970 <prvIdleTask+0xc>
 80049b4:	200019e0 	.word	0x200019e0
 80049b8:	20001970 	.word	0x20001970
 80049bc:	2000196c 	.word	0x2000196c
 80049c0:	200018e0 	.word	0x200018e0
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049ca:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049cc:	4e1b      	ldr	r6, [pc, #108]	; (8004a3c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80049ce:	681d      	ldr	r5, [r3, #0]
{
 80049d0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d2:	6830      	ldr	r0, [r6, #0]
 80049d4:	3004      	adds	r0, #4
{
 80049d6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d8:	f7ff f8e9 	bl	8003bae <uxListRemove>
 80049dc:	4633      	mov	r3, r6
 80049de:	b940      	cbnz	r0, 80049f2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80049e0:	6831      	ldr	r1, [r6, #0]
 80049e2:	4e17      	ldr	r6, [pc, #92]	; (8004a40 <prvAddCurrentTaskToDelayedList+0x78>)
 80049e4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80049e6:	6832      	ldr	r2, [r6, #0]
 80049e8:	2001      	movs	r0, #1
 80049ea:	4088      	lsls	r0, r1
 80049ec:	ea22 0200 	bic.w	r2, r2, r0
 80049f0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049f2:	1c62      	adds	r2, r4, #1
 80049f4:	d107      	bne.n	8004a06 <prvAddCurrentTaskToDelayedList+0x3e>
 80049f6:	b137      	cbz	r7, 8004a06 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	4812      	ldr	r0, [pc, #72]	; (8004a44 <prvAddCurrentTaskToDelayedList+0x7c>)
 80049fc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a02:	f7ff b8b1 	b.w	8003b68 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a06:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a08:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004a0a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a0c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004a0e:	d907      	bls.n	8004a20 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a10:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <prvAddCurrentTaskToDelayedList+0x80>)
 8004a12:	6810      	ldr	r0, [r2, #0]
 8004a14:	6819      	ldr	r1, [r3, #0]
}
 8004a16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a1a:	3104      	adds	r1, #4
 8004a1c:	f7ff b8b0 	b.w	8003b80 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <prvAddCurrentTaskToDelayedList+0x84>)
 8004a22:	6810      	ldr	r0, [r2, #0]
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	3104      	adds	r1, #4
 8004a28:	f7ff f8aa 	bl	8003b80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <prvAddCurrentTaskToDelayedList+0x88>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8004a32:	bf38      	it	cc
 8004a34:	601c      	strcc	r4, [r3, #0]
 8004a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a38:	200019f4 	.word	0x200019f4
 8004a3c:	200018d4 	.word	0x200018d4
 8004a40:	20001980 	.word	0x20001980
 8004a44:	200019cc 	.word	0x200019cc
 8004a48:	200018dc 	.word	0x200018dc
 8004a4c:	200018d8 	.word	0x200018d8
 8004a50:	200019ac 	.word	0x200019ac

08004a54 <xTaskCreateStatic>:
	{
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004a5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004a5c:	b945      	cbnz	r5, 8004a70 <xTaskCreateStatic+0x1c>
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	e7fe      	b.n	8004a6e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004a70:	b944      	cbnz	r4, 8004a84 <xTaskCreateStatic+0x30>
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	e7fe      	b.n	8004a82 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a84:	2654      	movs	r6, #84	; 0x54
 8004a86:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a88:	9e04      	ldr	r6, [sp, #16]
 8004a8a:	2e54      	cmp	r6, #84	; 0x54
 8004a8c:	d008      	beq.n	8004aa0 <xTaskCreateStatic+0x4c>
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	e7fe      	b.n	8004a9e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aa0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa2:	2502      	movs	r5, #2
 8004aa4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aa8:	ad05      	add	r5, sp, #20
 8004aaa:	9501      	str	r5, [sp, #4]
 8004aac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004aae:	9402      	str	r4, [sp, #8]
 8004ab0:	9500      	str	r5, [sp, #0]
 8004ab2:	f7ff fefb 	bl	80048ac <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff fe6a 	bl	8004790 <prvAddNewTaskToReadyList>
	}
 8004abc:	9805      	ldr	r0, [sp, #20]
 8004abe:	b006      	add	sp, #24
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}

08004ac2 <xTaskCreate>:
	{
 8004ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aca:	0090      	lsls	r0, r2, #2
	{
 8004acc:	4688      	mov	r8, r1
 8004ace:	4616      	mov	r6, r2
 8004ad0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad2:	f7ff fa51 	bl	8003f78 <pvPortMalloc>
			if( pxStack != NULL )
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	b1e8      	cbz	r0, 8004b16 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ada:	2054      	movs	r0, #84	; 0x54
 8004adc:	f7ff fa4c 	bl	8003f78 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	b1a8      	cbz	r0, 8004b10 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8004aec:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004af2:	9002      	str	r0, [sp, #8]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4632      	mov	r2, r6
 8004af8:	464b      	mov	r3, r9
 8004afa:	4641      	mov	r1, r8
 8004afc:	4638      	mov	r0, r7
 8004afe:	f7ff fed5 	bl	80048ac <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff fe44 	bl	8004790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b08:	2001      	movs	r0, #1
	}
 8004b0a:	b005      	add	sp, #20
 8004b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004b10:	4628      	mov	r0, r5
 8004b12:	f7ff fabf 	bl	8004094 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b16:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004b1a:	e7f6      	b.n	8004b0a <xTaskCreate+0x48>

08004b1c <vTaskStartScheduler>:
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b20:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b22:	aa07      	add	r2, sp, #28
 8004b24:	a906      	add	r1, sp, #24
 8004b26:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b28:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b2a:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b2c:	f000 faa6 	bl	800507c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	9b06      	ldr	r3, [sp, #24]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	9400      	str	r4, [sp, #0]
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	9a07      	ldr	r2, [sp, #28]
 8004b3e:	490d      	ldr	r1, [pc, #52]	; (8004b74 <vTaskStartScheduler+0x58>)
 8004b40:	480d      	ldr	r0, [pc, #52]	; (8004b78 <vTaskStartScheduler+0x5c>)
 8004b42:	f7ff ff87 	bl	8004a54 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004b46:	b190      	cbz	r0, 8004b6e <vTaskStartScheduler+0x52>
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <vTaskStartScheduler+0x60>)
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <vTaskStartScheduler+0x64>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <vTaskStartScheduler+0x68>)
 8004b68:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004b6a:	f7ff f92d 	bl	8003dc8 <xPortStartScheduler>
}
 8004b6e:	b008      	add	sp, #32
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	08006640 	.word	0x08006640
 8004b78:	08004965 	.word	0x08004965
 8004b7c:	200019ac 	.word	0x200019ac
 8004b80:	200019c8 	.word	0x200019c8
 8004b84:	200019f4 	.word	0x200019f4

08004b88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004b88:	4a02      	ldr	r2, [pc, #8]	; (8004b94 <vTaskSuspendAll+0xc>)
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20001978 	.word	0x20001978

08004b98 <xTaskIncrementTick>:
{
 8004b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9c:	4b3c      	ldr	r3, [pc, #240]	; (8004c90 <xTaskIncrementTick+0xf8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d153      	bne.n	8004c4c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <xTaskIncrementTick+0xfc>)
 8004ba6:	681c      	ldr	r4, [r3, #0]
 8004ba8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004baa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bac:	b9bc      	cbnz	r4, 8004bde <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004bae:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <xTaskIncrementTick+0x100>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	b142      	cbz	r2, 8004bc8 <xTaskIncrementTick+0x30>
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	e7fe      	b.n	8004bc6 <xTaskIncrementTick+0x2e>
 8004bc8:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <xTaskIncrementTick+0x104>)
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	6810      	ldr	r0, [r2, #0]
 8004bce:	6018      	str	r0, [r3, #0]
 8004bd0:	6011      	str	r1, [r2, #0]
 8004bd2:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <xTaskIncrementTick+0x108>)
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	f7ff fe55 	bl	8004888 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bde:	4d31      	ldr	r5, [pc, #196]	; (8004ca4 <xTaskIncrementTick+0x10c>)
 8004be0:	4f31      	ldr	r7, [pc, #196]	; (8004ca8 <xTaskIncrementTick+0x110>)
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	429c      	cmp	r4, r3
 8004be6:	f04f 0b00 	mov.w	fp, #0
 8004bea:	d33e      	bcc.n	8004c6a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bec:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004c98 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004bf0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004cb8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf4:	f8d8 2000 	ldr.w	r2, [r8]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	bb72      	cbnz	r2, 8004c5a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	602a      	str	r2, [r5, #0]
					break;
 8004c02:	e032      	b.n	8004c6a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c04:	f106 0a04 	add.w	sl, r6, #4
 8004c08:	4650      	mov	r0, sl
 8004c0a:	f7fe ffd0 	bl	8003bae <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c0e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004c10:	b119      	cbz	r1, 8004c1a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c12:	f106 0018 	add.w	r0, r6, #24
 8004c16:	f7fe ffca 	bl	8003bae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c1a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004c1c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c20:	2201      	movs	r2, #1
 8004c22:	fa02 f100 	lsl.w	r1, r2, r0
 8004c26:	4319      	orrs	r1, r3
 8004c28:	4b20      	ldr	r3, [pc, #128]	; (8004cac <xTaskIncrementTick+0x114>)
 8004c2a:	f8c9 1000 	str.w	r1, [r9]
 8004c2e:	f04f 0e14 	mov.w	lr, #20
 8004c32:	4651      	mov	r1, sl
 8004c34:	fb0e 3000 	mla	r0, lr, r0, r3
 8004c38:	f7fe ff96 	bl	8003b68 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004c40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004c42:	4291      	cmp	r1, r2
 8004c44:	bf28      	it	cs
 8004c46:	f04f 0b01 	movcs.w	fp, #1
 8004c4a:	e7d3      	b.n	8004bf4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <xTaskIncrementTick+0x118>)
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004c54:	f04f 0b00 	mov.w	fp, #0
 8004c58:	e011      	b.n	8004c7e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c5a:	f8d8 2000 	ldr.w	r2, [r8]
 8004c5e:	68d2      	ldr	r2, [r2, #12]
 8004c60:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c62:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004c64:	428c      	cmp	r4, r1
 8004c66:	d2cd      	bcs.n	8004c04 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004c68:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <xTaskIncrementTick+0x114>)
 8004c6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c70:	2214      	movs	r2, #20
 8004c72:	434a      	muls	r2, r1
 8004c74:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004c76:	2a02      	cmp	r2, #2
 8004c78:	bf28      	it	cs
 8004c7a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <xTaskIncrementTick+0x11c>)
 8004c80:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	bf18      	it	ne
 8004c86:	f04f 0b01 	movne.w	fp, #1
}
 8004c8a:	4658      	mov	r0, fp
 8004c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c90:	20001978 	.word	0x20001978
 8004c94:	200019f4 	.word	0x200019f4
 8004c98:	200018d8 	.word	0x200018d8
 8004c9c:	200018dc 	.word	0x200018dc
 8004ca0:	200019b0 	.word	0x200019b0
 8004ca4:	200019ac 	.word	0x200019ac
 8004ca8:	200018d4 	.word	0x200018d4
 8004cac:	200018e0 	.word	0x200018e0
 8004cb0:	20001974 	.word	0x20001974
 8004cb4:	200019f8 	.word	0x200019f8
 8004cb8:	20001980 	.word	0x20001980

08004cbc <xTaskResumeAll>:
{
 8004cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004cc0:	4c31      	ldr	r4, [pc, #196]	; (8004d88 <xTaskResumeAll+0xcc>)
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	b943      	cbnz	r3, 8004cd8 <xTaskResumeAll+0x1c>
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	e7fe      	b.n	8004cd6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004cd8:	f7fe ffe4 	bl	8003ca4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce2:	6824      	ldr	r4, [r4, #0]
 8004ce4:	b12c      	cbz	r4, 8004cf2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004ce6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004ce8:	f7fe fffe 	bl	8003ce8 <vPortExitCritical>
}
 8004cec:	4620      	mov	r0, r4
 8004cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <xTaskResumeAll+0xd0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f5      	beq.n	8004ce6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cfa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004da4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004cfe:	4f24      	ldr	r7, [pc, #144]	; (8004d90 <xTaskResumeAll+0xd4>)
 8004d00:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004da8 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d04:	f8d9 3000 	ldr.w	r3, [r9]
 8004d08:	b9e3      	cbnz	r3, 8004d44 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004d0a:	b10c      	cbz	r4, 8004d10 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004d0c:	f7ff fdbc 	bl	8004888 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d10:	4d20      	ldr	r5, [pc, #128]	; (8004d94 <xTaskResumeAll+0xd8>)
 8004d12:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d14:	b144      	cbz	r4, 8004d28 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004d16:	4e20      	ldr	r6, [pc, #128]	; (8004d98 <xTaskResumeAll+0xdc>)
 8004d18:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004d1a:	f7ff ff3d 	bl	8004b98 <xTaskIncrementTick>
 8004d1e:	b100      	cbz	r0, 8004d22 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004d20:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d22:	3c01      	subs	r4, #1
 8004d24:	d1f9      	bne.n	8004d1a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004d26:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <xTaskResumeAll+0xdc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0da      	beq.n	8004ce6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <xTaskResumeAll+0xe0>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004d40:	2401      	movs	r4, #1
 8004d42:	e7d1      	b.n	8004ce8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d44:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004d48:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d4c:	f104 0018 	add.w	r0, r4, #24
 8004d50:	f7fe ff2d 	bl	8003bae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d54:	4630      	mov	r0, r6
 8004d56:	f7fe ff2a 	bl	8003bae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	2501      	movs	r5, #1
 8004d60:	fa05 f302 	lsl.w	r3, r5, r2
 8004d64:	2014      	movs	r0, #20
 8004d66:	430b      	orrs	r3, r1
 8004d68:	fb00 8002 	mla	r0, r0, r2, r8
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	f7fe fefa 	bl	8003b68 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <xTaskResumeAll+0xe4>)
 8004d76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004d7e:	bf24      	itt	cs
 8004d80:	4b05      	ldrcs	r3, [pc, #20]	; (8004d98 <xTaskResumeAll+0xdc>)
 8004d82:	601d      	strcs	r5, [r3, #0]
 8004d84:	e7be      	b.n	8004d04 <xTaskResumeAll+0x48>
 8004d86:	bf00      	nop
 8004d88:	20001978 	.word	0x20001978
 8004d8c:	2000196c 	.word	0x2000196c
 8004d90:	20001980 	.word	0x20001980
 8004d94:	20001974 	.word	0x20001974
 8004d98:	200019f8 	.word	0x200019f8
 8004d9c:	e000ed04 	.word	0xe000ed04
 8004da0:	200018d4 	.word	0x200018d4
 8004da4:	200019b4 	.word	0x200019b4
 8004da8:	200018e0 	.word	0x200018e0

08004dac <vTaskDelay>:
	{
 8004dac:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dae:	b940      	cbnz	r0, 8004dc2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <vTaskDelay+0x40>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vTaskDelay+0x44>)
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	b141      	cbz	r1, 8004dda <vTaskDelay+0x2e>
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	e7fe      	b.n	8004dd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004dda:	f7ff fed5 	bl	8004b88 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dde:	f7ff fdf3 	bl	80049c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004de2:	f7ff ff6b 	bl	8004cbc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d0e2      	beq.n	8004db0 <vTaskDelay+0x4>
 8004dea:	bd08      	pop	{r3, pc}
 8004dec:	e000ed04 	.word	0xe000ed04
 8004df0:	20001978 	.word	0x20001978

08004df4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <vTaskSwitchContext+0x60>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <vTaskSwitchContext+0x64>)
{
 8004dfa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dfc:	b112      	cbz	r2, 8004e04 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004dfe:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004e04:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <vTaskSwitchContext+0x68>)
 8004e08:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e0a:	fab3 f383 	clz	r3, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f1c3 031f 	rsb	r3, r3, #31
 8004e14:	2214      	movs	r2, #20
 8004e16:	4912      	ldr	r1, [pc, #72]	; (8004e60 <vTaskSwitchContext+0x6c>)
 8004e18:	435a      	muls	r2, r3
 8004e1a:	1888      	adds	r0, r1, r2
 8004e1c:	588c      	ldr	r4, [r1, r2]
 8004e1e:	b944      	cbnz	r4, 8004e32 <vTaskSwitchContext+0x3e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	e7fe      	b.n	8004e30 <vTaskSwitchContext+0x3c>
 8004e32:	6844      	ldr	r4, [r0, #4]
 8004e34:	3208      	adds	r2, #8
 8004e36:	6864      	ldr	r4, [r4, #4]
 8004e38:	6044      	str	r4, [r0, #4]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	4294      	cmp	r4, r2
 8004e3e:	bf04      	itt	eq
 8004e40:	6862      	ldreq	r2, [r4, #4]
 8004e42:	6042      	streq	r2, [r0, #4]
 8004e44:	2214      	movs	r2, #20
 8004e46:	fb02 1303 	mla	r3, r2, r3, r1
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <vTaskSwitchContext+0x70>)
 8004e50:	e7d6      	b.n	8004e00 <vTaskSwitchContext+0xc>
 8004e52:	bf00      	nop
 8004e54:	20001978 	.word	0x20001978
 8004e58:	200019f8 	.word	0x200019f8
 8004e5c:	20001980 	.word	0x20001980
 8004e60:	200018e0 	.word	0x200018e0
 8004e64:	200018d4 	.word	0x200018d4

08004e68 <vTaskPlaceOnEventList>:
{
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004e6c:	b940      	cbnz	r0, 8004e80 <vTaskPlaceOnEventList+0x18>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	e7fe      	b.n	8004e7e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <vTaskPlaceOnEventList+0x30>)
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	3118      	adds	r1, #24
 8004e86:	f7fe fe7b 	bl	8003b80 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	2101      	movs	r1, #1
}
 8004e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e92:	f7ff bd99 	b.w	80049c8 <prvAddCurrentTaskToDelayedList>
 8004e96:	bf00      	nop
 8004e98:	200018d4 	.word	0x200018d4

08004e9c <xTaskRemoveFromEventList>:
{
 8004e9c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e9e:	68c3      	ldr	r3, [r0, #12]
 8004ea0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004ea2:	b944      	cbnz	r4, 8004eb6 <xTaskRemoveFromEventList+0x1a>
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	e7fe      	b.n	8004eb4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eb6:	f104 0518 	add.w	r5, r4, #24
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7fe fe77 	bl	8003bae <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <xTaskRemoveFromEventList+0x6c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	b9e3      	cbnz	r3, 8004f00 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ec6:	1d25      	adds	r5, r4, #4
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7fe fe70 	bl	8003bae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ece:	490f      	ldr	r1, [pc, #60]	; (8004f0c <xTaskRemoveFromEventList+0x70>)
 8004ed0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ed2:	6808      	ldr	r0, [r1, #0]
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4093      	lsls	r3, r2
 8004ed8:	4303      	orrs	r3, r0
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <xTaskRemoveFromEventList+0x74>)
 8004ede:	2014      	movs	r0, #20
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ee6:	f7fe fe3f 	bl	8003b68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <xTaskRemoveFromEventList+0x78>)
 8004eec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004ef4:	bf83      	ittte	hi
 8004ef6:	4b08      	ldrhi	r3, [pc, #32]	; (8004f18 <xTaskRemoveFromEventList+0x7c>)
 8004ef8:	2001      	movhi	r0, #1
 8004efa:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004efc:	2000      	movls	r0, #0
}
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f00:	4629      	mov	r1, r5
 8004f02:	4806      	ldr	r0, [pc, #24]	; (8004f1c <xTaskRemoveFromEventList+0x80>)
 8004f04:	e7ef      	b.n	8004ee6 <xTaskRemoveFromEventList+0x4a>
 8004f06:	bf00      	nop
 8004f08:	20001978 	.word	0x20001978
 8004f0c:	20001980 	.word	0x20001980
 8004f10:	200018e0 	.word	0x200018e0
 8004f14:	200018d4 	.word	0x200018d4
 8004f18:	200019f8 	.word	0x200019f8
 8004f1c:	200019b4 	.word	0x200019b4

08004f20 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <vTaskInternalSetTimeOutState+0x10>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f26:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <vTaskInternalSetTimeOutState+0x14>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6043      	str	r3, [r0, #4]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	200019b0 	.word	0x200019b0
 8004f34:	200019f4 	.word	0x200019f4

08004f38 <xTaskCheckForTimeOut>:
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	b940      	cbnz	r0, 8004f52 <xTaskCheckForTimeOut+0x1a>
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	e7fe      	b.n	8004f50 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004f52:	b941      	cbnz	r1, 8004f66 <xTaskCheckForTimeOut+0x2e>
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	e7fe      	b.n	8004f64 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004f66:	f7fe fe9d 	bl	8003ca4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f6c:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8004f6e:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	1c58      	adds	r0, r3, #1
 8004f74:	d00e      	beq.n	8004f94 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f76:	480d      	ldr	r0, [pc, #52]	; (8004fac <xTaskCheckForTimeOut+0x74>)
 8004f78:	682e      	ldr	r6, [r5, #0]
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	4286      	cmp	r6, r0
 8004f7e:	d001      	beq.n	8004f84 <xTaskCheckForTimeOut+0x4c>
 8004f80:	428a      	cmp	r2, r1
 8004f82:	d20e      	bcs.n	8004fa2 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f84:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d209      	bcs.n	8004f9e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f7ff ffc6 	bl	8004f20 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004f94:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f96:	f7fe fea7 	bl	8003ce8 <vPortExitCritical>
}
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004fa2:	2401      	movs	r4, #1
 8004fa4:	e7f7      	b.n	8004f96 <xTaskCheckForTimeOut+0x5e>
 8004fa6:	bf00      	nop
 8004fa8:	200019f4 	.word	0x200019f4
 8004fac:	200019b0 	.word	0x200019b0

08004fb0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <vTaskMissedYield+0x8>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	4770      	bx	lr
 8004fb8:	200019f8 	.word	0x200019f8

08004fbc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <xTaskGetSchedulerState+0x18>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	b133      	cbz	r3, 8004fd0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <xTaskGetSchedulerState+0x1c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fc8:	bf0c      	ite	eq
 8004fca:	2002      	moveq	r0, #2
 8004fcc:	2000      	movne	r0, #0
 8004fce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fd0:	2001      	movs	r0, #1
	}
 8004fd2:	4770      	bx	lr
 8004fd4:	200019c8 	.word	0x200019c8
 8004fd8:	20001978 	.word	0x20001978

08004fdc <xTaskPriorityDisinherit>:
	{
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004fde:	4604      	mov	r4, r0
 8004fe0:	b908      	cbnz	r0, 8004fe6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <xTaskPriorityDisinherit+0x94>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4298      	cmp	r0, r3
 8004fec:	d008      	beq.n	8005000 <xTaskPriorityDisinherit+0x24>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	e7fe      	b.n	8004ffe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005000:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005002:	b943      	cbnz	r3, 8005016 <xTaskPriorityDisinherit+0x3a>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	e7fe      	b.n	8005014 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005016:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005018:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800501a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800501c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800501e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005020:	d0df      	beq.n	8004fe2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1dd      	bne.n	8004fe2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005026:	1d05      	adds	r5, r0, #4
 8005028:	4628      	mov	r0, r5
 800502a:	f7fe fdc0 	bl	8003bae <uxListRemove>
 800502e:	4e11      	ldr	r6, [pc, #68]	; (8005074 <xTaskPriorityDisinherit+0x98>)
 8005030:	4a11      	ldr	r2, [pc, #68]	; (8005078 <xTaskPriorityDisinherit+0x9c>)
 8005032:	b950      	cbnz	r0, 800504a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005034:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005036:	2114      	movs	r1, #20
 8005038:	4379      	muls	r1, r7
 800503a:	5873      	ldr	r3, [r6, r1]
 800503c:	b92b      	cbnz	r3, 800504a <xTaskPriorityDisinherit+0x6e>
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	2001      	movs	r0, #1
 8005042:	40b8      	lsls	r0, r7
 8005044:	ea23 0300 	bic.w	r3, r3, r0
 8005048:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800504a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800504c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504e:	f1c3 0107 	rsb	r1, r3, #7
 8005052:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005054:	6811      	ldr	r1, [r2, #0]
 8005056:	2401      	movs	r4, #1
 8005058:	fa04 f003 	lsl.w	r0, r4, r3
 800505c:	4308      	orrs	r0, r1
 800505e:	6010      	str	r0, [r2, #0]
 8005060:	2014      	movs	r0, #20
 8005062:	fb00 6003 	mla	r0, r0, r3, r6
 8005066:	4629      	mov	r1, r5
 8005068:	f7fe fd7e 	bl	8003b68 <vListInsertEnd>
					xReturn = pdTRUE;
 800506c:	4620      	mov	r0, r4
	}
 800506e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005070:	200018d4 	.word	0x200018d4
 8005074:	200018e0 	.word	0x200018e0
 8005078:	20001980 	.word	0x20001980

0800507c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <vApplicationGetIdleTaskMemory+0x10>)
 800507e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <vApplicationGetIdleTaskMemory+0x14>)
 8005082:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20001bfc 	.word	0x20001bfc
 8005090:	200019fc 	.word	0x200019fc

08005094 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005094:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8005096:	f000 fcad 	bl	80059f4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 osDelay(10);
 800509a:	200a      	movs	r0, #10
 800509c:	f7fe fcd8 	bl	8003a50 <osDelay>
 80050a0:	e7fb      	b.n	800509a <StartDefaultTask+0x6>

080050a2 <Set_Pin_Output>:
{
 80050a2:	b530      	push	{r4, r5, lr}
 80050a4:	b087      	sub	sp, #28
 80050a6:	4604      	mov	r4, r0
 80050a8:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050aa:	2214      	movs	r2, #20
 80050ac:	2100      	movs	r1, #0
 80050ae:	a801      	add	r0, sp, #4
 80050b0:	f000 fe5d 	bl	8005d6e <memset>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050b4:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80050b6:	a901      	add	r1, sp, #4
 80050b8:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 80050ba:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050bc:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80050be:	f7fb fafb 	bl	80006b8 <HAL_GPIO_Init>
}
 80050c2:	b007      	add	sp, #28
 80050c4:	bd30      	pop	{r4, r5, pc}

080050c6 <Set_Pin_Input>:
{
 80050c6:	b530      	push	{r4, r5, lr}
 80050c8:	b087      	sub	sp, #28
 80050ca:	4604      	mov	r4, r0
 80050cc:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ce:	2214      	movs	r2, #20
 80050d0:	2100      	movs	r1, #0
 80050d2:	a801      	add	r0, sp, #4
 80050d4:	f000 fe4b 	bl	8005d6e <memset>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050d8:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80050da:	a901      	add	r1, sp, #4
 80050dc:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 80050de:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050e0:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80050e2:	f7fb fae9 	bl	80006b8 <HAL_GPIO_Init>
}
 80050e6:	b007      	add	sp, #28
 80050e8:	bd30      	pop	{r4, r5, pc}
	...

080050ec <delay>:
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <delay+0x10>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2200      	movs	r2, #0
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim5))<time);}
 80050f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f6:	4282      	cmp	r2, r0
 80050f8:	d3fc      	bcc.n	80050f4 <delay+0x8>
 80050fa:	4770      	bx	lr
 80050fc:	20001d04 	.word	0x20001d04

08005100 <DHT11_Start>:
{
 8005100:	b510      	push	{r4, lr}
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8005102:	4c10      	ldr	r4, [pc, #64]	; (8005144 <DHT11_Start+0x44>)
 8005104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff ffca 	bl	80050a2 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800510e:	2200      	movs	r2, #0
 8005110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005114:	4620      	mov	r0, r4
 8005116:	f7fb fbb5 	bl	8000884 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 800511a:	f244 6050 	movw	r0, #18000	; 0x4650
 800511e:	f7ff ffe5 	bl	80050ec <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8005122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005126:	4620      	mov	r0, r4
 8005128:	2201      	movs	r2, #1
 800512a:	f7fb fbab 	bl	8000884 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 800512e:	2014      	movs	r0, #20
 8005130:	f7ff ffdc 	bl	80050ec <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8005134:	4620      	mov	r0, r4
 8005136:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 800513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800513e:	f7ff bfc2 	b.w	80050c6 <Set_Pin_Input>
 8005142:	bf00      	nop
 8005144:	40020800 	.word	0x40020800

08005148 <DHT11_Check_Response>:
{
 8005148:	b538      	push	{r3, r4, r5, lr}
	delay (40);
 800514a:	2028      	movs	r0, #40	; 0x28
 800514c:	f7ff ffce 	bl	80050ec <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8005150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005154:	480d      	ldr	r0, [pc, #52]	; (800518c <DHT11_Check_Response+0x44>)
 8005156:	f7fb fb8f 	bl	8000878 <HAL_GPIO_ReadPin>
 800515a:	b9a8      	cbnz	r0, 8005188 <DHT11_Check_Response+0x40>
		delay (80);
 800515c:	2050      	movs	r0, #80	; 0x50
 800515e:	f7ff ffc5 	bl	80050ec <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8005162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005166:	4809      	ldr	r0, [pc, #36]	; (800518c <DHT11_Check_Response+0x44>)
 8005168:	f7fb fb86 	bl	8000878 <HAL_GPIO_ReadPin>
		else Response = -1; // 255
 800516c:	2800      	cmp	r0, #0
 800516e:	bf14      	ite	ne
 8005170:	2401      	movne	r4, #1
 8005172:	24ff      	moveq	r4, #255	; 0xff
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8005174:	4d05      	ldr	r5, [pc, #20]	; (800518c <DHT11_Check_Response+0x44>)
 8005176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800517a:	4628      	mov	r0, r5
 800517c:	f7fb fb7c 	bl	8000878 <HAL_GPIO_ReadPin>
 8005180:	2800      	cmp	r0, #0
 8005182:	d1f8      	bne.n	8005176 <DHT11_Check_Response+0x2e>
}
 8005184:	4620      	mov	r0, r4
 8005186:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t Response = 0;
 8005188:	2400      	movs	r4, #0
 800518a:	e7f3      	b.n	8005174 <DHT11_Check_Response+0x2c>
 800518c:	40020800 	.word	0x40020800

08005190 <DHT11_Read>:
{
 8005190:	b570      	push	{r4, r5, r6, lr}
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8005192:	4e13      	ldr	r6, [pc, #76]	; (80051e0 <DHT11_Read+0x50>)
{
 8005194:	2400      	movs	r4, #0
 8005196:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8005198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800519c:	4630      	mov	r0, r6
 800519e:	f7fb fb6b 	bl	8000878 <HAL_GPIO_ReadPin>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d0f8      	beq.n	8005198 <DHT11_Read+0x8>
		delay (40);   // wait for 40 us
 80051a6:	2028      	movs	r0, #40	; 0x28
 80051a8:	f7ff ffa0 	bl	80050ec <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80051ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7fb fb61 	bl	8000878 <HAL_GPIO_ReadPin>
 80051b6:	2301      	movs	r3, #1
			i&= ~(1<<(7-j));   // write 0
 80051b8:	40ab      	lsls	r3, r5
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80051ba:	b968      	cbnz	r0, 80051d8 <DHT11_Read+0x48>
			i&= ~(1<<(7-j));   // write 0
 80051bc:	ea24 0403 	bic.w	r4, r4, r3
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80051c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7fb fb57 	bl	8000878 <HAL_GPIO_ReadPin>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d1f8      	bne.n	80051c0 <DHT11_Read+0x30>
	for (j=0;j<8;j++)
 80051ce:	f115 35ff 	adds.w	r5, r5, #4294967295
 80051d2:	d2e1      	bcs.n	8005198 <DHT11_Read+0x8>
}
 80051d4:	4620      	mov	r0, r4
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80051d8:	431c      	orrs	r4, r3
 80051da:	b2e4      	uxtb	r4, r4
 80051dc:	e7f0      	b.n	80051c0 <DHT11_Read+0x30>
 80051de:	bf00      	nop
 80051e0:	40020800 	.word	0x40020800

080051e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80051e4:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartTask02 */
	  char	buffer[1000];
	if(HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80051e6:	4827      	ldr	r0, [pc, #156]	; (8005284 <StartTask02+0xa0>)
  /* Infinite loop */
  for(;;)
  {

	  DHT11_Start();
		  Presence = DHT11_Check_Response();
 80051e8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80052b0 <StartTask02+0xcc>
		  Rh_byte1 = DHT11_Read ();
 80051ec:	4e26      	ldr	r6, [pc, #152]	; (8005288 <StartTask02+0xa4>)
		 Rh_byte2 = DHT11_Read ();
 80051ee:	4c27      	ldr	r4, [pc, #156]	; (800528c <StartTask02+0xa8>)
{
 80051f0:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
	if(HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80051f4:	f7fc ff5e 	bl	80020b4 <HAL_TIM_Base_Init>
			  HAL_TIM_Base_Start(&htim5);
 80051f8:	4822      	ldr	r0, [pc, #136]	; (8005284 <StartTask02+0xa0>)
 80051fa:	f7fc fe2c 	bl	8001e56 <HAL_TIM_Base_Start>
			  sprintf(buffer,"here dht11_task\n\r");
 80051fe:	4924      	ldr	r1, [pc, #144]	; (8005290 <StartTask02+0xac>)
 8005200:	a802      	add	r0, sp, #8
 8005202:	f000 fe9d 	bl	8005f40 <strcpy>
		  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8005206:	a802      	add	r0, sp, #8
 8005208:	f7fa ffe2 	bl	80001d0 <strlen>
 800520c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005210:	b282      	uxth	r2, r0
 8005212:	a902      	add	r1, sp, #8
 8005214:	481f      	ldr	r0, [pc, #124]	; (8005294 <StartTask02+0xb0>)
 8005216:	f7fd f90d 	bl	8002434 <HAL_UART_Transmit>
	  DHT11_Start();
 800521a:	f7ff ff71 	bl	8005100 <DHT11_Start>
		  Presence = DHT11_Check_Response();
 800521e:	f7ff ff93 	bl	8005148 <DHT11_Check_Response>
 8005222:	f888 0000 	strb.w	r0, [r8]
		  Rh_byte1 = DHT11_Read ();
 8005226:	f7ff ffb3 	bl	8005190 <DHT11_Read>
 800522a:	7030      	strb	r0, [r6, #0]
		 Rh_byte2 = DHT11_Read ();
 800522c:	f7ff ffb0 	bl	8005190 <DHT11_Read>
 8005230:	7020      	strb	r0, [r4, #0]
		 Temp_byte1 = DHT11_Read ();
 8005232:	f7ff ffad 	bl	8005190 <DHT11_Read>
 8005236:	4f18      	ldr	r7, [pc, #96]	; (8005298 <StartTask02+0xb4>)
		  	  Temp_byte2 = DHT11_Read ();
 8005238:	4d18      	ldr	r5, [pc, #96]	; (800529c <StartTask02+0xb8>)
		 Temp_byte1 = DHT11_Read ();
 800523a:	7038      	strb	r0, [r7, #0]
		  	  Temp_byte2 = DHT11_Read ();
 800523c:	f7ff ffa8 	bl	8005190 <DHT11_Read>
 8005240:	7028      	strb	r0, [r5, #0]
		  	  SUM = DHT11_Read();
 8005242:	f7ff ffa5 	bl	8005190 <DHT11_Read>
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <StartTask02+0xbc>)
		  	  TEMP = Temp_byte1;
 8005248:	783a      	ldrb	r2, [r7, #0]
		  	  SUM = DHT11_Read();
 800524a:	8018      	strh	r0, [r3, #0]
		  	  TEMP = Temp_byte1;
 800524c:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <StartTask02+0xc0>)
		  	  RH = Rh_byte1;
 800524e:	7831      	ldrb	r1, [r6, #0]
		  	  TEMP = Temp_byte1;
 8005250:	801a      	strh	r2, [r3, #0]
		  	  RH = Rh_byte1;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <StartTask02+0xc4>)
		  	  //Temperature = (float) TEMP;
		  	 // Humidity = (float) RH;
		  	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 8005254:	7820      	ldrb	r0, [r4, #0]
		  	  RH = Rh_byte1;
 8005256:	8019      	strh	r1, [r3, #0]
		  	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 8005258:	782b      	ldrb	r3, [r5, #0]
 800525a:	9001      	str	r0, [sp, #4]
 800525c:	9100      	str	r1, [sp, #0]
 800525e:	a802      	add	r0, sp, #8
 8005260:	4912      	ldr	r1, [pc, #72]	; (80052ac <StartTask02+0xc8>)
 8005262:	f000 fe49 	bl	8005ef8 <siprintf>
		  	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 8005266:	a802      	add	r0, sp, #8
 8005268:	f7fa ffb2 	bl	80001d0 <strlen>
 800526c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005270:	b282      	uxth	r2, r0
 8005272:	a902      	add	r1, sp, #8
 8005274:	4807      	ldr	r0, [pc, #28]	; (8005294 <StartTask02+0xb0>)
 8005276:	f7fd f8dd 	bl	8002434 <HAL_UART_Transmit>
		      osDelay(1100);
 800527a:	f240 404c 	movw	r0, #1100	; 0x44c
 800527e:	f7fe fbe7 	bl	8003a50 <osDelay>
 8005282:	e7ca      	b.n	800521a <StartTask02+0x36>
 8005284:	20001d04 	.word	0x20001d04
 8005288:	20001d00 	.word	0x20001d00
 800528c:	20001d4c 	.word	0x20001d4c
 8005290:	08006645 	.word	0x08006645
 8005294:	20001c6c 	.word	0x20001c6c
 8005298:	20001d46 	.word	0x20001d46
 800529c:	20001daa 	.word	0x20001daa
 80052a0:	20001da8 	.word	0x20001da8
 80052a4:	20001d44 	.word	0x20001d44
 80052a8:	20001d02 	.word	0x20001d02
 80052ac:	08006657 	.word	0x08006657
 80052b0:	20001c50 	.word	0x20001c50

080052b4 <SystemClock_Config>:
{
 80052b4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052b6:	2230      	movs	r2, #48	; 0x30
{
 80052b8:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052ba:	eb0d 0002 	add.w	r0, sp, r2
 80052be:	2100      	movs	r1, #0
 80052c0:	f000 fd55 	bl	8005d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052c4:	2214      	movs	r2, #20
 80052c6:	2100      	movs	r1, #0
 80052c8:	a807      	add	r0, sp, #28
 80052ca:	f000 fd50 	bl	8005d6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052ce:	2100      	movs	r1, #0
 80052d0:	2210      	movs	r2, #16
 80052d2:	a803      	add	r0, sp, #12
 80052d4:	f000 fd4b 	bl	8005d6e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80052d8:	2500      	movs	r5, #0
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <SystemClock_Config+0xac>)
 80052dc:	9501      	str	r5, [sp, #4]
 80052de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <SystemClock_Config+0xb0>)
 80052f2:	9502      	str	r5, [sp, #8]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800530a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800530c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005310:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005312:	2308      	movs	r3, #8
 8005314:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005316:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800531a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800531c:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 800531e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005320:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005322:	2307      	movs	r3, #7
 8005324:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005326:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005328:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800532a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800532c:	f7fc f9e2 	bl	80016f4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005330:	230f      	movs	r3, #15
 8005332:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005334:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005338:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800533a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800533c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005340:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005342:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005344:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005346:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005348:	f7fc fba8 	bl	8001a9c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800534c:	23c0      	movs	r3, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800534e:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8005350:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8005352:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8005354:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005356:	f7fc fc7b 	bl	8001c50 <HAL_RCCEx_PeriphCLKConfig>
}
 800535a:	b018      	add	sp, #96	; 0x60
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800
 8005364:	40007000 	.word	0x40007000

08005368 <main>:
{
 8005368:	b580      	push	{r7, lr}
 800536a:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
  HAL_Init();
 800536e:	f7fb f90f 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 8005372:	f7ff ff9f 	bl	80052b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005376:	2214      	movs	r2, #20
 8005378:	2100      	movs	r1, #0
 800537a:	a814      	add	r0, sp, #80	; 0x50
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800537c:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537e:	f000 fcf6 	bl	8005d6e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005382:	4ba1      	ldr	r3, [pc, #644]	; (8005608 <main+0x2a0>)
 8005384:	9400      	str	r4, [sp, #0]
 8005386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005388:	48a0      	ldr	r0, [pc, #640]	; (800560c <main+0x2a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800538a:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8005660 <main+0x2f8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800538e:	f042 0210 	orr.w	r2, r2, #16
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	f002 0210 	and.w	r2, r2, #16
 800539a:	9200      	str	r2, [sp, #0]
 800539c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800539e:	9401      	str	r4, [sp, #4]
 80053a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a2:	f042 0204 	orr.w	r2, r2, #4
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	f002 0204 	and.w	r2, r2, #4
 80053ae:	9201      	str	r2, [sp, #4]
 80053b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053b2:	9402      	str	r4, [sp, #8]
 80053b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
 80053bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053c2:	9202      	str	r2, [sp, #8]
 80053c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c6:	9403      	str	r4, [sp, #12]
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
 80053d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d2:	f002 0201 	and.w	r2, r2, #1
 80053d6:	9203      	str	r2, [sp, #12]
 80053d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053da:	9404      	str	r4, [sp, #16]
 80053dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053de:	f042 0202 	orr.w	r2, r2, #2
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
 80053e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e6:	f002 0202 	and.w	r2, r2, #2
 80053ea:	9204      	str	r2, [sp, #16]
 80053ec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053ee:	9405      	str	r4, [sp, #20]
 80053f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005400:	4622      	mov	r2, r4
 8005402:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005404:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005406:	f7fb fa3d 	bl	8000884 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800540a:	2201      	movs	r2, #1
 800540c:	4611      	mov	r1, r2
 800540e:	4880      	ldr	r0, [pc, #512]	; (8005610 <main+0x2a8>)
 8005410:	f7fb fa38 	bl	8000884 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8005414:	4622      	mov	r2, r4
 8005416:	f24f 0110 	movw	r1, #61456	; 0xf010
 800541a:	487e      	ldr	r0, [pc, #504]	; (8005614 <main+0x2ac>)
 800541c:	f7fb fa32 	bl	8000884 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8005420:	4622      	mov	r2, r4
 8005422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005426:	487a      	ldr	r0, [pc, #488]	; (8005610 <main+0x2a8>)
 8005428:	f7fb fa2c 	bl	8000884 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800542c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800542e:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005430:	a914      	add	r1, sp, #80	; 0x50
 8005432:	4876      	ldr	r0, [pc, #472]	; (800560c <main+0x2a4>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005434:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005436:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543a:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800543c:	f7fb f93c 	bl	80006b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_9;
 8005440:	f240 2301 	movw	r3, #513	; 0x201
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005444:	a914      	add	r1, sp, #80	; 0x50
 8005446:	4872      	ldr	r0, [pc, #456]	; (8005610 <main+0x2a8>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_9;
 8005448:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800544a:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800544c:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544e:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005450:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005452:	f7fb f931 	bl	80006b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8005456:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005458:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545a:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800545c:	486c      	ldr	r0, [pc, #432]	; (8005610 <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545e:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005460:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005464:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005466:	f7fb f927 	bl	80006b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800546a:	a914      	add	r1, sp, #80	; 0x50
 800546c:	486a      	ldr	r0, [pc, #424]	; (8005618 <main+0x2b0>)
  GPIO_InitStruct.Pin = B1_Pin;
 800546e:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005470:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005474:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005476:	f7fb f91f 	bl	80006b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800547a:	2304      	movs	r3, #4
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800547c:	a914      	add	r1, sp, #80	; 0x50
 800547e:	4867      	ldr	r0, [pc, #412]	; (800561c <main+0x2b4>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8005480:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005482:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005486:	f7fb f917 	bl	80006b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800548e:	a914      	add	r1, sp, #80	; 0x50
 8005490:	4862      	ldr	r0, [pc, #392]	; (800561c <main+0x2b4>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8005492:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005494:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005496:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549a:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800549c:	f7fb f90c 	bl	80006b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80054a0:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054a4:	a914      	add	r1, sp, #80	; 0x50
 80054a6:	485b      	ldr	r0, [pc, #364]	; (8005614 <main+0x2ac>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80054a8:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054aa:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80054ac:	2720      	movs	r7, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ae:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b0:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054b2:	f7fb f901 	bl	80006b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80054b6:	a914      	add	r1, sp, #80	; 0x50
 80054b8:	4856      	ldr	r0, [pc, #344]	; (8005614 <main+0x2ac>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80054ba:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054bc:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054be:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80054c0:	f7fb f8fa 	bl	80006b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80054c4:	a914      	add	r1, sp, #80	; 0x50
 80054c6:	4851      	ldr	r0, [pc, #324]	; (800560c <main+0x2a4>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80054c8:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80054ca:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80054d0:	f7fb f8f2 	bl	80006b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054d4:	a914      	add	r1, sp, #80	; 0x50
 80054d6:	484d      	ldr	r0, [pc, #308]	; (800560c <main+0x2a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054d8:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054da:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054de:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054e0:	f7fb f8ea 	bl	80006b8 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80054e4:	484e      	ldr	r0, [pc, #312]	; (8005620 <main+0x2b8>)
  hi2c1.Init.ClockSpeed = 100000;
 80054e6:	4a4f      	ldr	r2, [pc, #316]	; (8005624 <main+0x2bc>)
 80054e8:	4b4f      	ldr	r3, [pc, #316]	; (8005628 <main+0x2c0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80054ea:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80054ec:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054f4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 80054f6:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054f8:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80054fa:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054fc:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054fe:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005500:	f7fb fe14 	bl	800112c <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8005504:	4849      	ldr	r0, [pc, #292]	; (800562c <main+0x2c4>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8005506:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <main+0x2c8>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8005508:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800550a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800550e:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8005512:	4b48      	ldr	r3, [pc, #288]	; (8005634 <main+0x2cc>)
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8005514:	6105      	str	r5, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8005516:	6143      	str	r3, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8005518:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800551a:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800551c:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800551e:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8005520:	f7fb feb0 	bl	8001284 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 8005524:	4844      	ldr	r0, [pc, #272]	; (8005638 <main+0x2d0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005526:	4945      	ldr	r1, [pc, #276]	; (800563c <main+0x2d4>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005528:	6185      	str	r5, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800552a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800552e:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.CRCPolynomial = 10;
 8005532:	230a      	movs	r3, #10
 8005534:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005536:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005538:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800553a:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800553c:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800553e:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005540:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005542:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005544:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005546:	f7fc fc49 	bl	8001ddc <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800554a:	2210      	movs	r2, #16
 800554c:	4621      	mov	r1, r4
 800554e:	a814      	add	r0, sp, #80	; 0x50
 8005550:	f000 fc0d 	bl	8005d6e <memset>
  htim5.Instance = TIM5;
 8005554:	4d3a      	ldr	r5, [pc, #232]	; (8005640 <main+0x2d8>)
  htim5.Init.Prescaler = 83;
 8005556:	483b      	ldr	r0, [pc, #236]	; (8005644 <main+0x2dc>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005558:	60ac      	str	r4, [r5, #8]
  htim5.Init.Prescaler = 83;
 800555a:	2353      	movs	r3, #83	; 0x53
 800555c:	e885 0009 	stmia.w	r5, {r0, r3}
  htim5.Init.Period = 0xffff;
 8005560:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005564:	4628      	mov	r0, r5
  htim5.Init.Period = 0xffff;
 8005566:	60eb      	str	r3, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005568:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800556a:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800556c:	940d      	str	r4, [sp, #52]	; 0x34
 800556e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005570:	f7fc fda0 	bl	80020b4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005578:	a914      	add	r1, sp, #80	; 0x50
 800557a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800557c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800557e:	f7fc fdbd 	bl	80020fc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005582:	a90d      	add	r1, sp, #52	; 0x34
 8005584:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005586:	940d      	str	r4, [sp, #52]	; 0x34
  huart3.Instance = USART3;
 8005588:	4d2f      	ldr	r5, [pc, #188]	; (8005648 <main+0x2e0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800558a:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800558c:	f7fc fe4a 	bl	8002224 <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Init.BaudRate = 115200;
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <main+0x2e4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005592:	60ac      	str	r4, [r5, #8]
  huart3.Init.BaudRate = 115200;
 8005594:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8005598:	e885 0048 	stmia.w	r5, {r3, r6}
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800559c:	4628      	mov	r0, r5
  huart3.Init.Mode = UART_MODE_TX_RX;
 800559e:	230c      	movs	r3, #12
 80055a0:	616b      	str	r3, [r5, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80055a2:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80055a4:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055a6:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80055a8:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80055aa:	f7fc ff15 	bl	80023d8 <HAL_UART_Init>
	 sprintf(buffer,"hello world\n\r");
 80055ae:	4928      	ldr	r1, [pc, #160]	; (8005650 <main+0x2e8>)
 80055b0:	a814      	add	r0, sp, #80	; 0x50
 80055b2:	f000 fcc5 	bl	8005f40 <strcpy>
	 HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80055b6:	a814      	add	r0, sp, #80	; 0x50
 80055b8:	f7fa fe0a 	bl	80001d0 <strlen>
 80055bc:	b282      	uxth	r2, r0
 80055be:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3072);
 80055c0:	4d24      	ldr	r5, [pc, #144]	; (8005654 <main+0x2ec>)
	 HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 80055c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055c6:	a914      	add	r1, sp, #80	; 0x50
 80055c8:	f7fc ff34 	bl	8002434 <HAL_UART_Transmit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3072);
 80055cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ce:	ae06      	add	r6, sp, #24
 80055d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80055d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055d6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80055da:	4621      	mov	r1, r4
 80055dc:	a806      	add	r0, sp, #24
 80055de:	f7fe fa0f 	bl	8003a00 <osThreadCreate>
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <main+0x2f0>)
  osThreadDef(myTask02, StartTask02, osPriorityHigh, 0, 1024);
 80055e4:	350c      	adds	r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80055e6:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityHigh, 0, 1024);
 80055e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ea:	ae0d      	add	r6, sp, #52	; 0x34
 80055ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80055ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055f2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80055f6:	4621      	mov	r1, r4
 80055f8:	a80d      	add	r0, sp, #52	; 0x34
 80055fa:	f7fe fa01 	bl	8003a00 <osThreadCreate>
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <main+0x2f4>)
 8005600:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005602:	f7fe f9f8 	bl	80039f6 <osKernelStart>
 8005606:	e7fe      	b.n	8005606 <main+0x29e>
 8005608:	40023800 	.word	0x40023800
 800560c:	40021000 	.word	0x40021000
 8005610:	40020800 	.word	0x40020800
 8005614:	40020c00 	.word	0x40020c00
 8005618:	40020000 	.word	0x40020000
 800561c:	40020400 	.word	0x40020400
 8005620:	20001cac 	.word	0x20001cac
 8005624:	40005400 	.word	0x40005400
 8005628:	000186a0 	.word	0x000186a0
 800562c:	20001dac 	.word	0x20001dac
 8005630:	40003c00 	.word	0x40003c00
 8005634:	00017700 	.word	0x00017700
 8005638:	20001d50 	.word	0x20001d50
 800563c:	40013000 	.word	0x40013000
 8005640:	20001d04 	.word	0x20001d04
 8005644:	40000c00 	.word	0x40000c00
 8005648:	20001c6c 	.word	0x20001c6c
 800564c:	40004800 	.word	0x40004800
 8005650:	0800666e 	.word	0x0800666e
 8005654:	080065f8 	.word	0x080065f8
 8005658:	20001c68 	.word	0x20001c68
 800565c:	20001d48 	.word	0x20001d48
 8005660:	10120000 	.word	0x10120000

08005664 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8005664:	6802      	ldr	r2, [r0, #0]
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005668:	429a      	cmp	r2, r3
 800566a:	d101      	bne.n	8005670 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800566c:	f7fa bfaa 	b.w	80005c4 <HAL_IncTick>
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40000400 	.word	0x40000400

08005678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005678:	4770      	bx	lr
	...

0800567c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800567c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800567e:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <HAL_MspInit+0x40>)
 8005680:	2200      	movs	r2, #0
 8005682:	9200      	str	r2, [sp, #0]
 8005684:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005686:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800568a:	6459      	str	r1, [r3, #68]	; 0x44
 800568c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800568e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8005692:	9100      	str	r1, [sp, #0]
 8005694:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005696:	9201      	str	r2, [sp, #4]
 8005698:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800569a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800569e:	6419      	str	r1, [r3, #64]	; 0x40
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056a8:	210f      	movs	r1, #15
 80056aa:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056b0:	f7fa ffc0 	bl	8000634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056b4:	b003      	add	sp, #12
 80056b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80056ba:	bf00      	nop
 80056bc:	40023800 	.word	0x40023800

080056c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056c0:	b530      	push	{r4, r5, lr}
 80056c2:	4604      	mov	r4, r0
 80056c4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c6:	2214      	movs	r2, #20
 80056c8:	2100      	movs	r1, #0
 80056ca:	a803      	add	r0, sp, #12
 80056cc:	f000 fb4f 	bl	8005d6e <memset>
  if(hi2c->Instance==I2C1)
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <HAL_I2C_MspInit+0x64>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d122      	bne.n	800571e <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d8:	4c13      	ldr	r4, [pc, #76]	; (8005728 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056da:	4814      	ldr	r0, [pc, #80]	; (800572c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056dc:	2500      	movs	r5, #0
 80056de:	9501      	str	r5, [sp, #4]
 80056e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80056e2:	f043 0302 	orr.w	r3, r3, #2
 80056e6:	6323      	str	r3, [r4, #48]	; 0x30
 80056e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80056f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80056f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056f8:	2312      	movs	r3, #18
 80056fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056fc:	2301      	movs	r3, #1
 80056fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005700:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005702:	2304      	movs	r3, #4
 8005704:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005706:	f7fa ffd7 	bl	80006b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800570a:	9502      	str	r5, [sp, #8]
 800570c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800570e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005712:	6423      	str	r3, [r4, #64]	; 0x40
 8005714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800571a:	9302      	str	r3, [sp, #8]
 800571c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800571e:	b009      	add	sp, #36	; 0x24
 8005720:	bd30      	pop	{r4, r5, pc}
 8005722:	bf00      	nop
 8005724:	40005400 	.word	0x40005400
 8005728:	40023800 	.word	0x40023800
 800572c:	40020400 	.word	0x40020400

08005730 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4604      	mov	r4, r0
 8005734:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005736:	2214      	movs	r2, #20
 8005738:	2100      	movs	r1, #0
 800573a:	a803      	add	r0, sp, #12
 800573c:	f000 fb17 	bl	8005d6e <memset>
  if(hi2s->Instance==SPI3)
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <HAL_I2S_MspInit+0x88>)
 8005744:	429a      	cmp	r2, r3
 8005746:	d135      	bne.n	80057b4 <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005748:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800574c:	2400      	movs	r4, #0
 800574e:	9400      	str	r4, [sp, #0]
 8005750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005752:	481a      	ldr	r0, [pc, #104]	; (80057bc <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
 800575a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005760:	9200      	str	r2, [sp, #0]
 8005762:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005764:	9401      	str	r4, [sp, #4]
 8005766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
 800576e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005770:	f002 0201 	and.w	r2, r2, #1
 8005774:	9201      	str	r2, [sp, #4]
 8005776:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005778:	9402      	str	r4, [sp, #8]
 800577a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577c:	f042 0204 	orr.w	r2, r2, #4
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	9302      	str	r3, [sp, #8]
 800578a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800578e:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005790:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005792:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005794:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005796:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005798:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800579a:	f7fa ff8d 	bl	80006b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800579e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a2:	a903      	add	r1, sp, #12
 80057a4:	4806      	ldr	r0, [pc, #24]	; (80057c0 <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80057a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ac:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057ae:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057b0:	f7fa ff82 	bl	80006b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80057b4:	b008      	add	sp, #32
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	40003c00 	.word	0x40003c00
 80057bc:	40020000 	.word	0x40020000
 80057c0:	40020800 	.word	0x40020800

080057c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4604      	mov	r4, r0
 80057c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ca:	2214      	movs	r2, #20
 80057cc:	2100      	movs	r1, #0
 80057ce:	a803      	add	r0, sp, #12
 80057d0:	f000 facd 	bl	8005d6e <memset>
  if(hspi->Instance==SPI1)
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_SPI_MspInit+0x60>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	d120      	bne.n	800581e <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057dc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80057e0:	2100      	movs	r1, #0
 80057e2:	9101      	str	r1, [sp, #4]
 80057e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e6:	4810      	ldr	r0, [pc, #64]	; (8005828 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
 80057ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057f4:	9201      	str	r2, [sp, #4]
 80057f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	9302      	str	r3, [sp, #8]
 800580a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800580c:	23e0      	movs	r3, #224	; 0xe0
 800580e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005814:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005816:	2305      	movs	r3, #5
 8005818:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800581a:	f7fa ff4d 	bl	80006b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800581e:	b008      	add	sp, #32
 8005820:	bd10      	pop	{r4, pc}
 8005822:	bf00      	nop
 8005824:	40013000 	.word	0x40013000
 8005828:	40020000 	.word	0x40020000

0800582c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800582c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM5)
 800582e:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <HAL_TIM_Base_MspInit+0x38>)
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d113      	bne.n	800585e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005836:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800583a:	2200      	movs	r2, #0
 800583c:	9201      	str	r2, [sp, #4]
 800583e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005840:	f041 0108 	orr.w	r1, r1, #8
 8005844:	6419      	str	r1, [r3, #64]	; 0x40
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	9301      	str	r3, [sp, #4]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800584e:	2032      	movs	r0, #50	; 0x32
 8005850:	2105      	movs	r1, #5
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005852:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005854:	f7fa feee 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005858:	2032      	movs	r0, #50	; 0x32
 800585a:	f7fa ff1f 	bl	800069c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800585e:	b003      	add	sp, #12
 8005860:	f85d fb04 	ldr.w	pc, [sp], #4
 8005864:	40000c00 	.word	0x40000c00

08005868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005868:	b510      	push	{r4, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586e:	2214      	movs	r2, #20
 8005870:	2100      	movs	r1, #0
 8005872:	a803      	add	r0, sp, #12
 8005874:	f000 fa7b 	bl	8005d6e <memset>
  if(huart->Instance==USART3)
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	4b14      	ldr	r3, [pc, #80]	; (80058cc <HAL_UART_MspInit+0x64>)
 800587c:	429a      	cmp	r2, r3
 800587e:	d123      	bne.n	80058c8 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005880:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8005884:	2100      	movs	r1, #0
 8005886:	9101      	str	r1, [sp, #4]
 8005888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800588a:	4811      	ldr	r0, [pc, #68]	; (80058d0 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800588c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
 8005892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005894:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800589c:	9102      	str	r1, [sp, #8]
 800589e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	9302      	str	r3, [sp, #8]
 80058ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80058b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b6:	2302      	movs	r3, #2
 80058b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ba:	2303      	movs	r3, #3
 80058bc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058be:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058c0:	2307      	movs	r3, #7
 80058c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058c4:	f7fa fef8 	bl	80006b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80058c8:	b008      	add	sp, #32
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	40004800 	.word	0x40004800
 80058d0:	40020c00 	.word	0x40020c00

080058d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058d4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80058d6:	4601      	mov	r1, r0
{
 80058d8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80058da:	2200      	movs	r2, #0
 80058dc:	201d      	movs	r0, #29
 80058de:	f7fa fea9 	bl	8000634 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80058e2:	201d      	movs	r0, #29
 80058e4:	f7fa feda 	bl	800069c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80058e8:	2500      	movs	r5, #0
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <HAL_InitTick+0x6c>)
 80058ec:	9502      	str	r5, [sp, #8]
 80058ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80058f0:	4c14      	ldr	r4, [pc, #80]	; (8005944 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 80058f2:	f042 0202 	orr.w	r2, r2, #2
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005900:	a901      	add	r1, sp, #4
 8005902:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005904:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005906:	f7fc f985 	bl	8001c14 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800590a:	f7fc f963 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 800590e:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <HAL_InitTick+0x74>)
 8005910:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8005912:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005916:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005918:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <HAL_InitTick+0x78>)
 800591c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005920:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
 8005922:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8005924:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 8005926:	6125      	str	r5, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005928:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800592a:	f7fc fbc3 	bl	80020b4 <HAL_TIM_Base_Init>
 800592e:	b920      	cbnz	r0, 800593a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8005930:	4620      	mov	r0, r4
 8005932:	f7fc faa2 	bl	8001e7a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005936:	b009      	add	sp, #36	; 0x24
 8005938:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800593a:	2001      	movs	r0, #1
 800593c:	e7fb      	b.n	8005936 <HAL_InitTick+0x62>
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	20001df4 	.word	0x20001df4
 8005948:	40000400 	.word	0x40000400
 800594c:	000f4240 	.word	0x000f4240

08005950 <NMI_Handler>:
 8005950:	4770      	bx	lr

08005952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005952:	e7fe      	b.n	8005952 <HardFault_Handler>

08005954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005954:	e7fe      	b.n	8005954 <MemManage_Handler>

08005956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005956:	e7fe      	b.n	8005956 <BusFault_Handler>

08005958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005958:	e7fe      	b.n	8005958 <UsageFault_Handler>

0800595a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800595a:	4770      	bx	lr

0800595c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <TIM3_IRQHandler+0x8>)
 800595e:	f7fc baa0 	b.w	8001ea2 <HAL_TIM_IRQHandler>
 8005962:	bf00      	nop
 8005964:	20001df4 	.word	0x20001df4

08005968 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <TIM5_IRQHandler+0x8>)
 800596a:	f7fc ba9a 	b.w	8001ea2 <HAL_TIM_IRQHandler>
 800596e:	bf00      	nop
 8005970:	20001d04 	.word	0x20001d04

08005974 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <OTG_FS_IRQHandler+0x8>)
 8005976:	f7fb b881 	b.w	8000a7c <HAL_HCD_IRQHandler>
 800597a:	bf00      	nop
 800597c:	2000220c 	.word	0x2000220c

08005980 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005980:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <_sbrk+0x2c>)
 8005984:	6819      	ldr	r1, [r3, #0]
{
 8005986:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005988:	b909      	cbnz	r1, 800598e <_sbrk+0xe>
		heap_end = &end;
 800598a:	4909      	ldr	r1, [pc, #36]	; (80059b0 <_sbrk+0x30>)
 800598c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800598e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005990:	4669      	mov	r1, sp
 8005992:	4402      	add	r2, r0
 8005994:	428a      	cmp	r2, r1
 8005996:	d906      	bls.n	80059a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005998:	f000 f9a4 	bl	8005ce4 <__errno>
 800599c:	230c      	movs	r3, #12
 800599e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80059a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80059a8:	bd08      	pop	{r3, pc}
 80059aa:	bf00      	nop
 80059ac:	20001c54 	.word	0x20001c54
 80059b0:	200024d4 	.word	0x200024d4

080059b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <SystemInit+0x18>)
 80059b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	e000ed00 	.word	0xe000ed00

080059d0 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80059d0:	2904      	cmp	r1, #4
 80059d2:	d00a      	beq.n	80059ea <USBH_UserProcess+0x1a>
 80059d4:	2905      	cmp	r1, #5
 80059d6:	d004      	beq.n	80059e2 <USBH_UserProcess+0x12>
 80059d8:	2902      	cmp	r1, #2
 80059da:	d105      	bne.n	80059e8 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <USBH_UserProcess+0x20>)
 80059de:	7019      	strb	r1, [r3, #0]
  break;
 80059e0:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80059e2:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80059e4:	4b02      	ldr	r3, [pc, #8]	; (80059f0 <USBH_UserProcess+0x20>)
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	4770      	bx	lr
 80059ea:	2201      	movs	r2, #1
 80059ec:	e7fa      	b.n	80059e4 <USBH_UserProcess+0x14>
 80059ee:	bf00      	nop
 80059f0:	20001c58 	.word	0x20001c58

080059f4 <MX_USB_HOST_Init>:
{
 80059f4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80059f6:	2201      	movs	r2, #1
 80059f8:	490b      	ldr	r1, [pc, #44]	; (8005a28 <MX_USB_HOST_Init+0x34>)
 80059fa:	480c      	ldr	r0, [pc, #48]	; (8005a2c <MX_USB_HOST_Init+0x38>)
 80059fc:	f7fd fac8 	bl	8002f90 <USBH_Init>
 8005a00:	b108      	cbz	r0, 8005a06 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8005a02:	f7ff fe39 	bl	8005678 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8005a06:	490a      	ldr	r1, [pc, #40]	; (8005a30 <MX_USB_HOST_Init+0x3c>)
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <MX_USB_HOST_Init+0x38>)
 8005a0a:	f7fd faf7 	bl	8002ffc <USBH_RegisterClass>
 8005a0e:	b108      	cbz	r0, 8005a14 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8005a10:	f7ff fe32 	bl	8005678 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8005a14:	4805      	ldr	r0, [pc, #20]	; (8005a2c <MX_USB_HOST_Init+0x38>)
 8005a16:	f7fd fb24 	bl	8003062 <USBH_Start>
 8005a1a:	b118      	cbz	r0, 8005a24 <MX_USB_HOST_Init+0x30>
}
 8005a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005a20:	f7ff be2a 	b.w	8005678 <Error_Handler>
 8005a24:	bd08      	pop	{r3, pc}
 8005a26:	bf00      	nop
 8005a28:	080059d1 	.word	0x080059d1
 8005a2c:	20001e34 	.word	0x20001e34
 8005a30:	20000008 	.word	0x20000008

08005a34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005a34:	b530      	push	{r4, r5, lr}
 8005a36:	4604      	mov	r4, r0
 8005a38:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a3a:	2214      	movs	r2, #20
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	a803      	add	r0, sp, #12
 8005a40:	f000 f995 	bl	8005d6e <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a4a:	d135      	bne.n	8005ab8 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4c:	4c1b      	ldr	r4, [pc, #108]	; (8005abc <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a4e:	481c      	ldr	r0, [pc, #112]	; (8005ac0 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a50:	2500      	movs	r5, #0
 8005a52:	9501      	str	r5, [sp, #4]
 8005a54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a56:	f043 0301 	orr.w	r3, r3, #1
 8005a5a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a66:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a6e:	f7fa fe23 	bl	80006b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005a72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005a7e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a80:	480f      	ldr	r0, [pc, #60]	; (8005ac0 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005a82:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a86:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a88:	f7fa fe16 	bl	80006b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a92:	6363      	str	r3, [r4, #52]	; 0x34
 8005a94:	9502      	str	r5, [sp, #8]
 8005a96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a9c:	6463      	str	r3, [r4, #68]	; 0x44
 8005a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa4:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005aa6:	2043      	movs	r0, #67	; 0x43
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005aac:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005aae:	f7fa fdc1 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ab2:	2043      	movs	r0, #67	; 0x43
 8005ab4:	f7fa fdf2 	bl	800069c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ab8:	b009      	add	sp, #36	; 0x24
 8005aba:	bd30      	pop	{r4, r5, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	40020000 	.word	0x40020000

08005ac4 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8005ac4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ac8:	f7fd bc70 	b.w	80033ac <USBH_LL_IncTimer>

08005acc <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005acc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ad0:	f7fd bc82 	b.w	80033d8 <USBH_LL_Connect>

08005ad4 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8005ad4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ad8:	f7fd bc9b 	b.w	8003412 <USBH_LL_Disconnect>

08005adc <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8005adc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ae0:	f7fd bcbb 	b.w	800345a <USBH_LL_NotifyURBChange>

08005ae4 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8005ae4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ae8:	f7fd bc6e 	b.w	80033c8 <USBH_LL_PortEnabled>

08005aec <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8005aec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005af0:	f7fd bc6e 	b.w	80033d0 <USBH_LL_PortDisabled>

08005af4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005af4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005af6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8005afa:	2b01      	cmp	r3, #1
{
 8005afc:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8005afe:	d11b      	bne.n	8005b38 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005b00:	480e      	ldr	r0, [pc, #56]	; (8005b3c <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005b02:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b0a:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005b10:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005b12:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b14:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8005b16:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b1a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005b1c:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005b1e:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005b20:	f7fa feff 	bl	8000922 <HAL_HCD_Init>
 8005b24:	b108      	cbz	r0, 8005b2a <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8005b26:	f7ff fda7 	bl	8005678 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005b2a:	4804      	ldr	r0, [pc, #16]	; (8005b3c <USBH_LL_Init+0x48>)
 8005b2c:	f7fb faf8 	bl	8001120 <HAL_HCD_GetCurrentFrame>
 8005b30:	4601      	mov	r1, r0
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7fd fc37 	bl	80033a6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8005b38:	2000      	movs	r0, #0
 8005b3a:	bd10      	pop	{r4, pc}
 8005b3c:	2000220c 	.word	0x2000220c

08005b40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005b40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8005b42:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005b46:	f7fb fab5 	bl	80010b4 <HAL_HCD_Start>
 8005b4a:	2803      	cmp	r0, #3
 8005b4c:	bf9a      	itte	ls
 8005b4e:	4b02      	ldrls	r3, [pc, #8]	; (8005b58 <USBH_LL_Start+0x18>)
 8005b50:	5c18      	ldrbls	r0, [r3, r0]
 8005b52:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005b54:	bd08      	pop	{r3, pc}
 8005b56:	bf00      	nop
 8005b58:	080066ac 	.word	0x080066ac

08005b5c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005b5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8005b5e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005b62:	f7fb fabd 	bl	80010e0 <HAL_HCD_Stop>
 8005b66:	2803      	cmp	r0, #3
 8005b68:	bf9a      	itte	ls
 8005b6a:	4b02      	ldrls	r3, [pc, #8]	; (8005b74 <USBH_LL_Stop+0x18>)
 8005b6c:	5c18      	ldrbls	r0, [r3, r0]
 8005b6e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8005b70:	bd08      	pop	{r3, pc}
 8005b72:	bf00      	nop
 8005b74:	080066ac 	.word	0x080066ac

08005b78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8005b78:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8005b7a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005b7e:	f7fb fad2 	bl	8001126 <HAL_HCD_GetCurrentSpeed>
 8005b82:	2802      	cmp	r0, #2
 8005b84:	bf9a      	itte	ls
 8005b86:	4b02      	ldrls	r3, [pc, #8]	; (8005b90 <USBH_LL_GetSpeed+0x18>)
 8005b88:	5c18      	ldrbls	r0, [r3, r0]
 8005b8a:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8005b8c:	bd08      	pop	{r3, pc}
 8005b8e:	bf00      	nop
 8005b90:	080066a9 	.word	0x080066a9

08005b94 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8005b94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8005b96:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005b9a:	f7fb fab3 	bl	8001104 <HAL_HCD_ResetPort>
 8005b9e:	2803      	cmp	r0, #3
 8005ba0:	bf9a      	itte	ls
 8005ba2:	4b02      	ldrls	r3, [pc, #8]	; (8005bac <USBH_LL_ResetPort+0x18>)
 8005ba4:	5c18      	ldrbls	r0, [r3, r0]
 8005ba6:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005ba8:	bd08      	pop	{r3, pc}
 8005baa:	bf00      	nop
 8005bac:	080066ac 	.word	0x080066ac

08005bb0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005bb0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005bb4:	f7fb baaf 	b.w	8001116 <HAL_HCD_HC_GetXferCount>

08005bb8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005bba:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005bbe:	9402      	str	r4, [sp, #8]
 8005bc0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005bc4:	9401      	str	r4, [sp, #4]
 8005bc6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005bca:	9400      	str	r4, [sp, #0]
 8005bcc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005bd0:	f7fa fe5d 	bl	800088e <HAL_HCD_HC_Init>
 8005bd4:	2803      	cmp	r0, #3
 8005bd6:	bf9a      	itte	ls
 8005bd8:	4b02      	ldrls	r3, [pc, #8]	; (8005be4 <USBH_LL_OpenPipe+0x2c>)
 8005bda:	5c18      	ldrbls	r0, [r3, r0]
 8005bdc:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005bde:	b004      	add	sp, #16
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop
 8005be4:	080066ac 	.word	0x080066ac

08005be8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005be8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005bea:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005bee:	f7fa fe86 	bl	80008fe <HAL_HCD_HC_Halt>
 8005bf2:	2803      	cmp	r0, #3
 8005bf4:	bf9a      	itte	ls
 8005bf6:	4b02      	ldrls	r3, [pc, #8]	; (8005c00 <USBH_LL_ClosePipe+0x18>)
 8005bf8:	5c18      	ldrbls	r0, [r3, r0]
 8005bfa:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005bfc:	bd08      	pop	{r3, pc}
 8005bfe:	bf00      	nop
 8005c00:	080066ac 	.word	0x080066ac

08005c04 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005c06:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8005c0a:	9403      	str	r4, [sp, #12]
 8005c0c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005c10:	9402      	str	r4, [sp, #8]
 8005c12:	9c07      	ldr	r4, [sp, #28]
 8005c14:	9401      	str	r4, [sp, #4]
 8005c16:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005c1a:	9400      	str	r4, [sp, #0]
 8005c1c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005c20:	f7fa feca 	bl	80009b8 <HAL_HCD_HC_SubmitRequest>
 8005c24:	2803      	cmp	r0, #3
 8005c26:	bf9a      	itte	ls
 8005c28:	4b02      	ldrls	r3, [pc, #8]	; (8005c34 <USBH_LL_SubmitURB+0x30>)
 8005c2a:	5c18      	ldrbls	r0, [r3, r0]
 8005c2c:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005c2e:	b004      	add	sp, #16
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	bf00      	nop
 8005c34:	080066ac 	.word	0x080066ac

08005c38 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005c38:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005c3c:	f7fb ba65 	b.w	800110a <HAL_HCD_HC_GetURBState>

08005c40 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005c40:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8005c42:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d102      	bne.n	8005c50 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	f000 f816 	bl	8005c7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005c50:	20c8      	movs	r0, #200	; 0xc8
 8005c52:	f7fa fcc9 	bl	80005e8 <HAL_Delay>
  return USBH_OK;
}
 8005c56:	2000      	movs	r0, #0
 8005c58:	bd08      	pop	{r3, pc}

08005c5a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005c5a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8005c5e:	2328      	movs	r3, #40	; 0x28
 8005c60:	fb03 0101 	mla	r1, r3, r1, r0
 8005c64:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8005c68:	b11b      	cbz	r3, 8005c72 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005c6a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8005c6e:	2000      	movs	r0, #0
 8005c70:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8005c72:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8005c76:	e7fa      	b.n	8005c6e <USBH_LL_SetToggle+0x14>

08005c78 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005c78:	f7fa bcb6 	b.w	80005e8 <HAL_Delay>

08005c7c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005c7c:	fab0 f280 	clz	r2, r0
 8005c80:	0952      	lsrs	r2, r2, #5
 8005c82:	2101      	movs	r1, #1
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <MX_DriverVbusFS+0x10>)
 8005c86:	f7fa bdfd 	b.w	8000884 <HAL_GPIO_WritePin>
 8005c8a:	bf00      	nop
 8005c8c:	40020800 	.word	0x40020800

08005c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c96:	e003      	b.n	8005ca0 <LoopCopyDataInit>

08005c98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c9e:	3104      	adds	r1, #4

08005ca0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ca0:	480b      	ldr	r0, [pc, #44]	; (8005cd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ca4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ca6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ca8:	d3f6      	bcc.n	8005c98 <CopyDataInit>
  ldr  r2, =_sbss
 8005caa:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cac:	e002      	b.n	8005cb4 <LoopFillZerobss>

08005cae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005cb0:	f842 3b04 	str.w	r3, [r2], #4

08005cb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005cb4:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cb8:	d3f9      	bcc.n	8005cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cba:	f7ff fe7b 	bl	80059b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cbe:	f000 f817 	bl	8005cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cc2:	f7ff fb51 	bl	8005368 <main>
  bx  lr    
 8005cc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005cc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005ccc:	080066f4 	.word	0x080066f4
  ldr  r0, =_sdata
 8005cd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005cd4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8005cd8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8005cdc:	200024d4 	.word	0x200024d4

08005ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ce0:	e7fe      	b.n	8005ce0 <ADC_IRQHandler>
	...

08005ce4 <__errno>:
 8005ce4:	4b01      	ldr	r3, [pc, #4]	; (8005cec <__errno+0x8>)
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000030 	.word	0x20000030

08005cf0 <__libc_init_array>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4e0d      	ldr	r6, [pc, #52]	; (8005d28 <__libc_init_array+0x38>)
 8005cf4:	4c0d      	ldr	r4, [pc, #52]	; (8005d2c <__libc_init_array+0x3c>)
 8005cf6:	1ba4      	subs	r4, r4, r6
 8005cf8:	10a4      	asrs	r4, r4, #2
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	42a5      	cmp	r5, r4
 8005cfe:	d109      	bne.n	8005d14 <__libc_init_array+0x24>
 8005d00:	4e0b      	ldr	r6, [pc, #44]	; (8005d30 <__libc_init_array+0x40>)
 8005d02:	4c0c      	ldr	r4, [pc, #48]	; (8005d34 <__libc_init_array+0x44>)
 8005d04:	f000 fc56 	bl	80065b4 <_init>
 8005d08:	1ba4      	subs	r4, r4, r6
 8005d0a:	10a4      	asrs	r4, r4, #2
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	42a5      	cmp	r5, r4
 8005d10:	d105      	bne.n	8005d1e <__libc_init_array+0x2e>
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d18:	4798      	blx	r3
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	e7ee      	b.n	8005cfc <__libc_init_array+0xc>
 8005d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d22:	4798      	blx	r3
 8005d24:	3501      	adds	r5, #1
 8005d26:	e7f2      	b.n	8005d0e <__libc_init_array+0x1e>
 8005d28:	080066ec 	.word	0x080066ec
 8005d2c:	080066ec 	.word	0x080066ec
 8005d30:	080066ec 	.word	0x080066ec
 8005d34:	080066f0 	.word	0x080066f0

08005d38 <malloc>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <malloc+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f000 b86d 	b.w	8005e1c <_malloc_r>
 8005d42:	bf00      	nop
 8005d44:	20000030 	.word	0x20000030

08005d48 <free>:
 8005d48:	4b02      	ldr	r3, [pc, #8]	; (8005d54 <free+0xc>)
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	f000 b817 	b.w	8005d80 <_free_r>
 8005d52:	bf00      	nop
 8005d54:	20000030 	.word	0x20000030

08005d58 <memcpy>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	1e43      	subs	r3, r0, #1
 8005d5c:	440a      	add	r2, r1
 8005d5e:	4291      	cmp	r1, r2
 8005d60:	d100      	bne.n	8005d64 <memcpy+0xc>
 8005d62:	bd10      	pop	{r4, pc}
 8005d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6c:	e7f7      	b.n	8005d5e <memcpy+0x6>

08005d6e <memset>:
 8005d6e:	4402      	add	r2, r0
 8005d70:	4603      	mov	r3, r0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d100      	bne.n	8005d78 <memset+0xa>
 8005d76:	4770      	bx	lr
 8005d78:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7c:	e7f9      	b.n	8005d72 <memset+0x4>
	...

08005d80 <_free_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4605      	mov	r5, r0
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d045      	beq.n	8005e14 <_free_r+0x94>
 8005d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d8c:	1f0c      	subs	r4, r1, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	18e4      	addlt	r4, r4, r3
 8005d94:	f000 f8dc 	bl	8005f50 <__malloc_lock>
 8005d98:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <_free_r+0x98>)
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	b933      	cbnz	r3, 8005dae <_free_r+0x2e>
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	6014      	str	r4, [r2, #0]
 8005da4:	4628      	mov	r0, r5
 8005da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005daa:	f000 b8d2 	b.w	8005f52 <__malloc_unlock>
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	d90c      	bls.n	8005dcc <_free_r+0x4c>
 8005db2:	6821      	ldr	r1, [r4, #0]
 8005db4:	1862      	adds	r2, r4, r1
 8005db6:	4293      	cmp	r3, r2
 8005db8:	bf04      	itt	eq
 8005dba:	681a      	ldreq	r2, [r3, #0]
 8005dbc:	685b      	ldreq	r3, [r3, #4]
 8005dbe:	6063      	str	r3, [r4, #4]
 8005dc0:	bf04      	itt	eq
 8005dc2:	1852      	addeq	r2, r2, r1
 8005dc4:	6022      	streq	r2, [r4, #0]
 8005dc6:	6004      	str	r4, [r0, #0]
 8005dc8:	e7ec      	b.n	8005da4 <_free_r+0x24>
 8005dca:	4613      	mov	r3, r2
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	b10a      	cbz	r2, 8005dd4 <_free_r+0x54>
 8005dd0:	42a2      	cmp	r2, r4
 8005dd2:	d9fa      	bls.n	8005dca <_free_r+0x4a>
 8005dd4:	6819      	ldr	r1, [r3, #0]
 8005dd6:	1858      	adds	r0, r3, r1
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d10b      	bne.n	8005df4 <_free_r+0x74>
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	4401      	add	r1, r0
 8005de0:	1858      	adds	r0, r3, r1
 8005de2:	4282      	cmp	r2, r0
 8005de4:	6019      	str	r1, [r3, #0]
 8005de6:	d1dd      	bne.n	8005da4 <_free_r+0x24>
 8005de8:	6810      	ldr	r0, [r2, #0]
 8005dea:	6852      	ldr	r2, [r2, #4]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	4401      	add	r1, r0
 8005df0:	6019      	str	r1, [r3, #0]
 8005df2:	e7d7      	b.n	8005da4 <_free_r+0x24>
 8005df4:	d902      	bls.n	8005dfc <_free_r+0x7c>
 8005df6:	230c      	movs	r3, #12
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	e7d3      	b.n	8005da4 <_free_r+0x24>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	1821      	adds	r1, r4, r0
 8005e00:	428a      	cmp	r2, r1
 8005e02:	bf04      	itt	eq
 8005e04:	6811      	ldreq	r1, [r2, #0]
 8005e06:	6852      	ldreq	r2, [r2, #4]
 8005e08:	6062      	str	r2, [r4, #4]
 8005e0a:	bf04      	itt	eq
 8005e0c:	1809      	addeq	r1, r1, r0
 8005e0e:	6021      	streq	r1, [r4, #0]
 8005e10:	605c      	str	r4, [r3, #4]
 8005e12:	e7c7      	b.n	8005da4 <_free_r+0x24>
 8005e14:	bd38      	pop	{r3, r4, r5, pc}
 8005e16:	bf00      	nop
 8005e18:	20001c5c 	.word	0x20001c5c

08005e1c <_malloc_r>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	1ccd      	adds	r5, r1, #3
 8005e20:	f025 0503 	bic.w	r5, r5, #3
 8005e24:	3508      	adds	r5, #8
 8005e26:	2d0c      	cmp	r5, #12
 8005e28:	bf38      	it	cc
 8005e2a:	250c      	movcc	r5, #12
 8005e2c:	2d00      	cmp	r5, #0
 8005e2e:	4606      	mov	r6, r0
 8005e30:	db01      	blt.n	8005e36 <_malloc_r+0x1a>
 8005e32:	42a9      	cmp	r1, r5
 8005e34:	d903      	bls.n	8005e3e <_malloc_r+0x22>
 8005e36:	230c      	movs	r3, #12
 8005e38:	6033      	str	r3, [r6, #0]
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	f000 f887 	bl	8005f50 <__malloc_lock>
 8005e42:	4a23      	ldr	r2, [pc, #140]	; (8005ed0 <_malloc_r+0xb4>)
 8005e44:	6814      	ldr	r4, [r2, #0]
 8005e46:	4621      	mov	r1, r4
 8005e48:	b991      	cbnz	r1, 8005e70 <_malloc_r+0x54>
 8005e4a:	4c22      	ldr	r4, [pc, #136]	; (8005ed4 <_malloc_r+0xb8>)
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	b91b      	cbnz	r3, 8005e58 <_malloc_r+0x3c>
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 f841 	bl	8005ed8 <_sbrk_r>
 8005e56:	6020      	str	r0, [r4, #0]
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f000 f83c 	bl	8005ed8 <_sbrk_r>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d126      	bne.n	8005eb2 <_malloc_r+0x96>
 8005e64:	230c      	movs	r3, #12
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f872 	bl	8005f52 <__malloc_unlock>
 8005e6e:	e7e4      	b.n	8005e3a <_malloc_r+0x1e>
 8005e70:	680b      	ldr	r3, [r1, #0]
 8005e72:	1b5b      	subs	r3, r3, r5
 8005e74:	d41a      	bmi.n	8005eac <_malloc_r+0x90>
 8005e76:	2b0b      	cmp	r3, #11
 8005e78:	d90f      	bls.n	8005e9a <_malloc_r+0x7e>
 8005e7a:	600b      	str	r3, [r1, #0]
 8005e7c:	50cd      	str	r5, [r1, r3]
 8005e7e:	18cc      	adds	r4, r1, r3
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 f866 	bl	8005f52 <__malloc_unlock>
 8005e86:	f104 000b 	add.w	r0, r4, #11
 8005e8a:	1d23      	adds	r3, r4, #4
 8005e8c:	f020 0007 	bic.w	r0, r0, #7
 8005e90:	1ac3      	subs	r3, r0, r3
 8005e92:	d01b      	beq.n	8005ecc <_malloc_r+0xb0>
 8005e94:	425a      	negs	r2, r3
 8005e96:	50e2      	str	r2, [r4, r3]
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	428c      	cmp	r4, r1
 8005e9c:	bf0d      	iteet	eq
 8005e9e:	6863      	ldreq	r3, [r4, #4]
 8005ea0:	684b      	ldrne	r3, [r1, #4]
 8005ea2:	6063      	strne	r3, [r4, #4]
 8005ea4:	6013      	streq	r3, [r2, #0]
 8005ea6:	bf18      	it	ne
 8005ea8:	460c      	movne	r4, r1
 8005eaa:	e7e9      	b.n	8005e80 <_malloc_r+0x64>
 8005eac:	460c      	mov	r4, r1
 8005eae:	6849      	ldr	r1, [r1, #4]
 8005eb0:	e7ca      	b.n	8005e48 <_malloc_r+0x2c>
 8005eb2:	1cc4      	adds	r4, r0, #3
 8005eb4:	f024 0403 	bic.w	r4, r4, #3
 8005eb8:	42a0      	cmp	r0, r4
 8005eba:	d005      	beq.n	8005ec8 <_malloc_r+0xac>
 8005ebc:	1a21      	subs	r1, r4, r0
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f000 f80a 	bl	8005ed8 <_sbrk_r>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d0cd      	beq.n	8005e64 <_malloc_r+0x48>
 8005ec8:	6025      	str	r5, [r4, #0]
 8005eca:	e7d9      	b.n	8005e80 <_malloc_r+0x64>
 8005ecc:	bd70      	pop	{r4, r5, r6, pc}
 8005ece:	bf00      	nop
 8005ed0:	20001c5c 	.word	0x20001c5c
 8005ed4:	20001c60 	.word	0x20001c60

08005ed8 <_sbrk_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4c06      	ldr	r4, [pc, #24]	; (8005ef4 <_sbrk_r+0x1c>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4605      	mov	r5, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	f7ff fd4c 	bl	8005980 <_sbrk>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_sbrk_r+0x1a>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_sbrk_r+0x1a>
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	200024d0 	.word	0x200024d0

08005ef8 <siprintf>:
 8005ef8:	b40e      	push	{r1, r2, r3}
 8005efa:	b500      	push	{lr}
 8005efc:	b09c      	sub	sp, #112	; 0x70
 8005efe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005f02:	ab1d      	add	r3, sp, #116	; 0x74
 8005f04:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005f08:	9002      	str	r0, [sp, #8]
 8005f0a:	9006      	str	r0, [sp, #24]
 8005f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f10:	480a      	ldr	r0, [pc, #40]	; (8005f3c <siprintf+0x44>)
 8005f12:	9104      	str	r1, [sp, #16]
 8005f14:	9107      	str	r1, [sp, #28]
 8005f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	a902      	add	r1, sp, #8
 8005f28:	f000 f870 	bl	800600c <_svfiprintf_r>
 8005f2c:	9b02      	ldr	r3, [sp, #8]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	b01c      	add	sp, #112	; 0x70
 8005f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f38:	b003      	add	sp, #12
 8005f3a:	4770      	bx	lr
 8005f3c:	20000030 	.word	0x20000030

08005f40 <strcpy>:
 8005f40:	4603      	mov	r3, r0
 8005f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f46:	f803 2b01 	strb.w	r2, [r3], #1
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d1f9      	bne.n	8005f42 <strcpy+0x2>
 8005f4e:	4770      	bx	lr

08005f50 <__malloc_lock>:
 8005f50:	4770      	bx	lr

08005f52 <__malloc_unlock>:
 8005f52:	4770      	bx	lr

08005f54 <__ssputs_r>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	688e      	ldr	r6, [r1, #8]
 8005f5a:	429e      	cmp	r6, r3
 8005f5c:	4682      	mov	sl, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	4691      	mov	r9, r2
 8005f62:	4698      	mov	r8, r3
 8005f64:	d835      	bhi.n	8005fd2 <__ssputs_r+0x7e>
 8005f66:	898a      	ldrh	r2, [r1, #12]
 8005f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f6c:	d031      	beq.n	8005fd2 <__ssputs_r+0x7e>
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	6909      	ldr	r1, [r1, #16]
 8005f72:	1a6f      	subs	r7, r5, r1
 8005f74:	6965      	ldr	r5, [r4, #20]
 8005f76:	2302      	movs	r3, #2
 8005f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005f80:	f108 0301 	add.w	r3, r8, #1
 8005f84:	443b      	add	r3, r7
 8005f86:	429d      	cmp	r5, r3
 8005f88:	bf38      	it	cc
 8005f8a:	461d      	movcc	r5, r3
 8005f8c:	0553      	lsls	r3, r2, #21
 8005f8e:	d531      	bpl.n	8005ff4 <__ssputs_r+0xa0>
 8005f90:	4629      	mov	r1, r5
 8005f92:	f7ff ff43 	bl	8005e1c <_malloc_r>
 8005f96:	4606      	mov	r6, r0
 8005f98:	b950      	cbnz	r0, 8005fb0 <__ssputs_r+0x5c>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	f8ca 3000 	str.w	r3, [sl]
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	463a      	mov	r2, r7
 8005fb2:	6921      	ldr	r1, [r4, #16]
 8005fb4:	f7ff fed0 	bl	8005d58 <memcpy>
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	6126      	str	r6, [r4, #16]
 8005fc6:	6165      	str	r5, [r4, #20]
 8005fc8:	443e      	add	r6, r7
 8005fca:	1bed      	subs	r5, r5, r7
 8005fcc:	6026      	str	r6, [r4, #0]
 8005fce:	60a5      	str	r5, [r4, #8]
 8005fd0:	4646      	mov	r6, r8
 8005fd2:	4546      	cmp	r6, r8
 8005fd4:	bf28      	it	cs
 8005fd6:	4646      	movcs	r6, r8
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4649      	mov	r1, r9
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	f000 fa9f 	bl	8006520 <memmove>
 8005fe2:	68a3      	ldr	r3, [r4, #8]
 8005fe4:	1b9b      	subs	r3, r3, r6
 8005fe6:	60a3      	str	r3, [r4, #8]
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	441e      	add	r6, r3
 8005fec:	6026      	str	r6, [r4, #0]
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	f000 faad 	bl	8006554 <_realloc_r>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d1e1      	bne.n	8005fc4 <__ssputs_r+0x70>
 8006000:	6921      	ldr	r1, [r4, #16]
 8006002:	4650      	mov	r0, sl
 8006004:	f7ff febc 	bl	8005d80 <_free_r>
 8006008:	e7c7      	b.n	8005f9a <__ssputs_r+0x46>
	...

0800600c <_svfiprintf_r>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	b09d      	sub	sp, #116	; 0x74
 8006012:	4680      	mov	r8, r0
 8006014:	9303      	str	r3, [sp, #12]
 8006016:	898b      	ldrh	r3, [r1, #12]
 8006018:	061c      	lsls	r4, r3, #24
 800601a:	460d      	mov	r5, r1
 800601c:	4616      	mov	r6, r2
 800601e:	d50f      	bpl.n	8006040 <_svfiprintf_r+0x34>
 8006020:	690b      	ldr	r3, [r1, #16]
 8006022:	b96b      	cbnz	r3, 8006040 <_svfiprintf_r+0x34>
 8006024:	2140      	movs	r1, #64	; 0x40
 8006026:	f7ff fef9 	bl	8005e1c <_malloc_r>
 800602a:	6028      	str	r0, [r5, #0]
 800602c:	6128      	str	r0, [r5, #16]
 800602e:	b928      	cbnz	r0, 800603c <_svfiprintf_r+0x30>
 8006030:	230c      	movs	r3, #12
 8006032:	f8c8 3000 	str.w	r3, [r8]
 8006036:	f04f 30ff 	mov.w	r0, #4294967295
 800603a:	e0c5      	b.n	80061c8 <_svfiprintf_r+0x1bc>
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	616b      	str	r3, [r5, #20]
 8006040:	2300      	movs	r3, #0
 8006042:	9309      	str	r3, [sp, #36]	; 0x24
 8006044:	2320      	movs	r3, #32
 8006046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800604a:	2330      	movs	r3, #48	; 0x30
 800604c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006050:	f04f 0b01 	mov.w	fp, #1
 8006054:	4637      	mov	r7, r6
 8006056:	463c      	mov	r4, r7
 8006058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d13c      	bne.n	80060da <_svfiprintf_r+0xce>
 8006060:	ebb7 0a06 	subs.w	sl, r7, r6
 8006064:	d00b      	beq.n	800607e <_svfiprintf_r+0x72>
 8006066:	4653      	mov	r3, sl
 8006068:	4632      	mov	r2, r6
 800606a:	4629      	mov	r1, r5
 800606c:	4640      	mov	r0, r8
 800606e:	f7ff ff71 	bl	8005f54 <__ssputs_r>
 8006072:	3001      	adds	r0, #1
 8006074:	f000 80a3 	beq.w	80061be <_svfiprintf_r+0x1b2>
 8006078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607a:	4453      	add	r3, sl
 800607c:	9309      	str	r3, [sp, #36]	; 0x24
 800607e:	783b      	ldrb	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 809c 	beq.w	80061be <_svfiprintf_r+0x1b2>
 8006086:	2300      	movs	r3, #0
 8006088:	f04f 32ff 	mov.w	r2, #4294967295
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	9205      	str	r2, [sp, #20]
 8006092:	9306      	str	r3, [sp, #24]
 8006094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006098:	931a      	str	r3, [sp, #104]	; 0x68
 800609a:	2205      	movs	r2, #5
 800609c:	7821      	ldrb	r1, [r4, #0]
 800609e:	4850      	ldr	r0, [pc, #320]	; (80061e0 <_svfiprintf_r+0x1d4>)
 80060a0:	f7fa f89e 	bl	80001e0 <memchr>
 80060a4:	1c67      	adds	r7, r4, #1
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	b9d8      	cbnz	r0, 80060e2 <_svfiprintf_r+0xd6>
 80060aa:	06d9      	lsls	r1, r3, #27
 80060ac:	bf44      	itt	mi
 80060ae:	2220      	movmi	r2, #32
 80060b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060b4:	071a      	lsls	r2, r3, #28
 80060b6:	bf44      	itt	mi
 80060b8:	222b      	movmi	r2, #43	; 0x2b
 80060ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060be:	7822      	ldrb	r2, [r4, #0]
 80060c0:	2a2a      	cmp	r2, #42	; 0x2a
 80060c2:	d016      	beq.n	80060f2 <_svfiprintf_r+0xe6>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	2100      	movs	r1, #0
 80060c8:	200a      	movs	r0, #10
 80060ca:	4627      	mov	r7, r4
 80060cc:	3401      	adds	r4, #1
 80060ce:	783b      	ldrb	r3, [r7, #0]
 80060d0:	3b30      	subs	r3, #48	; 0x30
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d951      	bls.n	800617a <_svfiprintf_r+0x16e>
 80060d6:	b1c9      	cbz	r1, 800610c <_svfiprintf_r+0x100>
 80060d8:	e011      	b.n	80060fe <_svfiprintf_r+0xf2>
 80060da:	2b25      	cmp	r3, #37	; 0x25
 80060dc:	d0c0      	beq.n	8006060 <_svfiprintf_r+0x54>
 80060de:	4627      	mov	r7, r4
 80060e0:	e7b9      	b.n	8006056 <_svfiprintf_r+0x4a>
 80060e2:	4a3f      	ldr	r2, [pc, #252]	; (80061e0 <_svfiprintf_r+0x1d4>)
 80060e4:	1a80      	subs	r0, r0, r2
 80060e6:	fa0b f000 	lsl.w	r0, fp, r0
 80060ea:	4318      	orrs	r0, r3
 80060ec:	9004      	str	r0, [sp, #16]
 80060ee:	463c      	mov	r4, r7
 80060f0:	e7d3      	b.n	800609a <_svfiprintf_r+0x8e>
 80060f2:	9a03      	ldr	r2, [sp, #12]
 80060f4:	1d11      	adds	r1, r2, #4
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	9103      	str	r1, [sp, #12]
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	db01      	blt.n	8006102 <_svfiprintf_r+0xf6>
 80060fe:	9207      	str	r2, [sp, #28]
 8006100:	e004      	b.n	800610c <_svfiprintf_r+0x100>
 8006102:	4252      	negs	r2, r2
 8006104:	f043 0302 	orr.w	r3, r3, #2
 8006108:	9207      	str	r2, [sp, #28]
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	783b      	ldrb	r3, [r7, #0]
 800610e:	2b2e      	cmp	r3, #46	; 0x2e
 8006110:	d10e      	bne.n	8006130 <_svfiprintf_r+0x124>
 8006112:	787b      	ldrb	r3, [r7, #1]
 8006114:	2b2a      	cmp	r3, #42	; 0x2a
 8006116:	f107 0101 	add.w	r1, r7, #1
 800611a:	d132      	bne.n	8006182 <_svfiprintf_r+0x176>
 800611c:	9b03      	ldr	r3, [sp, #12]
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	9203      	str	r2, [sp, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	bfb8      	it	lt
 8006128:	f04f 33ff 	movlt.w	r3, #4294967295
 800612c:	3702      	adds	r7, #2
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	4c2c      	ldr	r4, [pc, #176]	; (80061e4 <_svfiprintf_r+0x1d8>)
 8006132:	7839      	ldrb	r1, [r7, #0]
 8006134:	2203      	movs	r2, #3
 8006136:	4620      	mov	r0, r4
 8006138:	f7fa f852 	bl	80001e0 <memchr>
 800613c:	b138      	cbz	r0, 800614e <_svfiprintf_r+0x142>
 800613e:	2340      	movs	r3, #64	; 0x40
 8006140:	1b00      	subs	r0, r0, r4
 8006142:	fa03 f000 	lsl.w	r0, r3, r0
 8006146:	9b04      	ldr	r3, [sp, #16]
 8006148:	4303      	orrs	r3, r0
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	3701      	adds	r7, #1
 800614e:	7839      	ldrb	r1, [r7, #0]
 8006150:	4825      	ldr	r0, [pc, #148]	; (80061e8 <_svfiprintf_r+0x1dc>)
 8006152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006156:	2206      	movs	r2, #6
 8006158:	1c7e      	adds	r6, r7, #1
 800615a:	f7fa f841 	bl	80001e0 <memchr>
 800615e:	2800      	cmp	r0, #0
 8006160:	d035      	beq.n	80061ce <_svfiprintf_r+0x1c2>
 8006162:	4b22      	ldr	r3, [pc, #136]	; (80061ec <_svfiprintf_r+0x1e0>)
 8006164:	b9fb      	cbnz	r3, 80061a6 <_svfiprintf_r+0x19a>
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	3307      	adds	r3, #7
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	3308      	adds	r3, #8
 8006170:	9303      	str	r3, [sp, #12]
 8006172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006174:	444b      	add	r3, r9
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	e76c      	b.n	8006054 <_svfiprintf_r+0x48>
 800617a:	fb00 3202 	mla	r2, r0, r2, r3
 800617e:	2101      	movs	r1, #1
 8006180:	e7a3      	b.n	80060ca <_svfiprintf_r+0xbe>
 8006182:	2300      	movs	r3, #0
 8006184:	9305      	str	r3, [sp, #20]
 8006186:	4618      	mov	r0, r3
 8006188:	240a      	movs	r4, #10
 800618a:	460f      	mov	r7, r1
 800618c:	3101      	adds	r1, #1
 800618e:	783a      	ldrb	r2, [r7, #0]
 8006190:	3a30      	subs	r2, #48	; 0x30
 8006192:	2a09      	cmp	r2, #9
 8006194:	d903      	bls.n	800619e <_svfiprintf_r+0x192>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ca      	beq.n	8006130 <_svfiprintf_r+0x124>
 800619a:	9005      	str	r0, [sp, #20]
 800619c:	e7c8      	b.n	8006130 <_svfiprintf_r+0x124>
 800619e:	fb04 2000 	mla	r0, r4, r0, r2
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7f1      	b.n	800618a <_svfiprintf_r+0x17e>
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	462a      	mov	r2, r5
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <_svfiprintf_r+0x1e4>)
 80061ae:	a904      	add	r1, sp, #16
 80061b0:	4640      	mov	r0, r8
 80061b2:	f3af 8000 	nop.w
 80061b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061ba:	4681      	mov	r9, r0
 80061bc:	d1d9      	bne.n	8006172 <_svfiprintf_r+0x166>
 80061be:	89ab      	ldrh	r3, [r5, #12]
 80061c0:	065b      	lsls	r3, r3, #25
 80061c2:	f53f af38 	bmi.w	8006036 <_svfiprintf_r+0x2a>
 80061c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061c8:	b01d      	add	sp, #116	; 0x74
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	ab03      	add	r3, sp, #12
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	462a      	mov	r2, r5
 80061d4:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <_svfiprintf_r+0x1e4>)
 80061d6:	a904      	add	r1, sp, #16
 80061d8:	4640      	mov	r0, r8
 80061da:	f000 f881 	bl	80062e0 <_printf_i>
 80061de:	e7ea      	b.n	80061b6 <_svfiprintf_r+0x1aa>
 80061e0:	080066b0 	.word	0x080066b0
 80061e4:	080066b6 	.word	0x080066b6
 80061e8:	080066ba 	.word	0x080066ba
 80061ec:	00000000 	.word	0x00000000
 80061f0:	08005f55 	.word	0x08005f55

080061f4 <_printf_common>:
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	4691      	mov	r9, r2
 80061fa:	461f      	mov	r7, r3
 80061fc:	688a      	ldr	r2, [r1, #8]
 80061fe:	690b      	ldr	r3, [r1, #16]
 8006200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006204:	4293      	cmp	r3, r2
 8006206:	bfb8      	it	lt
 8006208:	4613      	movlt	r3, r2
 800620a:	f8c9 3000 	str.w	r3, [r9]
 800620e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006212:	4606      	mov	r6, r0
 8006214:	460c      	mov	r4, r1
 8006216:	b112      	cbz	r2, 800621e <_printf_common+0x2a>
 8006218:	3301      	adds	r3, #1
 800621a:	f8c9 3000 	str.w	r3, [r9]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006228:	3302      	addmi	r3, #2
 800622a:	f8c9 3000 	strmi.w	r3, [r9]
 800622e:	6825      	ldr	r5, [r4, #0]
 8006230:	f015 0506 	ands.w	r5, r5, #6
 8006234:	d107      	bne.n	8006246 <_printf_common+0x52>
 8006236:	f104 0a19 	add.w	sl, r4, #25
 800623a:	68e3      	ldr	r3, [r4, #12]
 800623c:	f8d9 2000 	ldr.w	r2, [r9]
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	429d      	cmp	r5, r3
 8006244:	db29      	blt.n	800629a <_printf_common+0xa6>
 8006246:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	3300      	adds	r3, #0
 800624e:	bf18      	it	ne
 8006250:	2301      	movne	r3, #1
 8006252:	0692      	lsls	r2, r2, #26
 8006254:	d42e      	bmi.n	80062b4 <_printf_common+0xc0>
 8006256:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800625a:	4639      	mov	r1, r7
 800625c:	4630      	mov	r0, r6
 800625e:	47c0      	blx	r8
 8006260:	3001      	adds	r0, #1
 8006262:	d021      	beq.n	80062a8 <_printf_common+0xb4>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	68e5      	ldr	r5, [r4, #12]
 8006268:	f8d9 2000 	ldr.w	r2, [r9]
 800626c:	f003 0306 	and.w	r3, r3, #6
 8006270:	2b04      	cmp	r3, #4
 8006272:	bf08      	it	eq
 8006274:	1aad      	subeq	r5, r5, r2
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	bf0c      	ite	eq
 800627c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006280:	2500      	movne	r5, #0
 8006282:	4293      	cmp	r3, r2
 8006284:	bfc4      	itt	gt
 8006286:	1a9b      	subgt	r3, r3, r2
 8006288:	18ed      	addgt	r5, r5, r3
 800628a:	f04f 0900 	mov.w	r9, #0
 800628e:	341a      	adds	r4, #26
 8006290:	454d      	cmp	r5, r9
 8006292:	d11b      	bne.n	80062cc <_printf_common+0xd8>
 8006294:	2000      	movs	r0, #0
 8006296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629a:	2301      	movs	r3, #1
 800629c:	4652      	mov	r2, sl
 800629e:	4639      	mov	r1, r7
 80062a0:	4630      	mov	r0, r6
 80062a2:	47c0      	blx	r8
 80062a4:	3001      	adds	r0, #1
 80062a6:	d103      	bne.n	80062b0 <_printf_common+0xbc>
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	3501      	adds	r5, #1
 80062b2:	e7c2      	b.n	800623a <_printf_common+0x46>
 80062b4:	18e1      	adds	r1, r4, r3
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	2030      	movs	r0, #48	; 0x30
 80062ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062be:	4422      	add	r2, r4
 80062c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c8:	3302      	adds	r3, #2
 80062ca:	e7c4      	b.n	8006256 <_printf_common+0x62>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4622      	mov	r2, r4
 80062d0:	4639      	mov	r1, r7
 80062d2:	4630      	mov	r0, r6
 80062d4:	47c0      	blx	r8
 80062d6:	3001      	adds	r0, #1
 80062d8:	d0e6      	beq.n	80062a8 <_printf_common+0xb4>
 80062da:	f109 0901 	add.w	r9, r9, #1
 80062de:	e7d7      	b.n	8006290 <_printf_common+0x9c>

080062e0 <_printf_i>:
 80062e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062e4:	4617      	mov	r7, r2
 80062e6:	7e0a      	ldrb	r2, [r1, #24]
 80062e8:	b085      	sub	sp, #20
 80062ea:	2a6e      	cmp	r2, #110	; 0x6e
 80062ec:	4698      	mov	r8, r3
 80062ee:	4606      	mov	r6, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062f4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80062f8:	f000 80bc 	beq.w	8006474 <_printf_i+0x194>
 80062fc:	d81a      	bhi.n	8006334 <_printf_i+0x54>
 80062fe:	2a63      	cmp	r2, #99	; 0x63
 8006300:	d02e      	beq.n	8006360 <_printf_i+0x80>
 8006302:	d80a      	bhi.n	800631a <_printf_i+0x3a>
 8006304:	2a00      	cmp	r2, #0
 8006306:	f000 80c8 	beq.w	800649a <_printf_i+0x1ba>
 800630a:	2a58      	cmp	r2, #88	; 0x58
 800630c:	f000 808a 	beq.w	8006424 <_printf_i+0x144>
 8006310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006314:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006318:	e02a      	b.n	8006370 <_printf_i+0x90>
 800631a:	2a64      	cmp	r2, #100	; 0x64
 800631c:	d001      	beq.n	8006322 <_printf_i+0x42>
 800631e:	2a69      	cmp	r2, #105	; 0x69
 8006320:	d1f6      	bne.n	8006310 <_printf_i+0x30>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	f011 0f80 	tst.w	r1, #128	; 0x80
 800632a:	d023      	beq.n	8006374 <_printf_i+0x94>
 800632c:	1d11      	adds	r1, r2, #4
 800632e:	6019      	str	r1, [r3, #0]
 8006330:	6813      	ldr	r3, [r2, #0]
 8006332:	e027      	b.n	8006384 <_printf_i+0xa4>
 8006334:	2a73      	cmp	r2, #115	; 0x73
 8006336:	f000 80b4 	beq.w	80064a2 <_printf_i+0x1c2>
 800633a:	d808      	bhi.n	800634e <_printf_i+0x6e>
 800633c:	2a6f      	cmp	r2, #111	; 0x6f
 800633e:	d02a      	beq.n	8006396 <_printf_i+0xb6>
 8006340:	2a70      	cmp	r2, #112	; 0x70
 8006342:	d1e5      	bne.n	8006310 <_printf_i+0x30>
 8006344:	680a      	ldr	r2, [r1, #0]
 8006346:	f042 0220 	orr.w	r2, r2, #32
 800634a:	600a      	str	r2, [r1, #0]
 800634c:	e003      	b.n	8006356 <_printf_i+0x76>
 800634e:	2a75      	cmp	r2, #117	; 0x75
 8006350:	d021      	beq.n	8006396 <_printf_i+0xb6>
 8006352:	2a78      	cmp	r2, #120	; 0x78
 8006354:	d1dc      	bne.n	8006310 <_printf_i+0x30>
 8006356:	2278      	movs	r2, #120	; 0x78
 8006358:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800635c:	496e      	ldr	r1, [pc, #440]	; (8006518 <_printf_i+0x238>)
 800635e:	e064      	b.n	800642a <_printf_i+0x14a>
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006366:	1d11      	adds	r1, r2, #4
 8006368:	6019      	str	r1, [r3, #0]
 800636a:	6813      	ldr	r3, [r2, #0]
 800636c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006370:	2301      	movs	r3, #1
 8006372:	e0a3      	b.n	80064bc <_printf_i+0x1dc>
 8006374:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006378:	f102 0104 	add.w	r1, r2, #4
 800637c:	6019      	str	r1, [r3, #0]
 800637e:	d0d7      	beq.n	8006330 <_printf_i+0x50>
 8006380:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006384:	2b00      	cmp	r3, #0
 8006386:	da03      	bge.n	8006390 <_printf_i+0xb0>
 8006388:	222d      	movs	r2, #45	; 0x2d
 800638a:	425b      	negs	r3, r3
 800638c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006390:	4962      	ldr	r1, [pc, #392]	; (800651c <_printf_i+0x23c>)
 8006392:	220a      	movs	r2, #10
 8006394:	e017      	b.n	80063c6 <_printf_i+0xe6>
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800639e:	d003      	beq.n	80063a8 <_printf_i+0xc8>
 80063a0:	1d08      	adds	r0, r1, #4
 80063a2:	6018      	str	r0, [r3, #0]
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	e006      	b.n	80063b6 <_printf_i+0xd6>
 80063a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063ac:	f101 0004 	add.w	r0, r1, #4
 80063b0:	6018      	str	r0, [r3, #0]
 80063b2:	d0f7      	beq.n	80063a4 <_printf_i+0xc4>
 80063b4:	880b      	ldrh	r3, [r1, #0]
 80063b6:	4959      	ldr	r1, [pc, #356]	; (800651c <_printf_i+0x23c>)
 80063b8:	2a6f      	cmp	r2, #111	; 0x6f
 80063ba:	bf14      	ite	ne
 80063bc:	220a      	movne	r2, #10
 80063be:	2208      	moveq	r2, #8
 80063c0:	2000      	movs	r0, #0
 80063c2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80063c6:	6865      	ldr	r5, [r4, #4]
 80063c8:	60a5      	str	r5, [r4, #8]
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	f2c0 809c 	blt.w	8006508 <_printf_i+0x228>
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	f020 0004 	bic.w	r0, r0, #4
 80063d6:	6020      	str	r0, [r4, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d13f      	bne.n	800645c <_printf_i+0x17c>
 80063dc:	2d00      	cmp	r5, #0
 80063de:	f040 8095 	bne.w	800650c <_printf_i+0x22c>
 80063e2:	4675      	mov	r5, lr
 80063e4:	2a08      	cmp	r2, #8
 80063e6:	d10b      	bne.n	8006400 <_printf_i+0x120>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	07da      	lsls	r2, r3, #31
 80063ec:	d508      	bpl.n	8006400 <_printf_i+0x120>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	6862      	ldr	r2, [r4, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	bfde      	ittt	le
 80063f6:	2330      	movle	r3, #48	; 0x30
 80063f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006400:	ebae 0305 	sub.w	r3, lr, r5
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	f8cd 8000 	str.w	r8, [sp]
 800640a:	463b      	mov	r3, r7
 800640c:	aa03      	add	r2, sp, #12
 800640e:	4621      	mov	r1, r4
 8006410:	4630      	mov	r0, r6
 8006412:	f7ff feef 	bl	80061f4 <_printf_common>
 8006416:	3001      	adds	r0, #1
 8006418:	d155      	bne.n	80064c6 <_printf_i+0x1e6>
 800641a:	f04f 30ff 	mov.w	r0, #4294967295
 800641e:	b005      	add	sp, #20
 8006420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006424:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006428:	493c      	ldr	r1, [pc, #240]	; (800651c <_printf_i+0x23c>)
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006432:	f100 0504 	add.w	r5, r0, #4
 8006436:	601d      	str	r5, [r3, #0]
 8006438:	d001      	beq.n	800643e <_printf_i+0x15e>
 800643a:	6803      	ldr	r3, [r0, #0]
 800643c:	e002      	b.n	8006444 <_printf_i+0x164>
 800643e:	0655      	lsls	r5, r2, #25
 8006440:	d5fb      	bpl.n	800643a <_printf_i+0x15a>
 8006442:	8803      	ldrh	r3, [r0, #0]
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	bf44      	itt	mi
 8006448:	f042 0220 	orrmi.w	r2, r2, #32
 800644c:	6022      	strmi	r2, [r4, #0]
 800644e:	b91b      	cbnz	r3, 8006458 <_printf_i+0x178>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	f022 0220 	bic.w	r2, r2, #32
 8006456:	6022      	str	r2, [r4, #0]
 8006458:	2210      	movs	r2, #16
 800645a:	e7b1      	b.n	80063c0 <_printf_i+0xe0>
 800645c:	4675      	mov	r5, lr
 800645e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006462:	fb02 3310 	mls	r3, r2, r0, r3
 8006466:	5ccb      	ldrb	r3, [r1, r3]
 8006468:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800646c:	4603      	mov	r3, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d1f5      	bne.n	800645e <_printf_i+0x17e>
 8006472:	e7b7      	b.n	80063e4 <_printf_i+0x104>
 8006474:	6808      	ldr	r0, [r1, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	6949      	ldr	r1, [r1, #20]
 800647a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800647e:	d004      	beq.n	800648a <_printf_i+0x1aa>
 8006480:	1d10      	adds	r0, r2, #4
 8006482:	6018      	str	r0, [r3, #0]
 8006484:	6813      	ldr	r3, [r2, #0]
 8006486:	6019      	str	r1, [r3, #0]
 8006488:	e007      	b.n	800649a <_printf_i+0x1ba>
 800648a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800648e:	f102 0004 	add.w	r0, r2, #4
 8006492:	6018      	str	r0, [r3, #0]
 8006494:	6813      	ldr	r3, [r2, #0]
 8006496:	d0f6      	beq.n	8006486 <_printf_i+0x1a6>
 8006498:	8019      	strh	r1, [r3, #0]
 800649a:	2300      	movs	r3, #0
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	4675      	mov	r5, lr
 80064a0:	e7b1      	b.n	8006406 <_printf_i+0x126>
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	1d11      	adds	r1, r2, #4
 80064a6:	6019      	str	r1, [r3, #0]
 80064a8:	6815      	ldr	r5, [r2, #0]
 80064aa:	6862      	ldr	r2, [r4, #4]
 80064ac:	2100      	movs	r1, #0
 80064ae:	4628      	mov	r0, r5
 80064b0:	f7f9 fe96 	bl	80001e0 <memchr>
 80064b4:	b108      	cbz	r0, 80064ba <_printf_i+0x1da>
 80064b6:	1b40      	subs	r0, r0, r5
 80064b8:	6060      	str	r0, [r4, #4]
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	2300      	movs	r3, #0
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c4:	e79f      	b.n	8006406 <_printf_i+0x126>
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	462a      	mov	r2, r5
 80064ca:	4639      	mov	r1, r7
 80064cc:	4630      	mov	r0, r6
 80064ce:	47c0      	blx	r8
 80064d0:	3001      	adds	r0, #1
 80064d2:	d0a2      	beq.n	800641a <_printf_i+0x13a>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	079b      	lsls	r3, r3, #30
 80064d8:	d507      	bpl.n	80064ea <_printf_i+0x20a>
 80064da:	2500      	movs	r5, #0
 80064dc:	f104 0919 	add.w	r9, r4, #25
 80064e0:	68e3      	ldr	r3, [r4, #12]
 80064e2:	9a03      	ldr	r2, [sp, #12]
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	429d      	cmp	r5, r3
 80064e8:	db05      	blt.n	80064f6 <_printf_i+0x216>
 80064ea:	68e0      	ldr	r0, [r4, #12]
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	4298      	cmp	r0, r3
 80064f0:	bfb8      	it	lt
 80064f2:	4618      	movlt	r0, r3
 80064f4:	e793      	b.n	800641e <_printf_i+0x13e>
 80064f6:	2301      	movs	r3, #1
 80064f8:	464a      	mov	r2, r9
 80064fa:	4639      	mov	r1, r7
 80064fc:	4630      	mov	r0, r6
 80064fe:	47c0      	blx	r8
 8006500:	3001      	adds	r0, #1
 8006502:	d08a      	beq.n	800641a <_printf_i+0x13a>
 8006504:	3501      	adds	r5, #1
 8006506:	e7eb      	b.n	80064e0 <_printf_i+0x200>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1a7      	bne.n	800645c <_printf_i+0x17c>
 800650c:	780b      	ldrb	r3, [r1, #0]
 800650e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006512:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006516:	e765      	b.n	80063e4 <_printf_i+0x104>
 8006518:	080066d2 	.word	0x080066d2
 800651c:	080066c1 	.word	0x080066c1

08006520 <memmove>:
 8006520:	4288      	cmp	r0, r1
 8006522:	b510      	push	{r4, lr}
 8006524:	eb01 0302 	add.w	r3, r1, r2
 8006528:	d803      	bhi.n	8006532 <memmove+0x12>
 800652a:	1e42      	subs	r2, r0, #1
 800652c:	4299      	cmp	r1, r3
 800652e:	d10c      	bne.n	800654a <memmove+0x2a>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	4298      	cmp	r0, r3
 8006534:	d2f9      	bcs.n	800652a <memmove+0xa>
 8006536:	1881      	adds	r1, r0, r2
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	42d3      	cmn	r3, r2
 800653c:	d100      	bne.n	8006540 <memmove+0x20>
 800653e:	bd10      	pop	{r4, pc}
 8006540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006544:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006548:	e7f7      	b.n	800653a <memmove+0x1a>
 800654a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800654e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006552:	e7eb      	b.n	800652c <memmove+0xc>

08006554 <_realloc_r>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	4607      	mov	r7, r0
 8006558:	4614      	mov	r4, r2
 800655a:	460e      	mov	r6, r1
 800655c:	b921      	cbnz	r1, 8006568 <_realloc_r+0x14>
 800655e:	4611      	mov	r1, r2
 8006560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006564:	f7ff bc5a 	b.w	8005e1c <_malloc_r>
 8006568:	b922      	cbnz	r2, 8006574 <_realloc_r+0x20>
 800656a:	f7ff fc09 	bl	8005d80 <_free_r>
 800656e:	4625      	mov	r5, r4
 8006570:	4628      	mov	r0, r5
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	f000 f814 	bl	80065a0 <_malloc_usable_size_r>
 8006578:	4284      	cmp	r4, r0
 800657a:	d90f      	bls.n	800659c <_realloc_r+0x48>
 800657c:	4621      	mov	r1, r4
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff fc4c 	bl	8005e1c <_malloc_r>
 8006584:	4605      	mov	r5, r0
 8006586:	2800      	cmp	r0, #0
 8006588:	d0f2      	beq.n	8006570 <_realloc_r+0x1c>
 800658a:	4631      	mov	r1, r6
 800658c:	4622      	mov	r2, r4
 800658e:	f7ff fbe3 	bl	8005d58 <memcpy>
 8006592:	4631      	mov	r1, r6
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff fbf3 	bl	8005d80 <_free_r>
 800659a:	e7e9      	b.n	8006570 <_realloc_r+0x1c>
 800659c:	4635      	mov	r5, r6
 800659e:	e7e7      	b.n	8006570 <_realloc_r+0x1c>

080065a0 <_malloc_usable_size_r>:
 80065a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80065a4:	2800      	cmp	r0, #0
 80065a6:	f1a0 0004 	sub.w	r0, r0, #4
 80065aa:	bfbc      	itt	lt
 80065ac:	580b      	ldrlt	r3, [r1, r0]
 80065ae:	18c0      	addlt	r0, r0, r3
 80065b0:	4770      	bx	lr
	...

080065b4 <_init>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr

080065c0 <_fini>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr
